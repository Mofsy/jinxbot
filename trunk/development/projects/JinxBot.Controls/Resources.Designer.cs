//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JinxBot.Controls {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("JinxBot.Controls.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Behavior.
        /// </summary>
        internal static string CatBehavior {
            get {
                return ResourceManager.GetString("CatBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input.
        /// </summary>
        internal static string CatInput {
            get {
                return ResourceManager.GetString("CatInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only &apos;class&apos; Types are valid for application of the ChatNodeRendererAttribute; other types do not support this..
        /// </summary>
        internal static string ChatNodeRendererAttributeCanOnlyRetrieveFromClassType {
            get {
                return ResourceManager.GetString("ChatNodeRendererAttributeCanOnlyRetrieveFromClassType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Raised when the input box&apos;s text becomes empty..
        /// </summary>
        internal static string ClearedEvent {
            get {
                return ResourceManager.GetString("ClearedEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to body
        ///{
        ///    background-color: black;
        ///    font-size: 12px;
        ///    color: #dddddd;
        ///    font-family: Tahoma, Verdana, Sans-serif;
        ///
        ///}
        ///
        ///p
        ///{
        ///    text-indent: -3em;
        ///    margin-left: 3em;
        ///    margin-top: 4px;
        ///    margin-bottom: 0px;
        ///}
        ///
        ///#scrollTo
        ///{
        ///    height: 4px;
        ///}
        ///
        ///.timestamp
        ///{
        ///	color: #999;
        ///}
        ///
        ///.error
        ///{
        ///	color: Orange;
        ///}
        ///
        ///.userProfileReceivedNotification
        ///{
        ///	color: Yellow;
        ///}
        ///
        ///.userNameOtherUser 
        ///{
        ///	color: Lime;
        ///}
        ///
        ///.userProfileKey
        ///{
        ///	color: SlateGray;
        ///}
        ///
        ///.userProfileValue        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DefaultStyles_css {
            get {
                return ResourceManager.GetString("DefaultStyles_css", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Raised when chat nodes can be added to the display..
        /// </summary>
        internal static string DisplayReadyEvent {
            get {
                return ResourceManager.GetString("DisplayReadyEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to include a timestamp when new chat nodes are added..
        /// </summary>
        internal static string IncludeTimestamp {
            get {
                return ResourceManager.GetString("IncludeTimestamp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to include a timestamp when new chat nodes are added..
        /// </summary>
        internal static string IncludeTimestampChatBox {
            get {
                return ResourceManager.GetString("IncludeTimestampChatBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Raised when the input box has been cleared..
        /// </summary>
        internal static string InputClearedEvent {
            get {
                return ResourceManager.GetString("InputClearedEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //MooTools More, &lt;http://mootools.net/more&gt;. Copyright (c) 2006-2008 Valerio Proietti, &lt;http://mad4milk.net&gt;, MIT Style License.
        ///
        ///Fx.Slide=new Class({Extends:Fx,options:{mode:&quot;vertical&quot;},initialize:function(B,A){this.addEvent(&quot;complete&quot;,function(){this.open=(this.wrapper[&quot;offset&quot;+this.layout.capitalize()]!=0);
        ///if(this.open&amp;&amp;Browser.Engine.webkit419){this.element.dispose().inject(this.wrapper);}},true);this.element=this.subject=$(B);this.parent(A);var C=this.element.retrieve(&quot;wrapper&quot;);
        ///this.wrapper=C||new E [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jinxbot_mootools {
            get {
                return ResourceManager.GetString("jinxbot_mootools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of recently-sent messages that should be displayed in the combo box..
        /// </summary>
        internal static string MaxMostRecentMessages {
            get {
                return ResourceManager.GetString("MaxMostRecentMessages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Raised when the input box&apos;s text has changed..
        /// </summary>
        internal static string MessageChangedEvent {
            get {
                return ResourceManager.GetString("MessageChangedEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Raised when the input box has been activated with input ready to be sent..
        /// </summary>
        internal static string MessageReadyEvent {
            get {
                return ResourceManager.GetString("MessageReadyEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to //MooTools, &lt;http://mootools.net&gt;, My Object Oriented (JavaScript) Tools. Copyright (c) 2006-2008 Valerio Proietti, &lt;http://mad4milk.net&gt;, MIT Style License.
        ///
        ///var MooTools={version:&quot;1.2.0&quot;,build:&quot;&quot;};var Native=function(J){J=J||{};var F=J.afterImplement||function(){};var G=J.generics;G=(G!==false);var H=J.legacy;
        ///var E=J.initialize;var B=J.protect;var A=J.name;var C=E||H;C.constructor=Native;C.$family={name:&quot;native&quot;};if(H&amp;&amp;E){C.prototype=H.prototype;}C.prototype.constructor=C;
        ///if(A){var D=A.toLowerCase();C.p [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string mootools_core {
            get {
                return ResourceManager.GetString("mootools_core", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Most recent messages count must be nonnegative..
        /// </summary>
        internal static string MostRecentMessagesMustBePositive {
            get {
                return ResourceManager.GetString("MostRecentMessagesMustBePositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The color of the timestamp to include..
        /// </summary>
        internal static string TimestampColor {
            get {
                return ResourceManager.GetString("TimestampColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The formatting string used to control timestamp appearance..
        /// </summary>
        internal static string TimestampFormat {
            get {
                return ResourceManager.GetString("TimestampFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timestamp format &apos;{0}&apos; was invalid; the timestamp requires exactly three formatting parameters.  For example, the string &quot;[{{0}}.{{1:d2}}.{{2:d2}}]&quot; displays the hour, two-digit minute, and two-digit second.  The first parameter will always be the hour, the second parameter will be the minute, and the third parameter will be the second..
        /// </summary>
        internal static string TimestampFormatInvalid {
            get {
                return ResourceManager.GetString("TimestampFormatInvalid", resourceCulture);
            }
        }
    }
}
