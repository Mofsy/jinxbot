//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JinxBot.Plugins.JinxBotWeb.JinxBotWeb {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="JinxBotWebServer", ConfigurationName="JinxBotWeb.IJinxBotWebApplication")]
    public interface IJinxBotWebApplication {
        
        [System.ServiceModel.OperationContractAttribute(Action="JinxBotWebServer/IJinxBotWebApplication/PostEvent", ReplyAction="JinxBotWebServer/IJinxBotWebApplication/PostEventResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Clans.ClanMembershipEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Clans.ClanCandidatesSearchEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Clans.ClanFormationEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Clans.ClanDisbandEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Clans.ClanChieftanChangeEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Clans.ClanRankChangeEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Clans.ClanMemberStatusEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Clans.ClanMemberListEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.ClientCheckFailedEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.InformationEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.ChatEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.ChatMessageEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.ServerChatEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.UserEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.ErrorEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.EnteredChatEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.ChannelListEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Friends.FriendListReceivedEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Friends.FriendMovedEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Friends.FriendUpdatedEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Friends.FriendAddedEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.Friends.FriendRemovedEventArgs))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BNSharp.BattleNet.ServerNewsEventArgs))]
        void PostEvent(System.Guid channelID, byte[] mainPasswordHash, JinxBot.Plugins.JinxBotWeb.ClientEvent args);
        
        [System.ServiceModel.OperationContractAttribute(Action="JinxBotWebServer/IJinxBotWebApplication/PostEvents", ReplyAction="JinxBotWebServer/IJinxBotWebApplication/PostEventsResponse")]
        void PostEvents(System.Guid channelID, byte[] mainPasswordHash, JinxBot.Plugins.JinxBotWeb.ClientEvent[] args);
        
        [System.ServiceModel.OperationContractAttribute(Action="JinxBotWebServer/IJinxBotWebApplication/CreateChannel", ReplyAction="JinxBotWebServer/IJinxBotWebApplication/CreateChannelResponse")]
        bool CreateChannel(out System.Guid newChannelID, string clientName, byte[] mainPasswordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="JinxBotWebServer/IJinxBotWebApplication/LoginChannel", ReplyAction="JinxBotWebServer/IJinxBotWebApplication/LoginChannelResponse")]
        bool LoginChannel(System.Guid channelID, byte[] mainPasswordHash, string gatewayName);
        
        [System.ServiceModel.OperationContractAttribute(Action="JinxBotWebServer/IJinxBotWebApplication/SetChannelName", ReplyAction="JinxBotWebServer/IJinxBotWebApplication/SetChannelNameResponse")]
        bool SetChannelName(System.Guid channelID, byte[] mainPasswordHash, string channelName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IJinxBotWebApplicationChannel : JinxBot.Plugins.JinxBotWeb.JinxBotWeb.IJinxBotWebApplication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class JinxBotWebApplicationClient : System.ServiceModel.ClientBase<JinxBot.Plugins.JinxBotWeb.JinxBotWeb.IJinxBotWebApplication>, JinxBot.Plugins.JinxBotWeb.JinxBotWeb.IJinxBotWebApplication {
        
        public JinxBotWebApplicationClient() {
        }
        
        public JinxBotWebApplicationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JinxBotWebApplicationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JinxBotWebApplicationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JinxBotWebApplicationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void PostEvent(System.Guid channelID, byte[] mainPasswordHash, JinxBot.Plugins.JinxBotWeb.ClientEvent args) {
            base.Channel.PostEvent(channelID, mainPasswordHash, args);
        }
        
        public void PostEvents(System.Guid channelID, byte[] mainPasswordHash, JinxBot.Plugins.JinxBotWeb.ClientEvent[] args) {
            base.Channel.PostEvents(channelID, mainPasswordHash, args);
        }
        
        public bool CreateChannel(out System.Guid newChannelID, string clientName, byte[] mainPasswordHash) {
            return base.Channel.CreateChannel(out newChannelID, clientName, mainPasswordHash);
        }
        
        public bool LoginChannel(System.Guid channelID, byte[] mainPasswordHash, string gatewayName) {
            return base.Channel.LoginChannel(channelID, mainPasswordHash, gatewayName);
        }
        
        public bool SetChannelName(System.Guid channelID, byte[] mainPasswordHash, string channelName) {
            return base.Channel.SetChannelName(channelID, mainPasswordHash, channelName);
        }
    }
}
