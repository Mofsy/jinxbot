<?xml version="1.0" encoding="utf-8"?>
<topic id="be596fa1-f125-492b-8dbb-27502e0f2ee9" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction address="intro">
        <para>
            BN# is a utility library designed to simplify the creation of Battle.net client applications by
            abstracting away the underlying connection protocols and allowing the user to worry about implementing
            client functionality.  BN# can be as simple as you need, by dropping it into your project and creating
            settings for it to use, or it can be incredibly flexible, allowing custom packet handling, parsing
            priorities, and assigning priorities to event handlers.  It uses a sophisticated threading model
            under the hood to allow peak performance without forcing the user to handle that directly.
        </para>
        <para>
            BN# has a series of optimizations in place.  To prevent heap fragmentation, data buffers are
            preallocated at fixed sizes and are reused over the lifetime of the application, allowing these buffers to
            not be garbage-collected until the the clients using them are closed.
        </para>
        <para>
            For more information about getting started with BN#, take a look at the
            <a href="http://www.jinxbot.net/wiki/" target="_blank">JinxBot Wiki</a>, including the article
            <a href="http://www.jinxbot.net/wiki/index.php?title=How_to_develop_a_Battle.net_client_in_10_minutes" target="_blank">How to develop a Battle.net client in 10 minutes</a>.
        </para>
        <autoOutline />
    </introduction>
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section>
        <title>New Features</title>
        <content>
            <list type="bullet">
                <item>
                    Support for proxying connections has been enabled.  Proxy support is not included directly in BN#; developers need to implement
                    support for it themselves.  For more information, see the Wiki article <a href="http://www.jinxbot.net/wiki/index.php?title=Proxy_support_in_BNSharp" target="_blank">Proxy support in BN#</a>.
                </item>
                <item>Support for UTF-8 characters in chat messages has been added.</item>
                <item>Built-in support has been added for ad messages.</item>
                <item>
                    Support has been added to set an account's e-mail address during login, or to change
                    login credentials during the login process.  To do so, the client no longer automatically
                    disconnects for invalid login credentials; instead, you can use the <b>ContinueLogin</b>
                    method once the credentials have been changed.
                </item>
                <item>
                    Some support for sanity checking has been implemented in the constructor for
                    <b>BattleNetClient</b>.  It either will throw <see>FileNotFoundException</see> or
                    <see>ConfigurationErrorsException</see>; for more information, see the documentation
                    for the constructor.
                </item>
                <item>
                    Command queuing now has support; to implement it, see the <see cref="BNSharp.Plugins.ICommandQueue">ICommandQueue interface</see>
                    and the wiki article <a href="http://www.jinxbot.net/wiki/index.php?title=Command_queuing">Command queuing</a>.
                </item>
                <item>Added a method to support binary channel join.</item>
                <item>Added support for joining a predefined home channel upon logging in, instead of joining the default product channel.</item>
                <item>
                    The ability to change the server on ConnectionBase without reinstantiating the class has been added.  To use it, an overload
                    of the Connect method has been added, accepting a name (or IP) and a port.
                </item>
                <item>
                    Support for Warcraft III profiles and clan information lookups has been added.  It is
                    still experimental but generally OK.
                </item>
                <item>
                    Added a new field to the PingType enumeration, ReplyBeforeVersioning.  When enabled, this will cause a BattleNetClient to wait for
                    500ms after the arrival of 0x50 (AuthInfo) for a Ping packet to arrive, and will reply to that first.  This will most likely offer faster
                    ping times as the process will not have to wait for the revision check to complete.
                </item>
                <item>
                    The ErrorEventArgs class now has a new member, the Reason property.  The Reason property exposes an enumeration of type ErrorType
                    that indicates to the program the reason for the disconnect, allowing developers to handle the error as they see fit.
                </item>
                <item>
                    A new class, <see cref="T:BNSharp.BattleNet.Gateway">Gateway</see>, has been added to support information about
                    a Battle.net gateway, including its interpretations of username suffixes.
                </item>
                <item>
                    The way in which version-checking has been implemented has been redone (part of MBNCSUtil).  BN# now dynamically
                    compiles the revision check formula into executable code.  This change only affects non-Lockdown clients.  For more
                    information, see <see cref="M:BNSharp.MBNCSUtil.CheckRevision.AlwaysUseSlowCheck">CheckRevision.AlwaysUseSlowCheck</see>.
                </item>
            </list>           
        </content>
    </section>

    <section>
        <title>Breaking Changes</title>
        <content>
            <alert type="important">
                <para>
                    The following changes have been made to BN# between Beta 2 and Beta 3 that will require code changes.  If you are
                    using the latest source code, by now you have probably already had to rework your code to deal with these changes.
                </para>
            </alert>
            <list type="bullet">
                <item>
                    The <see cref="T:BNSharp.BattleNet.BattleNetClient">BattleNetClient</see> class has been moved out of the <see cref="N:BNSharp.Net">BNSharp.Net</see>
                    namespace into the more-appropriate <see cref="N:BNSharp.BattleNet">BNSharp.BattleNet</see> namespace.
                </item>
                <item>
                    The <see cref="T:BNSharp.IBattleNetSettings">IBattleNetSettings</see> interface has gained the <see cref="M:BNSharp.IBattleNetSettings.HomeChannel">HomeChannel property</see>.
                    Implementing classes will need to provide a concrete implementation, even if it is simply to return a null value.  In addition, the
                    <see cref="M:BNSharp.IBattleNetSettings.Server">Server</see> and <see cref="M:BNSharp.IBattleNetSettings.Port">Port properties</see> have been
                    deprecated in favor of using the <see cref="M:BNSharp.IBattleNetSettings.Gateway">Gatway property</see>.
                </item>
            </list>

        </content>
    </section>

    <section>
        <title>Non-Breaking Changes/Bug Fixes</title>
        <content>
            <list type="bullet">
                <item>BN# no longer forces a disconnect when the server fails to prove that it is a legitimate server.</item>
                <item>
                    Fixed an issue in which a disconnect (for instance, due to Warden or certain instances when a CD key was in use) would not bubble the
                    disconnecting event.
                </item>
            </list>
        </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>