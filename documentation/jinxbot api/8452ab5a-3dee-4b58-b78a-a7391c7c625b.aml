<?xml version="1.0" encoding="utf-8"?>
<topic id="8452ab5a-3dee-4b58-b78a-a7391c7c625b" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>BN# is designed so that developers can quickly use it to create a functioning 
      binary client for Battle.net.  (A binary client is one that connects using a binary 
      protocol instead of the out-of-date CHAT protocol).  It does so by providing a neatly-packaged
      programming library that makes the process relatively straightforward, hiding most of the 
      mundane details from the programmer.</para>
      <para>Please note: in order to complete this tutorial, you will need a basic understanding of
      the C# or Visual Basic .NET programming languages, and already have a development environment,
      such as Visual Studio, Visual C# Express, or #develop configured.  It will familiarize you with 
      the concepts of programming BN# and will present a rudimentary console-based client.</para>
      <para>Although BN# is developed so that it is compatible with the Microsoft .NET Framework 2.0, 
      this sample uses C# 3.0-only features only found in the .NET Framework 3.5 compiler.</para>
    </introduction>
    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <procedure>
      <title>How to: Develop a Battle.net Client in 10 Minutes</title>
      <steps class="ordered">
        <step>
          <content>
            <para>Create a new Console Application project.</para>
          </content>
        </step>
        <step>
          <content>
            <para>Right-click on the References folder, and choose "Add Reference...".  In the
            "Browse" tab, navigate to the directory where you have unzipped BNSharp.dll.  Choose
            BNSharp.dll.</para>
          </content>
        </step>
        <step>
          <content>
            <para>Implement the IBattleNetSettings interface.  To do so, right-click on your project
            and choose "Add Class", and call it ClientSettings.  Here is a sample implementation 
            that enable use of Starcraft retail:</para>
            <code lang="csharp">
            <![CDATA[ 
using System;
using System.Collections.Generic;
using System.Text;
using BNSharp;
using BNSharp.BattleNet;

namespace BnsDemoClient
{
    class ClientSettings : IBattleNetSettings
    {
        #region IBattleNetSettings Members

        public string CdKey1
        {
            get;
            set;
        }

        public string CdKey2
        {
            get;
            set;
        }

        public string CdKeyOwner
        {
            get { return "BNSharp"; }
            set { }
        }

        public string Client
        {
            get { return Product.StarcraftRetail.ProductCode; }
            set { }
        }

        public string GameExe
        {
            get { return @"c:\GameFiles\STAR\Starcraft.exe"; }
            set { }
        }

        public string GameFile2
        {
            get { return @"c:\GameFiles\STAR\storm.dll"; }
            set { }
        }

        public string GameFile3
        {
            get { return @"c:\GameFiles\STAR\battle.snp"; }
            set { }
        }

        public string HomeChannel
        {
            get;
            set;
        }

        public string ImageFile
        {
            get { return @"c:\GameFiles\STAR\star.bin"; }
            set { }
        }

        public string Password
        {
            get;
            set; 
        }

        public BNSharp.BattleNet.PingType PingMethod
        {
            get { return PingType.Normal; }
            set { }
        }

        public int Port
        {
            get { return 6112; }
            set { }
        }

        public string Server
        {
            get { return "useast.battle.net"; }
            set { }
        }

        public string Username
        {
            get;
            set;
        }

        public int VersionByte
        {
            get { return 0xd1; }
            set { }
        }

        #endregion
    }
}
            ]]>
            </code>
            <code lang="vb">
            <![CDATA[
Imports BNSharp.BattleNet

Public Class ClientSettings
    Implements BNSharp.IBattleNetSettings

    Private key1, key2, keyOwner, account, myPassword As String

    Public Property CdKey1() As String Implements BNSharp.IBattleNetSettings.CdKey1
        Get
            Return key1
        End Get
        Set(ByVal value As String)
            key1 = value
        End Set
    End Property

    Public Property CdKey2() As String Implements BNSharp.IBattleNetSettings.CdKey2
        Get
            Return key2
        End Get
        Set(ByVal value As String)
            key2 = value
        End Set
    End Property

    Public Property CdKeyOwner() As String Implements BNSharp.IBattleNetSettings.CdKeyOwner
        Get
            Return keyOwner
        End Get
        Set(ByVal value As String)
            keyOwner = value
        End Set
    End Property

    Public Property Client() As String Implements BNSharp.IBattleNetSettings.Client
        Get
            Return Product.StarcraftRetail.ProductCode
        End Get
        Set(ByVal value As String)

        End Set
    End Property

    Public Property GameExe() As String Implements BNSharp.IBattleNetSettings.GameExe
        Get
            Return "C:\GameFiles\STAR\Starcraft.exe"
        End Get
        Set(ByVal value As String)

        End Set
    End Property

    Public Property GameFile2() As String Implements BNSharp.IBattleNetSettings.GameFile2
        Get
            Return "C:\GameFiles\STAR\storm.dll"
        End Get
        Set(ByVal value As String)

        End Set
    End Property

    Public Property GameFile3() As String Implements BNSharp.IBattleNetSettings.GameFile3
        Get
            Return "C:\GameFiles\STAR\battle.snp"
        End Get
        Set(ByVal value As String)

        End Set
    End Property

    Public Property HomeChannel() As String Implements BNSharp.IBattleNetSettings.HomeChannel
        Get
            Return Nothing
        End Get
        Set(ByVal value As String)

        End Set
    End Property

    Public Property ImageFile() As String Implements BNSharp.IBattleNetSettings.ImageFile
        Get
            Return "C:\GameFiles\STAR\Star.bin"
        End Get
        Set(ByVal value As String)

        End Set
    End Property

    Public Property Password() As String Implements BNSharp.IBattleNetSettings.Password
        Get
            Return myPassword
        End Get
        Set(ByVal value As String)
            myPassword = value
        End Set
    End Property

    Public Property PingMethod() As BNSharp.BattleNet.PingType Implements BNSharp.IBattleNetSettings.PingMethod
        Get
            Return BNSharp.BattleNet.PingType.Normal
        End Get
        Set(ByVal value As BNSharp.BattleNet.PingType)

        End Set
    End Property

    Public Property Port() As Integer Implements BNSharp.IBattleNetSettings.Port
        Get
            Return 6112
        End Get
        Set(ByVal value As Integer)

        End Set
    End Property

    Public Property Server() As String Implements BNSharp.IBattleNetSettings.Server
        Get
            Return "useast.battle.net"
        End Get
        Set(ByVal value As String)

        End Set
    End Property

    Public Property Username() As String Implements BNSharp.IBattleNetSettings.Username
        Get
            Return account
        End Get
        Set(ByVal value As String)
            account = value
        End Set
    End Property

    Public Property VersionByte() As Integer Implements BNSharp.IBattleNetSettings.VersionByte
        Get
            Return 211
        End Get
        Set(ByVal value As Integer)

        End Set
    End Property
End Class
            ]]>
			</code>
            <para>This code assumes that you have located the revision check files in a 
            folder called <literal>c:\GameFiles\STAR</literal>.  For information about revision
            check files, see <codeEntityReference>M:BNSharp.MBNCSUtil.CheckRevision.DoLockdownCheckRevision</codeEntityReference>.</para>
            <para>This code does not automatically create an account, and it only connects to US
            East.  There are a number of additions that could be easily added to someone willing
            to put in the work.</para>
          </content>
        </step>
        <step>
          <content>
            <para>Create the client.  Within the code's entry point, you'll need to prompt the user
            for information required to connect, such as CD key, account name, and password.</para>
            <code language="csharp">
            <![CDATA[
        static void Main(string[] args)
        {
            string userName, password, key;
            Console.WriteLine("Specify username: ");
            userName = Console.ReadLine();
            Console.WriteLine("Specify password: ");
            password = Console.ReadLine();
            Console.WriteLine("Specify CD key for Starcraft:");
            key = Console.ReadLine();

            ClientSettings settings = new ClientSettings
            {
                CdKey1 = key,
                Username = userName,
                Password = password
            };

            BattleNetClient client = new BattleNetClient(settings);
       }
            ]]>
            </code>
            <code lang="vb">
            <![CDATA[
Imports BNSharp.BattleNet
Imports BNSharp

Module Module1
    ' This field must be declared as WithEvents
    Private WithEvents client As BattleNetClient

    Sub Main()
        Dim userName, password, key As String
        Console.WriteLine("Specify username:")
        userName = Console.ReadLine()
        Console.WriteLine("Specify password:")
        password = Console.ReadLine
        Console.WriteLine("Specify CD key for Starcraft:")
        key = Console.ReadLine

        Dim settings As New ClientSettings With { _
            .CdKey1 = key, _
            .Username = userName, _
            .Password = password, _
            .CdKeyOwner = "BNSharp" _
        }

        client = New BattleNetClient(settings)
    End Sub

End Module
            ]]>
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Wire up event handlers.  You can add event handlers inline, and they can 
            be more elaborate than shown here.  But here are sample event handlers, that can
            be added immediately after you declare the client:</para>
            <code language="csharp">
            <![CDATA[
            client.Connected += delegate
            {
                Console.WriteLine("Connected.");
            };
            client.EnteredChat += delegate(object sender, EnteredChatEventArgs e)
            {
                Console.WriteLine("Entered chat as {0}", e.UniqueUsername);
            };
            client.JoinedChannel += delegate(object sender, ServerChatEventArgs e)
            {
                Console.WriteLine("Joined Channel: {0}", e.Text);
            };
            client.UserJoined += delegate(object sender, UserEventArgs e)
            {
                Console.WriteLine("User Joined: {0} ({1})", e.User.Username, e.User.Stats.Product.Name);
            };
            client.UserLeft += delegate(object sender, UserEventArgs e)
            {
                Console.WriteLine("User left: {0}", e.User.Username);
            };
            client.UserShown += delegate(object sender, UserEventArgs e)
            {
                Console.WriteLine("User Joined: {0} ({1})", e.User.Username, e.User.Stats.Product.Name);
            };
            client.UserSpoke += delegate(object sender, ChatMessageEventArgs e)
            {
                Console.WriteLine("<{0}>: {1}", e.Username, e.Text);
            };
            client.UserEmoted += delegate(object sender, ChatMessageEventArgs e)
            {
                Console.WriteLine("<{0} {1}>", e.Username, e.Text);
            };
            client.WhisperSent += delegate(object sender, ChatMessageEventArgs e)
            {
                Console.WriteLine("You whisper to {0}: {1}", e.Username, e.Text);
            };
            client.WhisperReceived += delegate(object sender, ChatMessageEventArgs e)
            {
                Console.WriteLine("{0} whispers: {1}", e.Username, e.Text);
            };
            client.LoginFailed += delegate(object sender, LoginFailedEventArgs e)
            {
                Console.WriteLine("Login failed: {0}", e.Reason);
            };
            ]]>
            </code>
            <code lang="vb">
            <![CDATA[
    Sub client_Connected(ByVal sender As Object, ByVal e As EventArgs) _
                         Handles client.Connected

        Console.WriteLine("Connected.")
    End Sub

    Sub client_EnteredChat(ByVal sender As Object, _
                           ByVal e As EnteredChatEventArgs) _
                           Handles client.EnteredChat

        Console.WriteLine("Entered chat as {0}", e.UniqueUsername)
    End Sub

    Sub client_JoinedChannel(ByVal sender As Object, _
                             ByVal e As ServerChatEventArgs) _
                             Handles client.JoinedChannel

        Console.WriteLine("Joined Channel: {0}", e.Text)
    End Sub

    Sub client_UserJoined(ByVal sender As Object, _
                          ByVal e As UserEventArgs) _
                          Handles client.UserJoined

        Console.WriteLine("User Joined: {0} ({1})", e.User.Username, e.User.Stats.Product.Name)
    End Sub

    Sub client_UserLeft(ByVal sender As Object, _
                        ByVal e As UserEventArgs) _
                        Handles client.UserLeft

        Console.WriteLine("User left: {0}", e.User.Username)
    End Sub

    Sub client_UserShown(ByVal sender As Object, _
                         ByVal e As UserEventArgs) _
                         Handles client.UserShown

        Console.WriteLine("User Joined: {0} ({1})", e.User.Username, e.User.Stats.Product.Name)
    End Sub

    Sub client_UserSpoke(ByVal sender As Object, _
                         ByVal e As ChatMessageEventArgs) _
                         Handles client.UserSpoke

        Console.WriteLine("<{0}>: {1}", e.Username, e.Text)
    End Sub

    Sub client_UserEmoted(ByVal sender As Object, _
                          ByVal e As ChatMessageEventArgs) _
                          Handles client.UserEmoted

        Console.WriteLine("<{0} {1}>", e.Username, e.Text)
    End Sub

    Sub client_WhisperSent(ByVal sender As Object, _
                           ByVal e As ChatMessageEventArgs) _
                           Handles client.WhisperSent

        Console.WriteLine("You whisper to {0}: {1}", e.Username, e.Text)
    End Sub

    Sub client_WhisperReceived(ByVal sender As Object, _
                               ByVal e As ChatMessageEventArgs) _
                               Handles client.WhisperReceived

        Console.WriteLine("{0} whispers: {1}", e.Username, e.Text)
    End Sub

    Sub client_LoginFailed(ByVal sender As Object, _
                           ByVal e As LoginFailedEventArgs) _
                           Handles client.LoginFailed

        Console.WriteLine("Login failed: {0}", e.Reason)
    End Sub
            ]]>
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>Create the chat loop.  This loop will keep the program running, waiting for
            user input, until the user types <literal>/quit</literal> and presses enter.
            It also will handle delaying connection until the user is ready, and will wait until
            the user presses enter before quitting entirely:</para>
            <code lang="csharp">
            <![CDATA[
            Console.WriteLine("Press <enter> to connect or Ctrl+C to quit.");
            Console.ReadLine();

            client.Connect();

            string input = null;
            do
            {
                input = Console.ReadLine();
                if (input != "/quit")
                    client.SendMessage(input);

            } while (input != "/quit");

            client.Close();
            Console.WriteLine("Disconnected.  Press <enter> to quit.");
            Console.ReadLine();            
			]]>
            </code>
            <code lang="vb">
            <![CDATA[
        Console.WriteLine("Press <enter> to connect or Ctrl+C to quit.")
        Console.ReadLine()

        client.Connect()

        Dim input As String = Nothing
        Do
            input = Console.ReadLine
            If Not input.Equals("/quit") Then
                client.SendMessage(input)
            End If
        Loop While Not input.Equals("/quit")

        client.Close()
        Console.WriteLine("Disconnected.  Press <enter> to quit.")
        Console.ReadLine()
            ]]>
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>The final complete program listing looks like this:</para>
            <code lang="csharp">
            <![CDATA[
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using BNSharp.BattleNet;
using BNSharp;

namespace BnsDemoClient
{
    class Program
    {
        static void Main(string[] args)
        {
            string userName, password, key;
            Console.WriteLine("Specify username: ");
            userName = Console.ReadLine();
            Console.WriteLine("Specify password: ");
            password = Console.ReadLine();
            Console.WriteLine("Specify CD key for Starcraft:");
            key = Console.ReadLine();

            ClientSettings settings = new ClientSettings
            {
                CdKey1 = key,
                Username = userName,
                Password = password
            };

            BattleNetClient client = new BattleNetClient(settings);
            client.Connected += delegate
            {
                Console.WriteLine("Connected.");
            };
            client.EnteredChat += delegate(object sender, EnteredChatEventArgs e)
            {
                Console.WriteLine("Entered chat as {0}", e.UniqueUsername);
            };
            client.JoinedChannel += delegate(object sender, ServerChatEventArgs e)
            {
                Console.WriteLine("Joined Channel: {0}", e.Text);
            };
            client.UserJoined += delegate(object sender, UserEventArgs e)
            {
                Console.WriteLine("User Joined: {0} ({1})", e.User.Username, e.User.Stats.Product.Name);
            };
            client.UserLeft += delegate(object sender, UserEventArgs e)
            {
                Console.WriteLine("User left: {0}", e.User.Username);
            };
            client.UserShown += delegate(object sender, UserEventArgs e)
            {
                Console.WriteLine("User Joined: {0} ({1})", e.User.Username, e.User.Stats.Product.Name);
            };
            client.UserSpoke += delegate(object sender, ChatMessageEventArgs e)
            {
                Console.WriteLine("<{0}>: {1}", e.Username, e.Text);
            };
            client.UserEmoted += delegate(object sender, ChatMessageEventArgs e)
            {
                Console.WriteLine("<{0} {1}>", e.Username, e.Text);
            };
            client.WhisperSent += delegate(object sender, ChatMessageEventArgs e)
            {
                Console.WriteLine("You whisper to {0}: {1}", e.Username, e.Text);
            };
            client.WhisperReceived += delegate(object sender, ChatMessageEventArgs e)
            {
                Console.WriteLine("{0} whispers: {1}", e.Username, e.Text);
            };
            client.LoginFailed += delegate(object sender, LoginFailedEventArgs e)
            {
                Console.WriteLine("Login failed: {0}", e.Reason);
            };

            Console.WriteLine("Press <enter> to connect or Ctrl+C to quit.");
            Console.ReadLine();

            client.Connect();

            string input = null;
            do
            {
                input = Console.ReadLine();
                if (input != "/quit")
                    client.SendMessage(input);

            } while (input != "/quit");

            client.Close();
            Console.WriteLine("Disconnected.  Press <enter> to quit.");
            Console.ReadLine();
        }
    }
}
            ]]>
            </code>
            <code lang="vb">
            <![CDATA[
Imports BNSharp.BattleNet
Imports BNSharp

Module Module1
    ' This filed must be declared as WithEvents
    Private WithEvents client As BattleNetClient

    Sub Main()
        Dim userName, password, key As String
        Console.WriteLine("Specify username:")
        userName = Console.ReadLine()
        Console.WriteLine("Specify password:")
        password = Console.ReadLine()
        Console.WriteLine("Specify CD key for Starcraft:")
        key = Console.ReadLine

        Dim settings As New ClientSettings With { _
            .CdKey1 = key, _
            .Username = userName, _
            .Password = password, _
            .CdKeyOwner = "BNSharp" _
        }

        client = New BattleNetClient(settings)

        Console.WriteLine("Press <enter> to connect or Ctrl+C to quit.")
        Console.ReadLine()

        Dim test As Boolean = client.Connect()

        Dim input As String = Nothing
        Do
            input = Console.ReadLine
            If Not input.Equals("/quit") Then
                client.SendMessage(input)
            End If
        Loop While Not input.Equals("/quit")

        client.Close()
        Console.WriteLine("Disconnected.  Press <enter> to quit.")
        Console.ReadLine()
    End Sub

    Sub client_Connected(ByVal sender As Object, ByVal e As EventArgs) _
                         Handles client.Connected

        Console.WriteLine("Connected.")
    End Sub

    Sub client_EnteredChat(ByVal sender As Object, _
                           ByVal e As EnteredChatEventArgs) _
                           Handles client.EnteredChat

        Console.WriteLine("Entered chat as {0}", e.UniqueUsername)
    End Sub

    Sub client_JoinedChannel(ByVal sender As Object, _
                             ByVal e As ServerChatEventArgs) _
                             Handles client.JoinedChannel

        Console.WriteLine("Joined Channel: {0}", e.Text)
    End Sub

    Sub client_UserJoined(ByVal sender As Object, _
                          ByVal e As UserEventArgs) _
                          Handles client.UserJoined

        Console.WriteLine("User Joined: {0} ({1})", e.User.Username, e.User.Stats.Product.Name)
    End Sub

    Sub client_UserLeft(ByVal sender As Object, _
                        ByVal e As UserEventArgs) _
                        Handles client.UserLeft

        Console.WriteLine("User left: {0}", e.User.Username)
    End Sub

    Sub client_UserShown(ByVal sender As Object, _
                         ByVal e As UserEventArgs) _
                         Handles client.UserShown

        Console.WriteLine("User Joined: {0} ({1})", e.User.Username, e.User.Stats.Product.Name)
    End Sub

    Sub client_UserSpoke(ByVal sender As Object, _
                         ByVal e As ChatMessageEventArgs) _
                         Handles client.UserSpoke

        Console.WriteLine("<{0}>: {1}", e.Username, e.Text)
    End Sub

    Sub client_UserEmoted(ByVal sender As Object, _
                          ByVal e As ChatMessageEventArgs) _
                          Handles client.UserEmoted

        Console.WriteLine("<{0} {1}>", e.Username, e.Text)
    End Sub

    Sub client_WhisperSent(ByVal sender As Object, _
                           ByVal e As ChatMessageEventArgs) _
                           Handles client.WhisperSent

        Console.WriteLine("You whisper to {0}: {1}", e.Username, e.Text)
    End Sub

    Sub client_WhisperReceived(ByVal sender As Object, _
                               ByVal e As ChatMessageEventArgs) _
                               Handles client.WhisperReceived

        Console.WriteLine("{0} whispers: {1}", e.Username, e.Text)
    End Sub

    Sub client_LoginFailed(ByVal sender As Object, _
                           ByVal e As LoginFailedEventArgs) _
                           Handles client.LoginFailed

        Console.WriteLine("Login failed: {0}", e.Reason)
    End Sub
End Module
            ]]>
            </code>
          </content>
        </step>
        <step>
          <content>
            <para>You're finished!  Press F5 to build and run; assuming you don't have any typing
            errors, you should be able to run immediately.</para>
            <code>
			<![CDATA[
Entered chat as DarkTemplar~AoA
Joined Channel: StarCraft USA-1
User Joined: mclarenf1 (Starcraft (Retail))
User Joined: JESUS_is_LORD (Starcraft (Retail))
User Joined: destroyer-x1 (Starcraft (Retail))
User Joined: pnut (Starcraft (Retail))
User Joined: dravenxx (Starcraft (Retail))
User Joined: Suspect45 (Starcraft (Retail))
User Joined: IAMAHAZARD (Starcraft (Retail))
User Joined: bh12345 (Starcraft (Retail))
User Joined: Olgarn (Starcraft (Retail))
User Joined: T.J.T.E.R.R.A.N (Starcraft (Retail))
User Joined: chaneyy (Starcraft (Retail))
User Joined: lukeduke152 (Starcraft (Retail))
User Joined: 843ilikeeggs (Starcraft (Retail))
User Joined: MagicMurder (Starcraft (Retail))
User Joined: DDKush (Starcraft (Retail))
User Joined: CLAW(GG) (Starcraft (Retail))
User Joined: soccerballa77 (Starcraft (Retail))
User Joined: HRZ1 (Starcraft (Retail))
User Joined: sbatten2 (Starcraft (Retail))
User Joined: HandofArtanis (Starcraft (Retail))
User Joined: ulostme[fun] (Starcraft (Retail))
User Joined: ModdedLawnMower (Starcraft (Retail))
User Joined: tyler_howe (Starcraft (Retail))
User Joined: RODIMUS (Starcraft (Retail))
User Joined: sidler (Starcraft (Retail))
User Joined: staal18 (Starcraft (Retail))
User Joined: m3driven (Starcraft (Retail))
User Joined: devinlacross (Starcraft (Retail))
User Joined: hbsblows (Starcraft (Retail))
User Joined: Dazzler007 (Starcraft (Retail))
User Joined: nano0 (Starcraft (Retail))
User Joined: Robomarine (Starcraft (Retail))
Hi everyone
User Joined: fkuc (Starcraft (Retail))
User Joined: E3S (Starcraft (Retail))
User Joined: ShRoOmS_NukkA (Starcraft (Retail))
User Joined: rushrushrush2 (Starcraft (Retail))
User Joined: ChaosDivElite (Starcraft (Retail))
User Joined: DarkTemplar~AoA (Starcraft (Retail))
User Joined: dirkacat (Starcraft (Retail))
User left: E3S
<ulostme[fun]>: go to clan op xfun-
User Joined: dimwitt (Starcraft (Retail))
User left: m3driven
User left: fkuc
<ulostme[fun]>: on west
User Joined: ogima (Starcraft (Retail))
User left: tyler_howe
User Joined: E3S (Starcraft (Retail))
User Joined: m3driven (Starcraft (Retail))
<ulostme[fun]>: hi
User left: Robomarine
User Joined: fkuc (Starcraft (Retail))
User left: hbsblows
/quit
Disconnected.  Press <enter> to quit.
			]]>
            </code>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>
    <!-- <codeExample>Optional code example</codeExample> -->
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>