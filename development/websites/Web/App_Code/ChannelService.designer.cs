#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="ClientSessions")]
public partial class ChannelServiceDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertChannel(Channel instance);
  partial void UpdateChannel(Channel instance);
  partial void DeleteChannel(Channel instance);
  partial void InsertChatEvent(ChatEvent instance);
  partial void UpdateChatEvent(ChatEvent instance);
  partial void DeleteChatEvent(ChatEvent instance);
  #endregion
	
	public ChannelServiceDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ClientSessionsConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public ChannelServiceDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ChannelServiceDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ChannelServiceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ChannelServiceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Channel> Channels
	{
		get
		{
			return this.GetTable<Channel>();
		}
	}
	
	public System.Data.Linq.Table<ChatEvent> ChatEvents
	{
		get
		{
			return this.GetTable<ChatEvent>();
		}
	}
}

[Table(Name="dbo.Channels")]
public partial class Channel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ChannelID;
	
	private string _ClientName;
	
	private System.Data.Linq.Binary _MainPasswordHash;
	
	private string _StylesheetUri;
	
	private bool _AllowPasswordedChatAccess;
	
	private System.Data.Linq.Binary _ChatAccessPasswordHash;
	
	private string _Gateway;
	
	private string _CurrentChannel;
	
	private EntitySet<ChatEvent> _ChatEvents;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelIDChanging(System.Guid value);
    partial void OnChannelIDChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnMainPasswordHashChanging(System.Data.Linq.Binary value);
    partial void OnMainPasswordHashChanged();
    partial void OnStylesheetUriChanging(string value);
    partial void OnStylesheetUriChanged();
    partial void OnAllowPasswordedChatAccessChanging(bool value);
    partial void OnAllowPasswordedChatAccessChanged();
    partial void OnChatAccessPasswordHashChanging(System.Data.Linq.Binary value);
    partial void OnChatAccessPasswordHashChanged();
    partial void OnGatewayChanging(string value);
    partial void OnGatewayChanged();
    partial void OnCurrentChannelChanging(string value);
    partial void OnCurrentChannelChanged();
    #endregion
	
	public Channel()
	{
		this._ChatEvents = new EntitySet<ChatEvent>(new Action<ChatEvent>(this.attach_ChatEvents), new Action<ChatEvent>(this.detach_ChatEvents));
		OnCreated();
	}
	
	[Column(Storage="_ChannelID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
	public System.Guid ChannelID
	{
		get
		{
			return this._ChannelID;
		}
		set
		{
			if ((this._ChannelID != value))
			{
				this.OnChannelIDChanging(value);
				this.SendPropertyChanging();
				this._ChannelID = value;
				this.SendPropertyChanged("ChannelID");
				this.OnChannelIDChanged();
			}
		}
	}
	
	[Column(Storage="_ClientName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string ClientName
	{
		get
		{
			return this._ClientName;
		}
		set
		{
			if ((this._ClientName != value))
			{
				this.OnClientNameChanging(value);
				this.SendPropertyChanging();
				this._ClientName = value;
				this.SendPropertyChanged("ClientName");
				this.OnClientNameChanged();
			}
		}
	}
	
	[Column(Storage="_MainPasswordHash", DbType="Binary(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary MainPasswordHash
	{
		get
		{
			return this._MainPasswordHash;
		}
		set
		{
			if ((this._MainPasswordHash != value))
			{
				this.OnMainPasswordHashChanging(value);
				this.SendPropertyChanging();
				this._MainPasswordHash = value;
				this.SendPropertyChanged("MainPasswordHash");
				this.OnMainPasswordHashChanged();
			}
		}
	}
	
	[Column(Storage="_StylesheetUri", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
	public string StylesheetUri
	{
		get
		{
			return this._StylesheetUri;
		}
		set
		{
			if ((this._StylesheetUri != value))
			{
				this.OnStylesheetUriChanging(value);
				this.SendPropertyChanging();
				this._StylesheetUri = value;
				this.SendPropertyChanged("StylesheetUri");
				this.OnStylesheetUriChanged();
			}
		}
	}
	
	[Column(Storage="_AllowPasswordedChatAccess", DbType="Bit NOT NULL")]
	public bool AllowPasswordedChatAccess
	{
		get
		{
			return this._AllowPasswordedChatAccess;
		}
		set
		{
			if ((this._AllowPasswordedChatAccess != value))
			{
				this.OnAllowPasswordedChatAccessChanging(value);
				this.SendPropertyChanging();
				this._AllowPasswordedChatAccess = value;
				this.SendPropertyChanged("AllowPasswordedChatAccess");
				this.OnAllowPasswordedChatAccessChanged();
			}
		}
	}
	
	[Column(Storage="_ChatAccessPasswordHash", DbType="Binary(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary ChatAccessPasswordHash
	{
		get
		{
			return this._ChatAccessPasswordHash;
		}
		set
		{
			if ((this._ChatAccessPasswordHash != value))
			{
				this.OnChatAccessPasswordHashChanging(value);
				this.SendPropertyChanging();
				this._ChatAccessPasswordHash = value;
				this.SendPropertyChanged("ChatAccessPasswordHash");
				this.OnChatAccessPasswordHashChanged();
			}
		}
	}
	
	[Column(Storage="_Gateway", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Gateway
	{
		get
		{
			return this._Gateway;
		}
		set
		{
			if ((this._Gateway != value))
			{
				this.OnGatewayChanging(value);
				this.SendPropertyChanging();
				this._Gateway = value;
				this.SendPropertyChanged("Gateway");
				this.OnGatewayChanged();
			}
		}
	}
	
	[Column(Storage="_CurrentChannel", DbType="VarChar(75) NOT NULL", CanBeNull=false)]
	public string CurrentChannel
	{
		get
		{
			return this._CurrentChannel;
		}
		set
		{
			if ((this._CurrentChannel != value))
			{
				this.OnCurrentChannelChanging(value);
				this.SendPropertyChanging();
				this._CurrentChannel = value;
				this.SendPropertyChanged("CurrentChannel");
				this.OnCurrentChannelChanged();
			}
		}
	}
	
	[Association(Name="Channel_ChatEvent", Storage="_ChatEvents", OtherKey="ChannelID")]
	public EntitySet<ChatEvent> ChatEvents
	{
		get
		{
			return this._ChatEvents;
		}
		set
		{
			this._ChatEvents.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ChatEvents(ChatEvent entity)
	{
		this.SendPropertyChanging();
		entity.Channel = this;
	}
	
	private void detach_ChatEvents(ChatEvent entity)
	{
		this.SendPropertyChanging();
		entity.Channel = null;
	}
}

[Table(Name="dbo.ChatEvents")]
public partial class ChatEvent : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Guid _ChannelID;
	
	private long _EventID;
	
	private System.DateTime _Time;
	
	private string _EventData;
	
	private int _Type;
	
	private EntityRef<Channel> _Channel;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChannelIDChanging(System.Guid value);
    partial void OnChannelIDChanged();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnEventDataChanging(string value);
    partial void OnEventDataChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
	
	public ChatEvent()
	{
		this._Channel = default(EntityRef<Channel>);
		OnCreated();
	}
	
	[Column(Storage="_ChannelID", DbType="UniqueIdentifier NOT NULL")]
	public System.Guid ChannelID
	{
		get
		{
			return this._ChannelID;
		}
		set
		{
			if ((this._ChannelID != value))
			{
				if (this._Channel.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnChannelIDChanging(value);
				this.SendPropertyChanging();
				this._ChannelID = value;
				this.SendPropertyChanged("ChannelID");
				this.OnChannelIDChanged();
			}
		}
	}
	
	[Column(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long EventID
	{
		get
		{
			return this._EventID;
		}
		set
		{
			if ((this._EventID != value))
			{
				this.OnEventIDChanging(value);
				this.SendPropertyChanging();
				this._EventID = value;
				this.SendPropertyChanged("EventID");
				this.OnEventIDChanged();
			}
		}
	}
	
	[Column(Storage="_Time", DbType="DateTime NOT NULL", IsDbGenerated=true)]
	public System.DateTime Time
	{
		get
		{
			return this._Time;
		}
		set
		{
			if ((this._Time != value))
			{
				this.OnTimeChanging(value);
				this.SendPropertyChanging();
				this._Time = value;
				this.SendPropertyChanged("Time");
				this.OnTimeChanged();
			}
		}
	}
	
	[Column(Storage="_EventData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string EventData
	{
		get
		{
			return this._EventData;
		}
		set
		{
			if ((this._EventData != value))
			{
				this.OnEventDataChanging(value);
				this.SendPropertyChanging();
				this._EventData = value;
				this.SendPropertyChanged("EventData");
				this.OnEventDataChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="Channel_ChatEvent", Storage="_Channel", ThisKey="ChannelID", IsForeignKey=true)]
	public Channel Channel
	{
		get
		{
			return this._Channel.Entity;
		}
		set
		{
			Channel previousValue = this._Channel.Entity;
			if (((previousValue != value) 
						|| (this._Channel.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Channel.Entity = null;
					previousValue.ChatEvents.Remove(this);
				}
				this._Channel.Entity = value;
				if ((value != null))
				{
					value.ChatEvents.Add(this);
					this._ChannelID = value.ChannelID;
				}
				else
				{
					this._ChannelID = default(System.Guid);
				}
				this.SendPropertyChanged("Channel");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
