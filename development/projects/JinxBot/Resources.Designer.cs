//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JinxBot {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("JinxBot.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The game&apos;s executable file (for versioning) was not found.  This file is generally called something like &quot;Starcraft.exe&quot;, &quot;Warcraft II BNE.exe&quot;, &quot;Game.exe&quot;, or &quot;War3.exe&quot;.  This setting is specified in the &lt;GameExePath&gt; node in the &lt;ClientProfile&gt; of your configuration file..
        /// </summary>
        internal static string BattleNetSettingsErrors_GameExeMissingOrNotFound {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_GameExeMissingOrNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second game file (for versioning) was not found or wasn&apos;t specified.  This file is usually called &quot;storm.dll&quot; or &quot;bnclient.dll&quot;.  This setting is specified in the &lt;StormDllPath&gt; node in the &lt;ClientProfile&gt; of your configuration file..
        /// </summary>
        internal static string BattleNetSettingsErrors_GameFile2MissingOrNotFound {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_GameFile2MissingOrNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The third game file (for versioning) was not found or wasn&apos;t specified.  This file is usually called &quot;battle.snp&quot;, &quot;game.dll&quot;, or &quot;d2client.snp&quot;.  This setting is specified in the &lt;BattleSnpPath&gt; node in the &lt;ClientProfile&gt; of your configuration file..
        /// </summary>
        internal static string BattleNetSettingsErrors_GameFile3MissingOrNotFound {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_GameFile3MissingOrNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The client chosen for emulation was invalid.  The only valid values are: STAR (for Starcraft), SEXP (for Starcraft: Brood War), W2BN (for Warcraft II: Battle.net Edition), D2DV (for Diablo II), D2XP (for Diablo II: Lord of Destruction), WAR3 (for Warcraft III: the Reign of Chaos), and W3XP (for Warcraft III: the Frozen Throne).  This setting is specified in the &lt;Client&gt; node in the &lt;ClientProfile&gt; of your configuration file..
        /// </summary>
        internal static string BattleNetSettingsErrors_InvalidEmulationClient {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_InvalidEmulationClient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected server gateway was invalid.  The server gateway must include a hostname or IP address and a valid port.  This setting is specified in the &lt;Gateway&gt; node in the &lt;ClientProfile&gt; of your configuration file..
        /// </summary>
        internal static string BattleNetSettingsErrors_InvalidGatewayServer {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_InvalidGatewayServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ping type specified was not valid.  This setting is specified in the &lt;Ping&gt; node in the &lt;ClientProfile&gt; of your configuration file..
        /// </summary>
        internal static string BattleNetSettingsErrors_InvalidPingType {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_InvalidPingType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The lockdown image file (used for versioning) was not found or wasn&apos;t specified, but was required for the selected emulation client.  This file is usually called &quot;star.bin&quot; or &quot;w2bn.bin&quot;.  This setting is specified in the &lt;LockdownImagePath&gt; node in the &lt;ClientProfile&gt; of your configuration file..
        /// </summary>
        internal static string BattleNetSettingsErrors_LockdownFileMissingOrNotFound {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_LockdownFileMissingOrNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No errors were detected..
        /// </summary>
        internal static string BattleNetSettingsErrors_None {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_None", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The main CD key was not specified or was invalid.  JinxBot can only process valid 13-, 16-, or 26-character CD keys.  This setting is specified in the &lt;PrimaryCdKey&gt; node in the &lt;ClientProfile&gt; of your configuration file..
        /// </summary>
        internal static string BattleNetSettingsErrors_PrimaryCdKeyMissingOrInvalid {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_PrimaryCdKeyMissingOrInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The secondary CD key was not specified or was invalid, but was required for the selected emulation client.  JinxBot can only process valid 13-, 16-, or 26-character CD keys.  This setting is specified in the &lt;SecondaryCdKey&gt; node in the &lt;ClientProfile&gt; of your configuration file..
        /// </summary>
        internal static string BattleNetSettingsErrors_SecondaryCdKeyMissingOrInvalid {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_SecondaryCdKeyMissingOrInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You didn&apos;t specify a username.  This setting is specified in the &lt;Username&gt; node in the &lt;ClientProfile&gt; of your configuration file..
        /// </summary>
        internal static string BattleNetSettingsErrors_UserNameNull {
            get {
                return ResourceManager.GetString("BattleNetSettingsErrors_UserNameNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
        ///&lt;WebIcons&gt;
        ///    &lt;IconList&gt;
        ///        &lt;Icon Client=&quot;WAR3&quot; Tier=&quot;1&quot; AnimationUrl=&quot;http://classic.battle.net/war3/ladder/portraits/animated/war3/W3h1.gif&quot; AnimationLocal=&quot;w3h1anim.gif&quot; Url=&quot;http://classic.battle.net/war3/images/battle.net/icons/tier1-orc.gif&quot; Local=&quot;tier1-orc.png&quot; Crop=&quot;false&quot; /&gt;
        ///        &lt;Icon Client=&quot;WAR3&quot; Tier=&quot;2&quot; Race=&quot;H&quot; AnimationUrl=&quot;http://classic.battle.net/war3/ladder/portraits/animated/war3/W3h2.gif&quot; AnimationLocal=&quot;w3h2anim.gif&quot; Url=&quot;http://cl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WebIconsList {
            get {
                return ResourceManager.GetString("WebIconsList", resourceCulture);
            }
        }
    }
}
