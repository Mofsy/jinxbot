<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BNSharp</name>
    </assembly>
    <members>
        <member name="T:BNSharp.ServerChatEventHandler">
            <summary>
            Specifies the contract for chat events that do not involve another user.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.ServerChatEventArgs">
            <summary>
            Specifies event information for chat events that do not involve another user.
            </summary>
            <para>An example of when this class would be used is for a server broadcast, server information, or an error.</para>
        </member>
        <member name="T:BNSharp.ChatEventArgs">
            <summary>
            Provides the base information about a chat event.
            </summary>
        </member>
        <member name="T:BNSharp.BaseEventArgs">
            <summary>
            Provides the base class from which all BN# event argument class should derive.
            </summary>
        </member>
        <member name="M:BNSharp.BaseEventArgs.#ctor">
            <summary>
            Creates a new instance of <see>BaseEventArgs</see>.
            </summary>
        </member>
        <member name="M:BNSharp.BaseEventArgs.GetEmpty(BNSharp.BattleNet.BattleNetClient.ParseData)">
            <summary>
            Gets a new empty BaseEventArgs object for a specified event data object.  This method is not CLS-compliant.
            </summary>
            <param name="eventData">The client parsing data.</param>
            <returns>An empty instance with the specified client parsing data.</returns>
        </member>
        <member name="M:BNSharp.BaseEventArgs.GetKnownTypes">
            <summary>
            This method is provided as infrastructure code for WCF services.  This allows inheritence
            to function correctly on all types derived from BaseEventArgs that are known to the server.
            For more information, see the MSDN Library article "Data Contract Known Types" at 
            http://msdn.microsoft.com/en-us/library/ms730167.aspx
            </summary>
        </member>
        <member name="P:BNSharp.BaseEventArgs.EventData">
            <summary>
            Gets or sets the underlying connection data that was used to drive this event.  This property is not CLS-compliant.
            </summary>
        </member>
        <member name="M:BNSharp.ChatEventArgs.#ctor(BNSharp.ChatEventType)">
            <summary>
            Initializes a new <see>ChatEventArgs</see>.
            </summary>
            <param name="eventType">The event type.</param>
        </member>
        <member name="P:BNSharp.ChatEventArgs.EventType">
            <summary>
            Gets the type of chat event that took place.
            </summary>
        </member>
        <member name="M:BNSharp.ServerChatEventArgs.#ctor(BNSharp.ChatEventType,System.Int32,System.String)">
            <summary>
            Creates a new <see>ServerChatEventArgs</see> with the specified information.
            </summary>
            <param name="eventType">The type of event.</param>
            <param name="flags">Event-specific flags that must be interpreted based on the event type.</param>
            <param name="text">Informational message from the server.</param>
        </member>
        <member name="P:BNSharp.ServerChatEventArgs.Text">
            <summary>
            Gets the message from the server.
            </summary>
        </member>
        <member name="P:BNSharp.ServerChatEventArgs.Flags">
            <summary>
            Gets the event-specific flags.
            </summary>
            <remarks>
            <para>These must be interpreted based on the event type.</para>
            </remarks>
            <seealso cref="T:BNSharp.UserFlags"/>
            <seealso cref="T:BNSharp.ChannelFlags"/>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Net.BnFtpRequestBase">
            <summary>
            Represents a generic Battle.net FTP (BnFTP) request.
            </summary>
            <remarks>
            <para>The specific Battle.net FTP protocol is implemented by the 
            <see cref="T:BNSharp.MBNCSUtil.Net.BnFtpVersion1Request">BnFtpVersion1Request</see> and 
            <see cref="T:BNSharp.MBNCSUtil.Net.BnFtpVersion2Request">BnFtpVersion2Request</see> classes, which 
            have their uses based on which client is being emulated.  For Warcraft 3 and
            The Frozen Throne, <b>BnFtpVersion2Request</b> should be used; otherwise, 
            <b>BnFtpVersion1Request</b> should be used.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.#ctor(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates a new generic Battle.net FTP request.
            </summary>
            <param name="fileName">The name of the file to be downloaded.</param>
            <param name="product">The four-character product string specifying the
            client being emulated.</param>
            <param name="fileTime">The timestamp of the file's last write in UTC.
            You may specify <b>null</b> (<b>Nothing</b> in Visual Basic) if the 
            time is unavailable.</param>
            <remarks>
            <para>Valid emulation clients include:
            <list type="bullet">
                <item>STAR for Starcraft Retail</item>
                <item>SEXP for Starcraft: Brood War</item>
                <item>W2BN for Warcraft II: Battle.net Edition</item>
                <item>D2DV for Diablo II Retail</item>
                <item>D2XP for Diablo II: Lord of Destruction</item>
                <item>WAR3 for Warcraft III: The Reign of Chaos</item>
                <item>W3XP for Warcraft III: The Frozen Throne</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.OnFilePartDownloaded(BNSharp.MBNCSUtil.Net.DownloadStatusEventArgs)">
            <summary>
            Invokes the <see cref="E:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.FilePartDownloaded">FilePartDownloaded</see> event.
            </summary>
            <remarks>
            <para><b>Note to Inheritors:</b> The suggested way to hook the <b>FilePartDownloaded</b> event is to override this method.  However, to 
            ensure that the event is called and all listeners receive it, be certain to call the base implementation as well.</para>
            </remarks>
            <param name="e">The download status for this file.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.ExecuteRequest">
            <summary>
            Executes the BnFTP request, downloading the file to where <see cref="P:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.LocalFileName">LocalFileName</see>
            specifies, and closes the connection.
            </summary>
            <remarks>
            <para>By default, <c>LocalFileName</c> is the same name as the remote file, which will cause the file
            to be saved in the local application path.  The desired location of the file must be set before 
            <b>ExecuteRequest</b> is called.</para>
            </remarks>
            <exception cref="T:System.IO.IOException">Thrown if the local file cannot be written.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown if the remote host closes the connection prematurely.</exception>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.Product">
            <summary>
            Gets the Product string utilized by this request.
            </summary>
        </member>
        <member name="E:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.FilePartDownloaded">
            <summary>
            Indicates that part of a file has been downloaded during this request.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.LocalFileName">
            <summary>
            Gets or sets the local path of the file.
            </summary>
            <remarks>
            <para>This property must be set before the <see cref="M:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.ExecuteRequest">ExecuteRequest</see> method is 
            called.  It can be changed in subsequent calls to download the same file to multiple locations; however,
            changing this property will not affect files that have already been downloaded.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.FileName">
            <summary>
            Gets the name of the filed being requested.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.FileSize">
            <summary>
            Gets (and in derived classes, sets) the size of the file.
            </summary>
            <remarks>
            <para>This property is only valid after 
            <see cref="M:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.ExecuteRequest">ExecuteRequest</see> has been called.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.FileTime">
            <summary>
            Gets the local file's last-write time, if it was specified.  If it was not specified, this property
            returns <b>null</b> (<b>Nothing</b> in Visual Basic).
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.Server">
            <summary>
            Gets or sets the server from which this request should download.
            </summary>
            <remarks>
            <para>The default server is <c>useast.battle.net</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.LoginFailureReason">
            <summary>
            Specifies the known reasons for a login failure to have occurred.
            </summary>
        </member>
        <member name="F:BNSharp.LoginFailureReason.Unknown">
            <summary>
            Specifies that an unknown reason caused the login failure.
            </summary>
        </member>
        <member name="F:BNSharp.LoginFailureReason.AccountDoesNotExist">
            <summary>
            Specifies that the selected account does not exist.  This status is only available when the 
            <see cref="P:BNSharp.LoginFailedEventArgs.ProvidesExtendedInformation">ProvidesExtendedInformation</see> property of the login 
            failure arguments is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:BNSharp.LoginFailureReason.InvalidAccountOrPassword">
            <summary>
            Specifies that either the account was not found, or that the password was invalid.  For extended information check the 
            <see cref="P:BNSharp.LoginFailedEventArgs.ProvidesExtendedInformation">ProvidesExtendedInformation</see> property of the login 
            failure arguments.
            </summary>
        </member>
        <member name="F:BNSharp.LoginFailureReason.AccountClosed">
            <summary>
            Specifies that the account has been closed.  This status is only available when the 
            <see cref="P:BNSharp.LoginFailedEventArgs.ProvidesExtendedInformation">ProvidesExtendedInformation</see> property of the login 
            failure arguments is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:BNSharp.ChannelFlags">
            <summary>
            Specifies the flags that can be applied to channel-related <see cref="P:BNSharp.ServerChatEventArgs.Flags">chat events</see>.
            </summary>
        </member>
        <member name="F:BNSharp.ChannelFlags.None">
            <summary>
            Specifies that the channel is a normal private channel.
            </summary>
        </member>
        <member name="F:BNSharp.ChannelFlags.PublicChannel">
            <summary>
            Specifies that the channel is public.
            </summary>
        </member>
        <member name="F:BNSharp.ChannelFlags.ModeratedChannel">
            <summary>
            Specifies that the channel is moderated by a Blizzard representative.
            </summary>
        </member>
        <member name="F:BNSharp.ChannelFlags.RestrictedChannel">
            <summary>
            Specifies that the channel is restricted.
            </summary>
        </member>
        <member name="F:BNSharp.ChannelFlags.SilentChannel">
            <summary>
            Specifies that the channel is silent.
            </summary>
        </member>
        <member name="F:BNSharp.ChannelFlags.SystemChannel">
            <summary>
            Specifies that the channel is provided by the system.
            </summary>
        </member>
        <member name="F:BNSharp.ChannelFlags.ProductSpecificChannel">
            <summary>
            Specifies that the channel is specific to a product.
            </summary>
        </member>
        <member name="F:BNSharp.ChannelFlags.GloballyAccessibleChannel">
            <summary>
            Specifies that the channel is globally-accessible.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.StarcraftStats">
            <summary>
            Represents statistics logged onto Battle.net with Starcraft, Japan Starcraft, Warcraft II: Battle.net Edition, 
            or the original Diablo.
            </summary>
            <remarks>
            <para>This class cannot be instantiated directly.  To obtain an instance of this class, use 
            <see cref="M:BNSharp.BattleNet.Stats.UserStats.Parse(System.String,System.Byte[])">UserStats.Parse</see>, and cast the result to this class.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.UserStats">
            <summary>
            When implemented in a derived class, provides statistical information about a user.
            </summary>
            <remarks>
            <para>More specific information is available from most users by casting an object of this class to one of the 
            derived classes.  Products and their relevant classes are provided in the following table:</para>
            <list type="table">
                <listheader>
                    <item>
                        <term>Product</term>
                        <description>Stats subclass type</description>
                    </item>
                </listheader>
                <item>
                    <term>Starcraft Retail, Starcraft: Brood War, Starcraft Shareware, Japan Starcraft,
                    Warcraft II: Battle.net Edition, Diablo Retail, Diablo Shareware</term>
                    <description><see>StarcraftStats</see></description>
                </item>
                <item>
                    <term>Diablo II Retail, Diablo II: Lord of Destruction</term>
                    <description><see>Diablo2Stats</see></description>
                </item>
                <item>
                    <term>Warcraft III: The Reign of Chaos, Warcraft III: The Frozen Throne</term>
                    <description><see>Warcraft3Stats</see></description>
                </item>
                <item>
                    <term>Others (unknown clients)</term>
                    <description><see>DefaultStats</see></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.UserStats.Parse(System.String,System.Byte[])">
            <summary>
            Parses a user statstring and returns an object representing the stats in a meaningful way.
            </summary>
            <param name="userName">The name of the user whose stats are being examined.</param>
            <param name="statsData">The stats of the user.</param>
            <returns>An instance of a class derived from <see>UserStats</see> based on the user's 
            <see cref="T:BNSharp.BattleNet.Product">Product</see>.  To check the product, check the 
            <see cref="P:BNSharp.BattleNet.Stats.UserStats.Product">Product property</see>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="userName"/> or <paramref name="statsData"/>
            are <see langword="null"/>.</exception>
            <remarks>
            <para>More specific information is available from most users by casting an object of this class to one of the 
            derived classes.  Products and their relevant classes are provided in the following table:</para>
            <list type="table">
                <listheader>
                    <item>
                        <term>Product</term>
                        <description>Stats subclass type</description>
                    </item>
                </listheader>
                <item>
                    <term>Starcraft Retail, Starcraft: Brood War, Starcraft Shareware, Japan Starcraft,
                    Warcraft II: Battle.net Edition, Diablo Retail, Diablo Shareware</term>
                    <description><see>StarcraftStats</see></description>
                </item>
                <item>
                    <term>Diablo II Retail, Diablo II: Lord of Destruction</term>
                    <description><see>Diablo2Stats</see></description>
                </item>
                <item>
                    <term>Warcraft III: The Reign of Chaos, Warcraft III: The Frozen Throne</term>
                    <description><see>Warcraft3Stats</see></description>
                </item>
                <item>
                    <term>Others (unknown clients)</term>
                    <description><see>DefaultStats</see></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.UserStats.CreateDefault(BNSharp.BattleNet.Product)">
            <summary>
            Creates a default statistics object with information only about the product.
            </summary>
            <param name="product">The product for which to create information.</param>
            <returns>An instance of <see>UserStats</see> with only product information.</returns>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.UserStats.Product">
            <summary>
            When implemented in a derived class, gets the product with which the user is logged on.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given 
            the name <c>Product</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.UserStats.LiteralText">
            <summary>
            When implemented in a derived class, gets the literal text of the stat string.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.StarcraftStats.IsSpawn">
            <summary>
            Gets whether the user is logged on with a spawned client.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.StarcraftStats.IconCode">
            <summary>
            Gets the icon code for the user issued by Battle.net.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.StarcraftStats.HighestLadderRating">
            <summary>
            Gets the user's highest ladder rating.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.StarcraftStats.Wins">
            <summary>
            Gets the user's win count.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.StarcraftStats.LadderRank">
            <summary>
            Gets the user's current ladder rank.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.StarcraftStats.LadderRating">
            <summary>
            Gets the user's current ladder rating.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.StarcraftStats.Product">
            <summary>
            Gets the <see cref="T:BNSharp.BattleNet.Product">Product</see> with which the user is logged on.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.StarcraftStats.LiteralText">
            <summary>
            Gets the literal text of the user's statstring.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.Diablo2Stats">
            <summary>
            Represents statistics logged onto a Diablo II Realm character.
            </summary>
            <remarks>
            <para>This class cannot be instantiated directly.  To obtain an instance of this class, use 
            <see cref="M:BNSharp.BattleNet.Stats.UserStats.Parse(System.String,System.Byte[])">UserStats.Parse</see>, and cast the result to this class.</para>
            <para>This class is only meaningful if the user is logged on as a realm character.  To determine 
            whether the user is logged on with a Realm character, check the <see>IsRealmCharacter</see> property.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.UserName">
            <summary>
            Gets the name of the user's account.  On Diablo II, this will always be prefixed with the asterisk (*), as this is the account
            name to which whispering may be done.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.ActsCompleted">
            <summary>
            Gets the number of acts the character has completed on the current difficulty level.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.Level">
            <summary>
            Gets the user's level.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.CharacterClass">
            <summary>
            Gets the character class for the user's character.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.Difficulty">
            <summary>
            Gets the most recent difficulty level for the character.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.HasCompletedGame">
            <summary>
            Gets whether the character has completed the entire game.
            </summary>
            <remarks>
            <para>This property is a utility provided as a shortcut, since you can determine whether the character has 
            completed the entire game based on the number of <see>ActsCompleted</see>, <see>Difficulty</see>, and 
            whether the character <see cref="P:BNSharp.BattleNet.Stats.Diablo2Stats.IsExpansionCharacter">is a Lord of Destruction character</see>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.IsMaleCharacter">
            <summary>
            Gets whether the character is male.
            </summary>
            <remarks>
            <para>This property is a utility property provided as a shortcut, since you can determine the gender
            of the character based on the <see>CharacterClass</see> property.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.IsLadderCharacter">
            <summary>
            Gets whether the user's character is a ladder character.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.IsCharacterDead">
            <summary>
            Gets whether the user's character is currently dead.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.IsHardcoreCharacter">
            <summary>
            Gets whether the user's character is hardcore.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.IsExpansionCharacter">
            <summary>
            Gets whether the user's character was created with the Lord of Destruction expansion.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.Realm">
            <summary>
            Gets the user's Realm.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.CharacterName">
            <summary>
            Gets the user's current character name.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.IsRealmCharacter">
            <summary>
            Gets whether the user is logged on with a Realm character.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.Product">
            <summary>
            Gets the product currently in use by the user.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Diablo2Stats.LiteralText">
            <summary>
            Gets the literal text of the statstring.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.ServerNewsEventHandler">
            <summary>
            Specifies the contract for an event handler that wishes to handle the server news event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.ServerNewsEventArgs">
            <summary>
            Represents a single news entry.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.ServerNewsEventArgs.#ctor(BNSharp.BattleNet.NewsEntry)">
            <summary>
            Creates a new instance of <see>ServerNewsEventArgs</see>.
            </summary>
            <param name="entry">The entry for this news event.</param>
        </member>
        <member name="P:BNSharp.BattleNet.ServerNewsEventArgs.Entry">
            <summary>
            Gets the news entry that triggered the event..
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.NewsEntry">
            <summary>
            Represents a news entry.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.NewsEntry.#ctor(System.DateTime,System.String)">
            <summary>
            Creates a new <see>NewsEntry</see> with the specified timestamp and content.
            </summary>
            <param name="timestamp">The time at which the news was posted in UTC.</param>
            <param name="news">The content of the news.</param>
        </member>
        <member name="M:BNSharp.BattleNet.NewsEntry.ToString">
            <summary>
            Gets a string representation of this news entry.
            </summary>
            <returns>A string of the date's long date string.</returns>
        </member>
        <member name="P:BNSharp.BattleNet.NewsEntry.DatePosted">
            <summary>
            Gets the date at which this news was posted in local time.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.NewsEntry.News">
            <summary>
            Gets the text of the news entry.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Diablo2CharacterClass">
            <summary>
            Specifies the character classes supported by Diablo 2 characters.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2CharacterClass.Unknown">
            <summary>
            Specifies that the class is unknown or invalid.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2CharacterClass.Amazon">
            <summary>
            Specifies the Amazon class (female).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2CharacterClass.Sorceress">
            <summary>
            Specifies the Sorceress class (female).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2CharacterClass.Necromancer">
            <summary>
            Specifies the Necromancer class (male).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2CharacterClass.Paladin">
            <summary>
            Specifies the Paladin class (male).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2CharacterClass.Barbarian">
            <summary>
            Specifies the Barbarian class (male).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2CharacterClass.Druid">
            <summary>
            Specifies the Druid class (male).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2CharacterClass.Assassin">
            <summary>
            Specifies the Assassin class (female).
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.BattleNetClient">
            <summary>
            Implements a client connection to Battle.net.
            </summary>
            <remarks>
            <para>This is the primary class that should be used when implementing a Battle.net client.  To implement one, you only need to implement
            the <see>IBattleNetSettings</see> interface, which provides information about a connection to Battle.net.  Once this interface is implemented
            and this object is created, the client should register for events and that's it.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.Net.ThinProxiedConnectionBase">
            <summary>
            Enables proxy support to a connection by redirecting a normal <see>ConnectionBase</see> to a plugin (<see>IProxyConnector</see>), 
            which then can manipulate the underlying data connection as needed by the protocol.
            </summary>
        </member>
        <member name="T:BNSharp.Net.ConnectionBase">
            <summary>
            Represents a TCP/IP connection.
            </summary>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the <b>ConnectionBase</b> class.
            </summary>
            <param name="server">The URI of the server to connect to.</param>
            <param name="port">The port of the server to connect to.</param>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.ResolveEndpoint(System.String,System.Int32)">
            <summary>
            Resolves an IP end point for the specified server and port.
            </summary>
            <param name="server">The DNS name or IP address (as a string) of the server to look up.</param>
            <param name="port">The port number to which to connect.</param>
            <returns>An <see>IPEndPoint</see> representing the server and port; or, if resolution failed, <see langword="null" />.</returns>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.Connect(System.String,System.Int32)">
            <summary>
            Connects the connection to a remote host other than the one for which the connection was initialized.
            </summary>
            <param name="server">The URI of the server to which to connect.</param>
            <param name="port">The port of the server to which to connect.</param>
            <returns><see langword="true"/> if the connection completed successfully; otherwise <see langword="false"/>.</returns>
            <remarks>
            <para>The <see cref="M:BNSharp.Net.ConnectionBase.OnError(System.String,System.Exception)">OnError</see> method is called when an error takes place, but no
            behavior is defined by default.  Inheriting classes should provide an implementation 
            to handle errors.</para>
            <para>This method may return false if the connection is already established.  To check whether the 
            connection is established, check the <see>IsConnected</see> property.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.Connect">
            <summary>
            Connects the connection to the remote host.
            </summary>
            <returns><b>True</b> if the connection completed successfully; otherwise <b>false</b>.</returns>
            <remarks>
            <para>The <see cref="M:BNSharp.Net.ConnectionBase.OnError(System.String,System.Exception)">OnError</see> method is called when an error takes place, but no
            behavior is defined by default.  Inheriting classes should provide an implementation 
            to handle errors.</para>
            <para>This method may return false if the connection is already established.  To check whether the 
            connection is established, check the <see>IsConnected</see> property.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.ConnectAsync(System.Object,BNSharp.Net.ConnectCompletedCallback)">
            <summary>
            Begins a connection asynchronously.
            </summary>
            <param name="state">Any user object that is desired to be passed back to the connection completed callback.  This will be represented
            through the <see>ConnectCompletedResult.State</see> property.</param>
            <param name="callback">The method to call when the connection has completed.</param>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.OnError(System.String,System.Exception)">
            <summary>
            When overridden by a derived class, provides error information from the current connection.
            </summary>
            <param name="message">Human-readable information about the error.</param>
            <param name="ex">An internal exception containing the error details.</param>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.Close">
            <summary>
            Closes the connection and prepares for a new connection.
            </summary>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.Send(System.Byte[])">
            <summary>
            For derived classes, sends the specified binary data to the server.
            </summary>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            For derived classes, sends part of the specified binary data to the server.
            </summary>
            <param name="data">The data to send.</param>
            <param name="index">The start index of the data.</param>
            <param name="length">The amount of data to send.</param>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.Receive(System.Int32)">
            <summary>
            Receives the specified number of bytes.
            </summary>
            <remarks>
            <para>This method blocks in a loop until all of the data comes through.  For that reason, it 
            is recommended that this method is only used in a background thread.</para>
            </remarks>
            <param name="len">The amount of data to receive.</param>
            <returns>A byte array containing the specified data.</returns>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives the specified number of bytes into the provided buffer.
            </summary>
            <param name="buffer">The buffer to receive the data.</param>
            <param name="index">The starting index to place the data.</param>
            <param name="length">The amount of data to receive.</param>
            <returns>A reference to <paramref name="buffer"/> if the operation completed successfully, or else 
            <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the combination of <paramref name="length"/> and 
            <paramref name="index"/> point to invalid positions in the buffer.</exception>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.Receive">
            <summary>
            Retrieves an arbitrarily-sized byte array of data.
            </summary>
            <returns>An array of bytes of data that have been received from the server.</returns>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.Dispose">
            <summary>
            Disposes the specified object.
            </summary>
        </member>
        <member name="M:BNSharp.Net.ConnectionBase.Dispose(System.Boolean)">
            <summary>
            Disposes the object, freeing unmanaged and optionally managed resources.
            </summary>
            <param name="disposing">Whether to free managed resources.</param>
        </member>
        <member name="P:BNSharp.Net.ConnectionBase.IsConnected">
            <summary>
            Gets whether the connection is alive or not.
            </summary>
        </member>
        <member name="P:BNSharp.Net.ConnectionBase.LocalEP">
            <summary>
            Once the connection is established, gets the local endpoint to which the client is bound.
            </summary>
        </member>
        <member name="P:BNSharp.Net.ConnectionBase.RemoteEP">
            <summary>
            Once the connection is established, gets the remote endpoint to which the client is bound.
            </summary>
        </member>
        <member name="P:BNSharp.Net.ConnectionBase.AlwaysResolveRemoteHost">
            <summary>
            Allows derived classes to always require the connection to re-resolve the remote host during the <see cref="M:BNSharp.Net.ConnectionBase.Connect"/> method.
            </summary>
        </member>
        <member name="T:BNSharp.Plugins.IProxiedRealConnection">
            <summary>
            Provides real communication services to a proxy connector.  This interface does not need to be implemented by a user wishing to 
            add proxy support to BN#; rather, it is provided via the <see cref="M:BNSharp.Plugins.IProxyConnector.Initialize(BNSharp.Plugins.IProxiedRealConnection)">IProxyConnector.Initialize</see> method.
            </summary>
        </member>
        <member name="M:BNSharp.Plugins.IProxiedRealConnection.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives the specified number of bytes into the provided buffer from the real underlying connection.
            </summary>
            <param name="buffer">The buffer to receive the data.</param>
            <param name="index">The starting index to place the data.</param>
            <param name="length">The amount of data to receive.</param>
            <returns>A reference to <paramref name="buffer"/> if the operation completed successfully, or else 
            <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the combination of <paramref name="length"/> and 
            <paramref name="index"/> point to invalid positions in the buffer.</exception>
        </member>
        <member name="M:BNSharp.Plugins.IProxiedRealConnection.Receive">
            <summary>
            Retrieves an arbitrarily-sized byte array of data from the real underlying connection.
            </summary>
            <returns>An array of bytes of data that have been received from the server.</returns>
        </member>
        <member name="M:BNSharp.Plugins.IProxiedRealConnection.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends part of the specified binary data to the server through the real underlying connection.
            </summary>
            <param name="data">The data to send.</param>
            <param name="index">The start index of the data.</param>
            <param name="length">The amount of data to send.</param>
        </member>
        <member name="M:BNSharp.Plugins.IProxiedRealConnection.ResolveEndPoint(System.String,System.Int32)">
            <summary>
            Provides a real implementation of endpoint resolution for the specified host and port.
            </summary>
            <param name="host">The DNS name or IP address (as a string) of the server to look up.</param>
            <param name="port">The port number to which to connect.</param>
            <returns>An <see>IPEndPoint</see> representing the server and port.</returns>
        </member>
        <member name="M:BNSharp.Net.ThinProxiedConnectionBase.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the <b>ConnectionBase</b> class.
            </summary>
            <param name="server">The URI of the server to connect to.</param>
            <param name="port">The port of the server to connect to.</param>
        </member>
        <member name="M:BNSharp.Net.ThinProxiedConnectionBase.Connect">
            <inheritdoc />
        </member>
        <member name="M:BNSharp.Net.ThinProxiedConnectionBase.ResolveEndpoint(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:BNSharp.Net.ThinProxiedConnectionBase.Receive(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:BNSharp.Net.ThinProxiedConnectionBase.Send(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:BNSharp.Net.ThinProxiedConnectionBase.Receive">
            <inheritdoc />
        </member>
        <member name="P:BNSharp.Net.ThinProxiedConnectionBase.ProxyConnector">
            <summary>
            Gets or sets an <see>IProxyConnector</see> that can be used to redirect this connection through a proxy.
            </summary>
            <remarks>
            <para>For more information on proxy support in BN#, please see the wiki article
            <a href="http://www.jinxbot.net/wiki/index.php?title=Proxy_support_in_BNSharp">Proxy support in BN#</a> or the 
            <see>IProxyConnector</see> interface.</para>
            <para>When this value is set to <see langword="null" />, a default proxy connector is instantiated.  Consequently this property
            will never return <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.Net.ThinProxiedConnectionBase.AlwaysResolveRemoteHost">
            <inheritdoc />
        </member>
        <member name="T:BNSharp.Plugins.IProxyConnector">
            <summary>
            Enables a client connection to be connected through a proxy server that may decorate any part of the protocol with additional data.
            </summary>
        </member>
        <member name="M:BNSharp.Plugins.IProxyConnector.Initialize(BNSharp.Plugins.IProxiedRealConnection)">
            <summary>
            Initializes the proxy connector for the specified client.
            </summary>
            <param name="client">Provides the real connection services to the proxy connector.</param>
        </member>
        <member name="M:BNSharp.Plugins.IProxyConnector.Negotiate">
            <summary>
            Allows a presentation-level proxy protocol to negotiate immediately after connecting to the proxy host.
            </summary>
            <returns><see langword="true" /> if negotiation succeeded; otherwsie <see langword="false" />.</returns>
        </member>
        <member name="M:BNSharp.Plugins.IProxyConnector.ResolveEndPoint(System.String,System.Int32)">
            <summary>
            Resolves an IP end point for the specified server and port.
            </summary>
            <param name="host">The DNS name or IP address (as a string) of the server to look up.</param>
            <param name="port">The port number to which to connect.</param>
            <remarks>
            <para>Proxy implementations should use this method to resolve the real and proxy IP addresses for connection and return 
            the IP end point of the proxy host.  This allows the base class to transparently connect to the proxy server.</para>
            </remarks>
            <returns>An <see>IPEndPoint</see> representing the server and port.</returns>
        </member>
        <member name="M:BNSharp.Plugins.IProxyConnector.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives the specified number of bytes into the provided buffer.
            </summary>
            <param name="buffer">The buffer to receive the data.</param>
            <param name="index">The starting index to place the data.</param>
            <param name="length">The amount of data to receive.</param>
            <returns>A reference to <paramref name="buffer"/> if the operation completed successfully, or else 
            <see langword="null"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the combination of <paramref name="length"/> and 
            <paramref name="index"/> point to invalid positions in the buffer.</exception>
        </member>
        <member name="M:BNSharp.Plugins.IProxyConnector.Receive">
            <summary>
            Retrieves an arbitrarily-sized byte array of data.
            </summary>
            <returns>An array of bytes of data that have been received from the server.</returns>
        </member>
        <member name="M:BNSharp.Plugins.IProxyConnector.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends part of the specified binary data to the server.
            </summary>
            <param name="data">The data to send.</param>
            <param name="index">The start index of the data.</param>
            <param name="length">The amount of data to send.</param>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterCustomPacketHandler(BNSharp.BncsPacketId,BNSharp.Plugins.ParseCallback,BNSharp.Plugins.ParseCallback@)">
            <summary>
            Registers a custom handler for a specific packet ID.  This method is not CLS-compliant.
            </summary>
            <param name="packetID">The packet to register to handle.</param>
            <param name="parser">A callback that will handle the data.</param>
            <param name="previousParser">A previous parser, or <see langword="null"/> if no parser was set to handle such a packet.</param>
            <returns>A sink to fire off <see>BattleNetClient</see> events.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="parser"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="packetID"/> refers to the <c>Warden</c> value, or if the 
            value is greater than 255 or less than 0.</exception>
            <remarks>
            <para>This method can be used to replace the default BN# packet handlers or to augment them with new handlers.  For example, BN# does 
            not and will not likely ever support Diablo II Realms and Realm Character login.  However, third-party developers can augment BN# to 
            handle those packets and support events on their own.</para>
            <para>The <see>IBattleNetEvents</see> sink is the same for subsequent calls to this method per-instance of <see>BattleNetClient</see>,
            so you don't need to do anything special with the return value each time you call this method.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterCustomPacketHandler(BNSharp.BncsPacketId,BNSharp.Plugins.ParseCallback)">
            <summary>
            Unregisters a custom handler for a specific packet ID, restoring the previous handler.  This method is not CLS-compliant.
            </summary>
            <param name="packetID">The packet ID for which to unregister.</param>
            <param name="previousParser">The previous parser.  If none was provided during registration, this value may be <see langword="null"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="packetID"/> refers to the <c>Warden</c> value, or if the 
            value is greater than 255 or less than 0.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterCustomPacketPriorities(BNSharp.Plugins.IPacketPriorityProvider)">
            <summary>
            Registers a custom packet priority list for consideration during packet parsing.
            </summary>
            <param name="newProvider">The new priority provider to use for priority lookups.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="newProvider"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterCustomPacketPriorities(BNSharp.Plugins.IPacketPriorityProvider)">
            <summary>
            Unregisters a custom packet priority list from consideration during packet parsing.
            </summary>
            <param name="providerToRemove">The priority provider to remove from consideration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="providerToRemove"/> is 
            <see langword="null"/>.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RequestWarcraft3Profile(System.String,System.Boolean)">
            <summary>
            Requests a Warcraft 3 profile.
            </summary>
            <param name="username">The name of the user to request.</param>
            <param name="getFrozenThroneProfile"><see langword="true" /> to get the Frozen Throne profile;
            <see langword="false" /> to get the Reign of Chaos profile.</param>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RequestWarcraft3Profile(BNSharp.BattleNet.ChatUser)">
            <summary>
            Requests a Warcraft 3 profile for the specified user, requesting them for the user's 
            specific product.
            </summary>
            <param name="user">The user for whom to request a profile.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="user"/> does 
            not on Warcraft III: The Reign of Chaos or The Frozen Throne.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterWarcraftProfileReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Stats.WarcraftProfileEventHandler)">
            <summary>
            Registers for notification of the <see>WarcraftProfileReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WarcraftProfileReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterWarcraftProfileReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Stats.WarcraftProfileEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterWarcraftProfileReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Stats.WarcraftProfileEventHandler)">
            <summary>
            Unregisters for notification of the <see>WarcraftProfileReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WarcraftProfileReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterWarcraftProfileReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Stats.WarcraftProfileEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnWarcraftProfileReceived(BNSharp.BattleNet.Stats.WarcraftProfileEventArgs)">
            <summary>
            Raises the WarcraftProfileReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>WarcraftProfileReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WarcraftProfileReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterProfileLookupFailedNotification(BNSharp.Priority,BNSharp.BattleNet.Stats.ProfileLookupFailedEventHandler)">
            <summary>
            Registers for notification of the <see>ProfileLookupFailed</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ProfileLookupFailed"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterProfileLookupFailedNotification(BNSharp.Priority,BNSharp.BattleNet.Stats.ProfileLookupFailedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterProfileLookupFailedNotification(BNSharp.Priority,BNSharp.BattleNet.Stats.ProfileLookupFailedEventHandler)">
            <summary>
            Unregisters for notification of the <see>ProfileLookupFailed</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ProfileLookupFailed"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterProfileLookupFailedNotification(BNSharp.Priority,BNSharp.BattleNet.Stats.ProfileLookupFailedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnProfileLookupFailed(BNSharp.BattleNet.Stats.ProfileLookupFailedEventArgs)">
            <summary>
            Raises the ProfileLookupFailed event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ProfileLookupFailed</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ProfileLookupFailed"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.Listen">
            <summary>
            This is the listening thread.  All it does is loop on receive.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.Parse">
            <summary>
            This is the parsing thread.  
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.SetClanMessageOfTheDay(System.String)">
            <summary>
            If the client is logged on as a clan Chieftan or Shaman, sets the clan message-of-the-day.
            </summary>
            <param name="motd">The new message-of-the-day.</param>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.BeginClanCandidatesSearch(System.String)">
            <summary>
            Begins searching for clan candidates in the channel and friends list, and checks the availability of the specified clan tag.
            </summary>
            <param name="clanTag">The clan tag to check for availability.</param>
            <returns>The request ID assigned to the request.</returns>
            <remarks>
            <para>This method will return immediately, but will cause the <see>ClanCandidatesSearchCompleted</see> event to be fired.  That event does not
            specifically indicate that the proper number of candidates were found, simply that Battle.net responded.  The event arguments sent
            as part of the event indicate the success or failure of the request.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="clanTag"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.InviteUsersToNewClan(System.String,System.String,System.String[])">
            <summary>
            Invites the specified number of users to form a new clan.
            </summary>
            <param name="clanName">The name of the clan to form.</param>
            <param name="clanTag">The tag of the clan to form.</param>
            <param name="usersToInvite">The list of users to invite.  This parameter must be exactly 9 items long.</param>
            <returns>The request ID assigned to this request.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="clanName"/>, <paramref name="clanTag"/>, 
            <paramref name="usersToInvite"/>, or any of the strings in the array of <paramref name="usersToInvite"/>
            is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="usersToInvite"/> is not exactly 9 items long.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RespondToNewClanInvitation(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Responds to the invitation to form a new clan.
            </summary>
            <param name="requestID">The request ID, provided by the <see cref="P:BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs.RequestID">ClanFormationInvitationEventArgs</see>.</param>
            <param name="clanTag">The clan tag.</param>
            <param name="inviter">The user who invited the client to the clan.</param>
            <param name="accept">Whether to accept the invitation.</param>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.DisbandClan">
            <summary>
            Disbands the clan to which the client belongs.
            </summary>
            <returns>The request ID assigned to the request.</returns>
            <remarks>
            <para>The client must be the leader of the clan in order to send this command.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.DesignateClanChieftan(System.String)">
            <summary>
            Designates a user as a new clan chieftan (leader).
            </summary>
            <returns>The unique request ID assigned to the request.</returns>
            <param name="newChieftanName">The name of the new clan chieftan.</param>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.InviteUserToClan(System.String)">
            <summary>
            Begins the process of inviting a user to join a clan.
            </summary>
            <param name="userToInvite">The name of the user to invite.</param>
            <returns>A unique request identifier.</returns>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RemoveClanMember(System.String)">
            <summary>
            Begins the process for removing a member from the clan.
            </summary>
            <param name="memberToRemove">The name of the clan member to remove.</param>
            <returns>The request ID assigned to this request.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="memberToRemove"/> is <see langword="null"/> or zero-length.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RespondToClanInvitation(BNSharp.BattleNet.Clans.ClanInvitationEventArgs,System.Boolean)">
            <summary>
            Responds to a clan invitation received via the <see>ClanInvitationReceived</see> event.
            </summary>
            <param name="invitation">The arguments that accompanied the invitation.</param>
            <param name="accept"><see langword="true" /> to accept the invitation and join the clan; otherwise <see langword="false" />.</param>
            <remarks>
            <para>Following the acceptance of an invitation, the client should receive <see>ClanMembershipReceived</see> and automatically respond by requesting clan 
            membership information.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.ChangeClanMemberRank(System.String,BNSharp.BattleNet.Clans.ClanRank)">
            <summary>
            Attempts to change the specified clan member's rank.
            </summary>
            <remarks>
            <para>This method does not attempt to verify that the current user is allowed to change the specified user's rank, or even if the specified
            user exists or is in the current user's clan.  The results of this method call are returned via the 
            <see>ClanRankChangeResponseReceived</see> event.</para>
            </remarks>
            <param name="name">The name of the user to change.</param>
            <param name="newRank">The user's new rank.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="newRank"/> is not a valid value of the <see>ClanRank</see>
            enumeration</exception>.
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <see langword="null"/> or zero-length.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnEventExceptionThrown(BNSharp.EventExceptionEventArgs)">
            <summary>
            Raises the <see>EventExceptionThrown</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterUserJoinedNotification(BNSharp.Priority,BNSharp.UserEventHandler)">
            <summary>
            Registers for notification of the <see>UserJoined</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserJoined"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserJoinedNotification(BNSharp.Priority,BNSharp.UserEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserJoinedNotification(BNSharp.Priority,BNSharp.UserEventHandler)">
            <summary>
            Unregisters for notification of the <see>UserJoined</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserJoined"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterUserJoinedNotification(BNSharp.Priority,BNSharp.UserEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnUserJoined(BNSharp.UserEventArgs)">
            <summary>
            Raises the UserJoined event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>UserJoined</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserJoined"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterUserLeftNotification(BNSharp.Priority,BNSharp.UserEventHandler)">
            <summary>
            Registers for notification of the <see>UserLeft</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserLeft"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserLeftNotification(BNSharp.Priority,BNSharp.UserEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserLeftNotification(BNSharp.Priority,BNSharp.UserEventHandler)">
            <summary>
            Unregisters for notification of the <see>UserLeft</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserLeft"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterUserLeftNotification(BNSharp.Priority,BNSharp.UserEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnUserLeft(BNSharp.UserEventArgs)">
            <summary>
            Raises the UserLeft event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>UserLeft</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserLeft"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterUserShownNotification(BNSharp.Priority,BNSharp.UserEventHandler)">
            <summary>
            Registers for notification of the <see>UserShown</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserShown"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserShownNotification(BNSharp.Priority,BNSharp.UserEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserShownNotification(BNSharp.Priority,BNSharp.UserEventHandler)">
            <summary>
            Unregisters for notification of the <see>UserShown</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserShown"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterUserShownNotification(BNSharp.Priority,BNSharp.UserEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnUserShown(BNSharp.UserEventArgs)">
            <summary>
            Raises the UserShown event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>UserShown</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserShown"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterUserFlagsChangedNotification(BNSharp.Priority,BNSharp.UserEventHandler)">
            <summary>
            Registers for notification of the <see>UserFlagsChanged</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserFlagsChanged"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserFlagsChangedNotification(BNSharp.Priority,BNSharp.UserEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserFlagsChangedNotification(BNSharp.Priority,BNSharp.UserEventHandler)">
            <summary>
            Unregisters for notification of the <see>UserFlagsChanged</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserFlagsChanged"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterUserFlagsChangedNotification(BNSharp.Priority,BNSharp.UserEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnUserFlagsChanged(BNSharp.UserEventArgs)">
            <summary>
            Raises the UserFlagsChanged event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>UserFlagsChanged</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserFlagsChanged"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterServerBroadcastNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Registers for notification of the <see>ServerBroadcast</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ServerBroadcast"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterServerBroadcastNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterServerBroadcastNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Unregisters for notification of the <see>ServerBroadcast</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ServerBroadcast"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterServerBroadcastNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnServerBroadcast(BNSharp.ServerChatEventArgs)">
            <summary>
            Raises the ServerBroadcast event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ServerBroadcast</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ServerBroadcast"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterJoinedChannelNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Registers for notification of the <see>JoinedChannel</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.JoinedChannel"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterJoinedChannelNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterJoinedChannelNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Unregisters for notification of the <see>JoinedChannel</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.JoinedChannel"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterJoinedChannelNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnJoinedChannel(BNSharp.ServerChatEventArgs)">
            <summary>
            Raises the JoinedChannel event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>JoinedChannel</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.JoinedChannel"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterChannelWasFullNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Registers for notification of the <see>ChannelWasFull</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelWasFull"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterChannelWasFullNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterChannelWasFullNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Unregisters for notification of the <see>ChannelWasFull</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelWasFull"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterChannelWasFullNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnChannelWasFull(BNSharp.ServerChatEventArgs)">
            <summary>
            Raises the ChannelWasFull event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ChannelWasFull</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelWasFull"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterChannelDidNotExistNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Registers for notification of the <see>ChannelDidNotExist</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelDidNotExist"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterChannelDidNotExistNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterChannelDidNotExistNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Unregisters for notification of the <see>ChannelDidNotExist</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelDidNotExist"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterChannelDidNotExistNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnChannelDidNotExist(BNSharp.ServerChatEventArgs)">
            <summary>
            Raises the ChannelDidNotExist event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ChannelDidNotExist</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelDidNotExist"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterChannelWasRestrictedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Registers for notification of the <see>ChannelWasRestricted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelWasRestricted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterChannelWasRestrictedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterChannelWasRestrictedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Unregisters for notification of the <see>ChannelWasRestricted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelWasRestricted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterChannelWasRestrictedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnChannelWasRestricted(BNSharp.ServerChatEventArgs)">
            <summary>
            Raises the ChannelWasRestricted event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ChannelWasRestricted</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelWasRestricted"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterInformationReceivedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Registers for notification of the <see>InformationReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.InformationReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterInformationReceivedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterInformationReceivedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Unregisters for notification of the <see>InformationReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.InformationReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterInformationReceivedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnInformationReceived(BNSharp.ServerChatEventArgs)">
            <summary>
            Raises the InformationReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>InformationReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.InformationReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterServerErrorReceivedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Registers for notification of the <see>ServerErrorReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ServerErrorReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterServerErrorReceivedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterServerErrorReceivedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)">
            <summary>
            Unregisters for notification of the <see>ServerErrorReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ServerErrorReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterServerErrorReceivedNotification(BNSharp.Priority,BNSharp.ServerChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnServerErrorReceived(BNSharp.ServerChatEventArgs)">
            <summary>
            Raises the ServerErrorReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ServerErrorReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ServerErrorReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterWhisperSentNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)">
            <summary>
            Registers for notification of the <see>WhisperSent</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WhisperSent"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterWhisperSentNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterWhisperSentNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)">
            <summary>
            Unregisters for notification of the <see>WhisperSent</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WhisperSent"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterWhisperSentNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnWhisperSent(BNSharp.ChatMessageEventArgs)">
            <summary>
            Raises the WhisperSent event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>WhisperSent</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WhisperSent"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterWhisperReceivedNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)">
            <summary>
            Registers for notification of the <see>WhisperReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WhisperReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterWhisperReceivedNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterWhisperReceivedNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)">
            <summary>
            Unregisters for notification of the <see>WhisperReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WhisperReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterWhisperReceivedNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnWhisperReceived(BNSharp.ChatMessageEventArgs)">
            <summary>
            Raises the WhisperReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>WhisperReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WhisperReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterUserSpokeNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)">
            <summary>
            Registers for notification of the <see>UserSpoke</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserSpoke"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserSpokeNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserSpokeNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)">
            <summary>
            Unregisters for notification of the <see>UserSpoke</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserSpoke"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterUserSpokeNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnUserSpoke(BNSharp.ChatMessageEventArgs)">
            <summary>
            Raises the UserSpoke event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>UserSpoke</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserSpoke"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterUserEmotedNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)">
            <summary>
            Registers for notification of the <see>UserEmoted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserEmoted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserEmotedNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserEmotedNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)">
            <summary>
            Unregisters for notification of the <see>UserEmoted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserEmoted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterUserEmotedNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnUserEmoted(BNSharp.ChatMessageEventArgs)">
            <summary>
            Raises the UserEmoted event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>UserEmoted</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserEmoted"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterMessageSentNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)">
            <summary>
            Registers for notification of the <see>MessageSent</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.MessageSent"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterMessageSentNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterMessageSentNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)">
            <summary>
            Unregisters for notification of the <see>MessageSent</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.MessageSent"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterMessageSentNotification(BNSharp.Priority,BNSharp.ChatMessageEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnMessageSent(BNSharp.ChatMessageEventArgs)">
            <summary>
            Raises the MessageSent event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>MessageSent</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.MessageSent"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterCommandSentNotification(BNSharp.Priority,BNSharp.InformationEventHandler)">
            <summary>
            Registers for notification of the <see>CommandSent</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.CommandSent"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterCommandSentNotification(BNSharp.Priority,BNSharp.InformationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterCommandSentNotification(BNSharp.Priority,BNSharp.InformationEventHandler)">
            <summary>
            Unregisters for notification of the <see>CommandSent</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.CommandSent"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterCommandSentNotification(BNSharp.Priority,BNSharp.InformationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnCommandSent(BNSharp.InformationEventArgs)">
            <summary>
            Raises the CommandSent event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>CommandSent</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.CommandSent"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClientCheckPassedNotification(BNSharp.Priority,System.EventHandler)">
            <summary>
            Registers for notification of the <see>ClientCheckPassed</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClientCheckPassed"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClientCheckPassedNotification(BNSharp.Priority,System.EventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClientCheckPassedNotification(BNSharp.Priority,System.EventHandler)">
            <summary>
            Unregisters for notification of the <see>ClientCheckPassed</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClientCheckPassed"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClientCheckPassedNotification(BNSharp.Priority,System.EventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClientCheckPassed(BNSharp.BaseEventArgs)">
            <summary>
            Raises the ClientCheckPassed event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClientCheckPassed</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClientCheckPassed"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClientCheckFailedNotification(BNSharp.Priority,BNSharp.ClientCheckFailedEventHandler)">
            <summary>
            Registers for notification of the <see>ClientCheckFailed</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClientCheckFailed"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClientCheckFailedNotification(BNSharp.Priority,BNSharp.ClientCheckFailedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClientCheckFailedNotification(BNSharp.Priority,BNSharp.ClientCheckFailedEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClientCheckFailed</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClientCheckFailed"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClientCheckFailedNotification(BNSharp.Priority,BNSharp.ClientCheckFailedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClientCheckFailed(BNSharp.ClientCheckFailedEventArgs)">
            <summary>
            Raises the ClientCheckFailed event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClientCheckFailed</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClientCheckFailed"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterLoginSucceededNotification(BNSharp.Priority,System.EventHandler)">
            <summary>
            Registers for notification of the <see>LoginSucceeded</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.LoginSucceeded"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterLoginSucceededNotification(BNSharp.Priority,System.EventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterLoginSucceededNotification(BNSharp.Priority,System.EventHandler)">
            <summary>
            Unregisters for notification of the <see>LoginSucceeded</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.LoginSucceeded"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterLoginSucceededNotification(BNSharp.Priority,System.EventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnLoginSucceeded(System.EventArgs)">
            <summary>
            Raises the LoginSucceeded event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>LoginSucceeded</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.LoginSucceeded"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterLoginFailedNotification(BNSharp.Priority,BNSharp.LoginFailedEventHandler)">
            <summary>
            Registers for notification of the <see>LoginFailed</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.LoginFailed"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterLoginFailedNotification(BNSharp.Priority,BNSharp.LoginFailedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterLoginFailedNotification(BNSharp.Priority,BNSharp.LoginFailedEventHandler)">
            <summary>
            Unregisters for notification of the <see>LoginFailed</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.LoginFailed"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterLoginFailedNotification(BNSharp.Priority,BNSharp.LoginFailedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnLoginFailed(BNSharp.LoginFailedEventArgs)">
            <summary>
            Raises the LoginFailed event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>LoginFailed</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.LoginFailed"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterEnteredChatNotification(BNSharp.Priority,BNSharp.EnteredChatEventHandler)">
            <summary>
            Registers for notification of the <see>EnteredChat</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.EnteredChat"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterEnteredChatNotification(BNSharp.Priority,BNSharp.EnteredChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterEnteredChatNotification(BNSharp.Priority,BNSharp.EnteredChatEventHandler)">
            <summary>
            Unregisters for notification of the <see>EnteredChat</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.EnteredChat"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterEnteredChatNotification(BNSharp.Priority,BNSharp.EnteredChatEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnEnteredChat(BNSharp.EnteredChatEventArgs)">
            <summary>
            Raises the EnteredChat event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>EnteredChat</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.EnteredChat"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterAccountCreatedNotification(BNSharp.Priority,BNSharp.AccountCreationEventHandler)">
            <summary>
            Registers for notification of the <see>AccountCreated</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.AccountCreated"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterAccountCreatedNotification(BNSharp.Priority,BNSharp.AccountCreationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterAccountCreatedNotification(BNSharp.Priority,BNSharp.AccountCreationEventHandler)">
            <summary>
            Unregisters for notification of the <see>AccountCreated</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.AccountCreated"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterAccountCreatedNotification(BNSharp.Priority,BNSharp.AccountCreationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnAccountCreated(BNSharp.AccountCreationEventArgs)">
            <summary>
            Raises the AccountCreated event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>AccountCreated</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.AccountCreated"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterAccountCreationFailedNotification(BNSharp.Priority,BNSharp.AccountCreationFailedEventHandler)">
            <summary>
            Registers for notification of the <see>AccountCreationFailed</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.AccountCreationFailed"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterAccountCreationFailedNotification(BNSharp.Priority,BNSharp.AccountCreationFailedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterAccountCreationFailedNotification(BNSharp.Priority,BNSharp.AccountCreationFailedEventHandler)">
            <summary>
            Unregisters for notification of the <see>AccountCreationFailed</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.AccountCreationFailed"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterAccountCreationFailedNotification(BNSharp.Priority,BNSharp.AccountCreationFailedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnAccountCreationFailed(BNSharp.AccountCreationFailedEventArgs)">
            <summary>
            Raises the AccountCreationFailed event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>AccountCreationFailed</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.AccountCreationFailed"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterChannelListReceivedNotification(BNSharp.Priority,BNSharp.ChannelListEventHandler)">
            <summary>
            Registers for notification of the <see>ChannelListReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelListReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterChannelListReceivedNotification(BNSharp.Priority,BNSharp.ChannelListEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterChannelListReceivedNotification(BNSharp.Priority,BNSharp.ChannelListEventHandler)">
            <summary>
            Unregisters for notification of the <see>ChannelListReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelListReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterChannelListReceivedNotification(BNSharp.Priority,BNSharp.ChannelListEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnChannelListReceived(BNSharp.ChannelListEventArgs)">
            <summary>
            Raises the ChannelListReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ChannelListReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ChannelListReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterErrorNotification(BNSharp.Priority,BNSharp.ErrorEventHandler)">
            <summary>
            Registers for notification of the <see>Error</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Error"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterErrorNotification(BNSharp.Priority,BNSharp.ErrorEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterErrorNotification(BNSharp.Priority,BNSharp.ErrorEventHandler)">
            <summary>
            Unregisters for notification of the <see>Error</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Error"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterErrorNotification(BNSharp.Priority,BNSharp.ErrorEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnError(BNSharp.ErrorEventArgs)">
            <summary>
            Raises the Error event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>Error</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Error"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterInformationNotification(BNSharp.Priority,BNSharp.InformationEventHandler)">
            <summary>
            Registers for notification of the <see>Information</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Information"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterInformationNotification(BNSharp.Priority,BNSharp.InformationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterInformationNotification(BNSharp.Priority,BNSharp.InformationEventHandler)">
            <summary>
            Unregisters for notification of the <see>Information</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Information"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterInformationNotification(BNSharp.Priority,BNSharp.InformationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnInformation(BNSharp.InformationEventArgs)">
            <summary>
            Raises the Information event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>Information</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Information"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterConnectedNotification(BNSharp.Priority,System.EventHandler)">
            <summary>
            Registers for notification of the <see>Connected</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Connected"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterConnectedNotification(BNSharp.Priority,System.EventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterConnectedNotification(BNSharp.Priority,System.EventHandler)">
            <summary>
            Unregisters for notification of the <see>Connected</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Connected"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterConnectedNotification(BNSharp.Priority,System.EventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnConnected(System.EventArgs)">
            <summary>
            Raises the Connected event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>Connected</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Connected"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterDisconnectedNotification(BNSharp.Priority,System.EventHandler)">
            <summary>
            Registers for notification of the <see>Disconnected</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Disconnected"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterDisconnectedNotification(BNSharp.Priority,System.EventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterDisconnectedNotification(BNSharp.Priority,System.EventHandler)">
            <summary>
            Unregisters for notification of the <see>Disconnected</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Disconnected"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterDisconnectedNotification(BNSharp.Priority,System.EventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnDisconnected(System.EventArgs)">
            <summary>
            Raises the Disconnected event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>Disconnected</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.Disconnected"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterAdChangedNotification(BNSharp.Priority,BNSharp.BattleNet.AdChangedEventHandler)">
            <summary>
            Registers for notification of the <see>AdChanged</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.AdChanged"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterAdChangedNotification(BNSharp.Priority,BNSharp.BattleNet.AdChangedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterAdChangedNotification(BNSharp.Priority,BNSharp.BattleNet.AdChangedEventHandler)">
            <summary>
            Unregisters for notification of the <see>AdChanged</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.AdChanged"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterAdChangedNotification(BNSharp.Priority,BNSharp.BattleNet.AdChangedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnAdChanged(BNSharp.BattleNet.AdChangedEventArgs)">
            <summary>
            Raises the AdChanged event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>AdChanged</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.AdChanged"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterWardenUnhandledNotification(BNSharp.Priority,System.EventHandler)">
            <summary>
            Registers for notification of the <see>WardenUnhandled</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WardenUnhandled"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterWardenUnhandledNotification(BNSharp.Priority,System.EventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterWardenUnhandledNotification(BNSharp.Priority,System.EventHandler)">
            <summary>
            Unregisters for notification of the <see>WardenUnhandled</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WardenUnhandled"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterWardenUnhandledNotification(BNSharp.Priority,System.EventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnWardenUnhandled(System.EventArgs)">
            <summary>
            Raises the WardenUnhandled event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>WardenUnhandled</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.WardenUnhandled"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterServerNewsNotification(BNSharp.Priority,BNSharp.BattleNet.ServerNewsEventHandler)">
            <summary>
            Registers for notification of the <see>ServerNews</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ServerNews"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterServerNewsNotification(BNSharp.Priority,BNSharp.BattleNet.ServerNewsEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterServerNewsNotification(BNSharp.Priority,BNSharp.BattleNet.ServerNewsEventHandler)">
            <summary>
            Unregisters for notification of the <see>ServerNews</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ServerNews"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterServerNewsNotification(BNSharp.Priority,BNSharp.BattleNet.ServerNewsEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnServerNews(BNSharp.BattleNet.ServerNewsEventArgs)">
            <summary>
            Raises the ServerNews event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ServerNews</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ServerNews"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMemberListReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberListEventHandler)">
            <summary>
            Registers for notification of the <see>ClanMemberListReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberListReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMemberListReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberListEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMemberListReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberListEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanMemberListReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberListReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMemberListReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberListEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanMemberListReceived(BNSharp.BattleNet.Clans.ClanMemberListEventArgs)">
            <summary>
            Raises the ClanMemberListReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanMemberListReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberListReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMemberStatusChangedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)">
            <summary>
            Registers for notification of the <see>ClanMemberStatusChanged</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberStatusChanged"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMemberStatusChangedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMemberStatusChangedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanMemberStatusChanged</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberStatusChanged"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMemberStatusChangedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanMemberStatusChanged(BNSharp.BattleNet.Clans.ClanMemberStatusEventArgs)">
            <summary>
            Raises the ClanMemberStatusChanged event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanMemberStatusChanged</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberStatusChanged"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMemberQuitNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)">
            <summary>
            Registers for notification of the <see>ClanMemberQuit</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberQuit"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMemberQuitNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMemberQuitNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanMemberQuit</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberQuit"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMemberQuitNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanMemberQuit(BNSharp.BattleNet.Clans.ClanMemberStatusEventArgs)">
            <summary>
            Raises the ClanMemberQuit event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanMemberQuit</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberQuit"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMemberRemovedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)">
            <summary>
            Registers for notification of the <see>ClanMemberRemoved</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberRemoved"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMemberRemovedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMemberRemovedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanMemberRemoved</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberRemoved"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMemberRemovedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanMemberRemoved(BNSharp.BattleNet.Clans.ClanMemberStatusEventArgs)">
            <summary>
            Raises the ClanMemberRemoved event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanMemberRemoved</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberRemoved"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMessageOfTheDayNotification(BNSharp.Priority,BNSharp.InformationEventHandler)">
            <summary>
            Registers for notification of the <see>ClanMessageOfTheDay</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMessageOfTheDay"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMessageOfTheDayNotification(BNSharp.Priority,BNSharp.InformationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMessageOfTheDayNotification(BNSharp.Priority,BNSharp.InformationEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanMessageOfTheDay</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMessageOfTheDay"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMessageOfTheDayNotification(BNSharp.Priority,BNSharp.InformationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanMessageOfTheDay(BNSharp.InformationEventArgs)">
            <summary>
            Raises the ClanMessageOfTheDay event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanMessageOfTheDay</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMessageOfTheDay"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMemberRankChangedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberRankChangeEventHandler)">
            <summary>
            Registers for notification of the <see>ClanMemberRankChanged</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberRankChanged"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMemberRankChangedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberRankChangeEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMemberRankChangedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberRankChangeEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanMemberRankChanged</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberRankChanged"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMemberRankChangedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMemberRankChangeEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanMemberRankChanged(BNSharp.BattleNet.Clans.ClanMemberRankChangeEventArgs)">
            <summary>
            Raises the ClanMemberRankChanged event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanMemberRankChanged</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberRankChanged"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMembershipReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMembershipEventHandler)">
            <summary>
            Registers for notification of the <see>ClanMembershipReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMembershipReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMembershipReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMembershipEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanMembershipReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMembershipEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanMembershipReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMembershipReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanMembershipReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanMembershipEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanMembershipReceived(BNSharp.BattleNet.Clans.ClanMembershipEventArgs)">
            <summary>
            Raises the ClanMembershipReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanMembershipReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanMembershipReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanCandidatesSearchCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanCandidatesSearchEventHandler)">
            <summary>
            Registers for notification of the <see>ClanCandidatesSearchCompleted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanCandidatesSearchCompleted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanCandidatesSearchCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanCandidatesSearchEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanCandidatesSearchCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanCandidatesSearchEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanCandidatesSearchCompleted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanCandidatesSearchCompleted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanCandidatesSearchCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanCandidatesSearchEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanCandidatesSearchCompleted(BNSharp.BattleNet.Clans.ClanCandidatesSearchEventArgs)">
            <summary>
            Raises the ClanCandidatesSearchCompleted event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanCandidatesSearchCompleted</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanCandidatesSearchCompleted"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanFormationCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanFormationEventHandler)">
            <summary>
            Registers for notification of the <see>ClanFormationCompleted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanFormationCompleted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanFormationCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanFormationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanFormationCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanFormationEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanFormationCompleted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanFormationCompleted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanFormationCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanFormationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanFormationCompleted(BNSharp.BattleNet.Clans.ClanFormationEventArgs)">
            <summary>
            Raises the ClanFormationCompleted event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanFormationCompleted</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanFormationCompleted"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanFormationInvitationReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanFormationInvitationEventHandler)">
            <summary>
            Registers for notification of the <see>ClanFormationInvitationReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanFormationInvitationReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanFormationInvitationReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanFormationInvitationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanFormationInvitationReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanFormationInvitationEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanFormationInvitationReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanFormationInvitationReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanFormationInvitationReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanFormationInvitationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanFormationInvitationReceived(BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs)">
            <summary>
            Raises the ClanFormationInvitationReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanFormationInvitationReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanFormationInvitationReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanDisbandCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanDisbandEventHandler)">
            <summary>
            Registers for notification of the <see>ClanDisbandCompleted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanDisbandCompleted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanDisbandCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanDisbandEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanDisbandCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanDisbandEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanDisbandCompleted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanDisbandCompleted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanDisbandCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanDisbandEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanDisbandCompleted(BNSharp.BattleNet.Clans.ClanDisbandEventArgs)">
            <summary>
            Raises the ClanDisbandCompleted event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanDisbandCompleted</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanDisbandCompleted"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanChangeChieftanCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanChieftanChangeEventHandler)">
            <summary>
            Registers for notification of the <see>ClanChangeChieftanCompleted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanChangeChieftanCompleted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanChangeChieftanCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanChieftanChangeEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanChangeChieftanCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanChieftanChangeEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanChangeChieftanCompleted</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanChangeChieftanCompleted"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanChangeChieftanCompletedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanChieftanChangeEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanChangeChieftanCompleted(BNSharp.BattleNet.Clans.ClanChieftanChangeEventArgs)">
            <summary>
            Raises the ClanChangeChieftanCompleted event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanChangeChieftanCompleted</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanChangeChieftanCompleted"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanInvitationReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanInvitationEventHandler)">
            <summary>
            Registers for notification of the <see>ClanInvitationReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanInvitationReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanInvitationReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanInvitationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanInvitationReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanInvitationEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanInvitationReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanInvitationReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanInvitationReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanInvitationEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanInvitationReceived(BNSharp.BattleNet.Clans.ClanInvitationEventArgs)">
            <summary>
            Raises the ClanInvitationReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanInvitationReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanInvitationReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterLeftClanNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.LeftClanEventHandler)">
            <summary>
            Registers for notification of the <see>LeftClan</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.LeftClan"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterLeftClanNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.LeftClanEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterLeftClanNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.LeftClanEventHandler)">
            <summary>
            Unregisters for notification of the <see>LeftClan</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.LeftClan"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterLeftClanNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.LeftClanEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnLeftClan(BNSharp.BattleNet.Clans.LeftClanEventArgs)">
            <summary>
            Raises the LeftClan event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>LeftClan</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.LeftClan"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanInvitationResponseReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanInvitationResponseEventHandler)">
            <summary>
            Registers for notification of the <see>ClanInvitationResponseReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanInvitationResponseReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanInvitationResponseReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanInvitationResponseEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanInvitationResponseReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanInvitationResponseEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanInvitationResponseReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanInvitationResponseReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanInvitationResponseReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanInvitationResponseEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanInvitationResponseReceived(BNSharp.BattleNet.Clans.ClanInvitationResponseEventArgs)">
            <summary>
            Raises the ClanInvitationResponseReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanInvitationResponseReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanInvitationResponseReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanRemovalResponseNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanRemovalResponseEventHandler)">
            <summary>
            Registers for notification of the <see>ClanRemovalResponse</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanRemovalResponse"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanRemovalResponseNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanRemovalResponseEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanRemovalResponseNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanRemovalResponseEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanRemovalResponse</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanRemovalResponse"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanRemovalResponseNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanRemovalResponseEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanRemovalResponse(BNSharp.BattleNet.Clans.ClanRemovalResponseEventArgs)">
            <summary>
            Raises the ClanRemovalResponse event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanRemovalResponse</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanRemovalResponse"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterClanRankChangeResponseReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanRankChangeEventHandler)">
            <summary>
            Registers for notification of the <see>ClanRankChangeResponseReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanRankChangeResponseReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanRankChangeResponseReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanRankChangeEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterClanRankChangeResponseReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanRankChangeEventHandler)">
            <summary>
            Unregisters for notification of the <see>ClanRankChangeResponseReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanRankChangeResponseReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterClanRankChangeResponseReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Clans.ClanRankChangeEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnClanRankChangeResponseReceived(BNSharp.BattleNet.Clans.ClanRankChangeEventArgs)">
            <summary>
            Raises the ClanRankChangeResponseReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>ClanRankChangeResponseReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.ClanRankChangeResponseReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterFriendListReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendListReceivedEventHandler)">
            <summary>
            Registers for notification of the <see>FriendListReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendListReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterFriendListReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendListReceivedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterFriendListReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendListReceivedEventHandler)">
            <summary>
            Unregisters for notification of the <see>FriendListReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendListReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterFriendListReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendListReceivedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnFriendListReceived(BNSharp.BattleNet.Friends.FriendListReceivedEventArgs)">
            <summary>
            Raises the FriendListReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>FriendListReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendListReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterFriendUpdatedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendUpdatedEventHandler)">
            <summary>
            Registers for notification of the <see>FriendUpdated</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendUpdated"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterFriendUpdatedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendUpdatedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterFriendUpdatedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendUpdatedEventHandler)">
            <summary>
            Unregisters for notification of the <see>FriendUpdated</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendUpdated"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterFriendUpdatedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendUpdatedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnFriendUpdated(BNSharp.BattleNet.Friends.FriendUpdatedEventArgs)">
            <summary>
            Raises the FriendUpdated event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>FriendUpdated</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendUpdated"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterFriendAddedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendAddedEventHandler)">
            <summary>
            Registers for notification of the <see>FriendAdded</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendAdded"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterFriendAddedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendAddedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterFriendAddedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendAddedEventHandler)">
            <summary>
            Unregisters for notification of the <see>FriendAdded</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendAdded"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterFriendAddedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendAddedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnFriendAdded(BNSharp.BattleNet.Friends.FriendAddedEventArgs)">
            <summary>
            Raises the FriendAdded event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>FriendAdded</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendAdded"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterFriendRemovedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendRemovedEventHandler)">
            <summary>
            Registers for notification of the <see>FriendRemoved</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendRemoved"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterFriendRemovedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendRemovedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterFriendRemovedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendRemovedEventHandler)">
            <summary>
            Unregisters for notification of the <see>FriendRemoved</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendRemoved"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterFriendRemovedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendRemovedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnFriendRemoved(BNSharp.BattleNet.Friends.FriendRemovedEventArgs)">
            <summary>
            Raises the FriendRemoved event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>FriendRemoved</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendRemoved"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterFriendMovedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendMovedEventHandler)">
            <summary>
            Registers for notification of the <see>FriendMoved</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendMoved"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterFriendMovedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendMovedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterFriendMovedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendMovedEventHandler)">
            <summary>
            Unregisters for notification of the <see>FriendMoved</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendMoved"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterFriendMovedNotification(BNSharp.Priority,BNSharp.BattleNet.Friends.FriendMovedEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnFriendMoved(BNSharp.BattleNet.Friends.FriendMovedEventArgs)">
            <summary>
            Raises the FriendMoved event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>FriendMoved</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.FriendMoved"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RegisterUserProfileReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.UserProfileEventHandler)">
            <summary>
            Registers for notification of the <see>UserProfileReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority at which to register.</param>
            <param name="callback">The event handler that should be registered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserProfileReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserProfileReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.UserProfileEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.UnregisterUserProfileReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.UserProfileEventHandler)">
            <summary>
            Unregisters for notification of the <see>UserProfileReceived</see> event at the specified priority.
            </summary>
            <remarks>
            <para>The event system in the JinxBot API supports normal event registration and prioritized event registration.  You can use
            normal syntax to register for events at <see cref="T:BNSharp.Priority">Normal priority</see>, so no special registration is needed; this is 
            accessed through normal event handling syntax (the += syntax in C#, or the <see langword="Handles" lang="VB"/> in Visual Basic.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            <para>To be well-behaved within JinxBot, plugins should always unregister themselves when they are being unloaded or when they 
            otherwise need to do so.  Plugins may opt-in to a Reflection-based event handling registration system which uses attributes to 
            mark methods that should be used as event handlers.</para>
            </remarks>
            <param name="p">The priority from which to unregister.</param>
            <param name="callback">The event handler that should be unregistered for this event.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserProfileReceived"/>
            <seealso cref="M:BNSharp.BattleNet.BattleNetClient.RegisterUserProfileReceivedNotification(BNSharp.Priority,BNSharp.BattleNet.UserProfileEventHandler)"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.OnUserProfileReceived(BNSharp.BattleNet.UserProfileEventArgs)">
            <summary>
            Raises the UserProfileReceived event.
            </summary>
            <remarks>
            <para>Only high-priority events are invoked immediately; others are deferred.  For more information, see <see>UserProfileReceived</see>.</para>
            </remarks>
            <param name="e">The event arguments.</param>
            <seealso cref="E:BNSharp.BattleNet.BattleNetClient.UserProfileReceived"/>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.#ctor(BNSharp.IBattleNetSettings)">
            <summary>
            Creates a new <see>BattleNetClient</see> with the specified settings.
            </summary>
            <param name="settings">An object containing the settings for a Battle.net connection.</param>
            <exception cref="T:BNSharp.BattleNetSettingsErrorsException">Thrown if required parameters of the 
            <paramref name="settings"/> object are invalid.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.Send(BNSharp.MBNCSUtil.DataBuffer)">
            <summary>
            Sends a data buffer to the server.
            </summary>
            <param name="packet">The buffer to send.</param>
            <remarks>
            <para>Use of this method is preferred when sending binary messages because, after sending the buffer, it frees the buffer from the outgoing buffer pool.  If you
            are only sending a text command, you should use <see>Send(string)</see>; it not only automatically creates the packet, but uses the speed delay provider, 
            if any, assigned to the <see>CommandQueueProvider</see> property.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.Connect">
            <summary>
            Begins the connection to Battle.net.
            </summary>
            <returns><see langword="true" /> if the connection succeeded; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.Send(System.String,BNSharp.Priority)">
            <summary>
            Sends a textual message to the server.
            </summary>
            <param name="text">The message to send.</param>
            <param name="priority">The priority at which to send the message.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the client is not connected.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">Thrown if <paramref name="text"/> is longer than 223 characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text"/> is <see langword="null"/> or zero-length.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.SendMessage(System.String)">
            <summary>
            Sends a textual message to the server at normal priority.
            </summary>
            <param name="text">The message to send.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the client is not connected.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">Thrown if <paramref name="text"/> is longer than 223 characters.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.CreateAccount">
            <summary>
            Creates a new account, attempting to use the login information provided in the settings.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.ContinueLogin">
            <summary>
            Allows the client to continue logging in if the login has stopped due to a non-existent username or password.
            </summary>
            <remarks>
            <para>If a <see>LoginFailed</see> event occurs, the client is not automatically disconnected.  The UI can then present an interface
            by which the user may modify the client's <see>Settings</see> instance with proper login information.  Once this has been done, the 
            user may then call this method to attempt to log in again.</para>
            <para>This method does not need to be called after the <see>AccountCreated</see> event.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.DisplayAd(System.Int32)">
            <summary>
            Informs the server that an ad has been displayed.  This should be sent whenever an ad 
            is updated on the client.
            </summary>
            <param name="adID">The ID of the ad assigned by the server.</param>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.ClickAd(System.Int32)">
            <summary>
            Informs the server that an ad has been clicked.
            </summary>
            <param name="adID">The ID of the ad assigned by the server.</param>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.JoinChannel(System.String,BNSharp.BattleNet.JoinMethod)">
            <summary>
            Sends a binary channel join command.
            </summary>
            <param name="channelName">The name of the channel to join.</param>
            <param name="method">The specific way by which to join.  This should typically be 
            set to <see cref="T:BNSharp.BattleNet.JoinMethod">JoinMethod.NoCreate</see>.</param>
        </member>
        <member name="M:BNSharp.BattleNet.BattleNetClient.RequestUserProfile(System.String,BNSharp.BattleNet.UserProfileRequest)">
            <summary>
            Requests a user's profile.
            </summary>
            <param name="accountName">The name of the user for whom to request information.</param>
            <param name="profile">The profile request, which should contain the keys to request.</param>
        </member>
        <member name="P:BNSharp.BattleNet.BattleNetClient.WardenHandler">
            <summary>
            Gets or sets the Warden module currently in use.
            </summary>
            <remarks>
            <para>The warden implementation must use this property to set itself before beginning the connection </para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.WarcraftProfileReceived">
            <summary>
            Informs listeners that a Warcraft 3 profile has been received.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterWarcraftProfileReceivedNotification</see> and
            <see>UnregisterWarcraftProfileReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ProfileLookupFailed">
            <summary>
            Informs listeners that the lookup of a Warcraft 3 profile failed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterProfileLookupFailedNotification</see> and
            <see>UnregisterProfileLookupFailedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.EventExceptionThrown">
            <summary>
            Informs listeners that a client-oriented event handler has thrown an exception.
            </summary>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.UserJoined">
            <summary>
            Informs listeners that a user joined the client's current channel.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterUserJoinedNotification</see> and
            <see>UnregisterUserJoinedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.UserLeft">
            <summary>
            Informs listeners that a user left the client's current channel.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterUserLeftNotification</see> and
            <see>UnregisterUserLeftNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.UserShown">
            <summary>
            Informs listeners a user was already in the channel when the client joined it.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterUserShownNotification</see> and
            <see>UnregisterUserShownNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.UserFlagsChanged">
            <summary>
            Informs listeners that a user's flags changed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterUserFlagsChangedNotification</see> and
            <see>UnregisterUserFlagsChangedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ServerBroadcast">
            <summary>
            Informs listeners that the server sent a broadcast message.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterServerBroadcastNotification</see> and
            <see>UnregisterServerBroadcastNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.JoinedChannel">
            <summary>
            Informs listeners that the client joined a new channel.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterJoinedChannelNotification</see> and
            <see>UnregisterJoinedChannelNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ChannelWasFull">
            <summary>
            Informs listeners that a channel join failed because the channel was full.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterChannelWasFullNotification</see> and
            <see>UnregisterChannelWasFullNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ChannelDidNotExist">
            <summary>
            Informs listeners a channel view failed because the channel did not exist.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterChannelDidNotExistNotification</see> and
            <see>UnregisterChannelDidNotExistNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ChannelWasRestricted">
            <summary>
            Informs listeners that a channel join failed because the channel was restricted.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterChannelWasRestrictedNotification</see> and
            <see>UnregisterChannelWasRestrictedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.InformationReceived">
            <summary>
            Informs listeners that the server has sent an informational message to the client.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterInformationReceivedNotification</see> and
            <see>UnregisterInformationReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ServerErrorReceived">
            <summary>
            Informs listeners that an error message was received from the server.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterServerErrorReceivedNotification</see> and
            <see>UnregisterServerErrorReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.WhisperSent">
            <summary>
            Informs listeners that a whisper was sent from the client to another user.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterWhisperSentNotification</see> and
            <see>UnregisterWhisperSentNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.WhisperReceived">
            <summary>
            Informs listeners that a whisper was received from another user.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterWhisperReceivedNotification</see> and
            <see>UnregisterWhisperReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.UserSpoke">
            <summary>
            Informs listeners that a user spoke in the channel.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterUserSpokeNotification</see> and
            <see>UnregisterUserSpokeNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.UserEmoted">
            <summary>
            Informs listeners that a user emoted in the current channel.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterUserEmotedNotification</see> and
            <see>UnregisterUserEmotedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.MessageSent">
            <summary>
            Informs listeners that the client has sent a message to Battle.net.
            </summary>
            <remarks>
            <para>The event handlers should check the <see cref="P:BNSharp.ChatEventArgs.EventType">EventType property</see> of the event arguments to 
            determine whether this event was an emote or a standard talk command and present the text appropriately.</para>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterMessageSentNotification</see> and
            <see>UnregisterMessageSentNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.CommandSent">
            <summary>
            Informs listeners that a command was sent to the server.
            </summary>
            <remarks>
            <para>This event is fired whenever the user sends a slash command to the server, except for /me or /emote commands.  The /me and 
            /emote commands are informed through the <see>MessageSent</see> event.</para>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterCommandSentNotification</see> and
            <see>UnregisterCommandSentNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClientCheckPassed">
            <summary>
            Informs listeners that the client versioning check was successful.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClientCheckPassedNotification</see> and
            <see>UnregisterClientCheckPassedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClientCheckFailed">
            <summary>
            Informs listeners that the client versioning check failed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClientCheckFailedNotification</see> and
            <see>UnregisterClientCheckFailedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.LoginSucceeded">
            <summary>
            Informs listeners that the client login succeeded.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterLoginSucceededNotification</see> and
            <see>UnregisterLoginSucceededNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.LoginFailed">
            <summary>
            Informs listeners that the client login failed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterLoginFailedNotification</see> and
            <see>UnregisterLoginFailedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.EnteredChat">
            <summary>
            Informs listeners that the client has entered chat.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterEnteredChatNotification</see> and
            <see>UnregisterEnteredChatNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.AccountCreated">
            <summary>
            Informs listeners that a new account has been created.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterAccountCreatedNotification</see> and
            <see>UnregisterAccountCreatedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.AccountCreationFailed">
            <summary>
            Informs listeners that an attempt to create an account has failed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterAccountCreationFailedNotification</see> and
            <see>UnregisterAccountCreationFailedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ChannelListReceived">
            <summary>
            Informs listeners that the channel list has been provided by the server.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterChannelListReceivedNotification</see> and
            <see>UnregisterChannelListReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.Error">
            <summary>
            Informs listeners that a general or connection error has occurred.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterErrorNotification</see> and
            <see>UnregisterErrorNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.Information">
            <summary>
            Informs listeners about a general informational message.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterInformationNotification</see> and
            <see>UnregisterInformationNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.Connected">
            <summary>
            Informs listeners that the application has connected to the server.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterConnectedNotification</see> and
            <see>UnregisterConnectedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.Disconnected">
            <summary>
            Informs listeners that the client has disconnected.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterDisconnectedNotification</see> and
            <see>UnregisterDisconnectedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.AdChanged">
            <summary>
            Informs listeners that an advertisement has changed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterAdChangedNotification</see> and
            <see>UnregisterAdChangedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.WardenUnhandled">
            <summary>
            Informs listeners that the server has challenged the client with a warden handshake, but that the client did not have a 
            Warden plugin enabled.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterWardenUnhandledNotification</see> and
            <see>UnregisterWardenUnhandledNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
            <seealso cref="T:BNSharp.Plugins.IWardenModule"/>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ServerNews">
            <summary>
            Informs listeners that the server has provided news items to view.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterServerNewsNotification</see> and
            <see>UnregisterServerNewsNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanMemberListReceived">
            <summary>
            Informs listeners that the user's clan member list has been received.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanMemberListReceivedNotification</see> and
            <see>UnregisterClanMemberListReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanMemberStatusChanged">
            <summary>
            Informs listeners that a clan member's status has changed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanMemberStatusChangedNotification</see> and
            <see>UnregisterClanMemberStatusChangedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanMemberQuit">
            <summary>
            Informs listeners that a clan member has quit the clan.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanMemberQuitNotification</see> and
            <see>UnregisterClanMemberQuitNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanMemberRemoved">
            <summary>
            Informs listeners that a clan member has been removed from the clan.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanMemberRemovedNotification</see> and
            <see>UnregisterClanMemberRemovedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanMessageOfTheDay">
            <summary>
            Informs listeners of the clan's message-of-the-day.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanMessageOfTheDayNotification</see> and
            <see>UnregisterClanMessageOfTheDayNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanMemberRankChanged">
            <summary>
            Informs listeners that the client's user's clan rank has changed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanMemberRankChangedNotification</see> and
            <see>UnregisterClanMemberRankChangedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanMembershipReceived">
            <summary>
            Informs listeners that the client's user belongs to a clan.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanMembershipReceivedNotification</see> and
            <see>UnregisterClanMembershipReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanCandidatesSearchCompleted">
            <summary>
            Informs listeners that a clan candidates search has completed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanCandidatesSearchCompletedNotification</see> and
            <see>UnregisterClanCandidatesSearchCompletedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanFormationCompleted">
            <summary>
            Informs listeners that an attempt to form a clan has completed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanFormationCompletedNotification</see> and
            <see>UnregisterClanFormationCompletedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanFormationInvitationReceived">
            <summary>
            Informs listeners that the client has been invited to join a clan as it is forming.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanFormationInvitationReceivedNotification</see> and
            <see>UnregisterClanFormationInvitationReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanDisbandCompleted">
            <summary>
            Informs listeners that an attempt to disband the clan has been completed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanDisbandCompletedNotification</see> and
            <see>UnregisterClanDisbandCompletedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanChangeChieftanCompleted">
            <summary>
            Informs listeners that a request to change the clan chieftan has completed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanChangeChieftanCompletedNotification</see> and
            <see>UnregisterClanChangeChieftanCompletedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanInvitationReceived">
            <summary>
            Informs listeners that the client has received an invitation to join an existing clan.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanInvitationReceivedNotification</see> and
            <see>UnregisterClanInvitationReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.LeftClan">
            <summary>
            Informs listeners that the client has either left the clan or been forcibly removed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterLeftClanNotification</see> and
            <see>UnregisterLeftClanNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanInvitationResponseReceived">
            <summary>
            Informs listeners that an invitation to join a clan has been responded to and that the response has been received.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanInvitationResponseReceivedNotification</see> and
            <see>UnregisterClanInvitationResponseReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanRemovalResponse">
            <summary>
            Informs listeners that a request to remove a clan member has completed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanRemovalResponseNotification</see> and
            <see>UnregisterClanRemovalResponseNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.ClanRankChangeResponseReceived">
            <summary>
            Informs listeners that a request to change a user's rank has completed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterClanRankChangeResponseReceivedNotification</see> and
            <see>UnregisterClanRankChangeResponseReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.FriendListReceived">
            <summary>
            Informs listeners that the client's friend list has been received.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterFriendListReceivedNotification</see> and
            <see>UnregisterFriendListReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.FriendUpdated">
            <summary>
            Informs listeners that a friend on the client's friend list has had its status changed.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterFriendUpdatedNotification</see> and
            <see>UnregisterFriendUpdatedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.FriendAdded">
            <summary>
            Informs listeners that a new friend has been added to the client's friends list.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterFriendAddedNotification</see> and
            <see>UnregisterFriendAddedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.FriendRemoved">
            <summary>
            Informs listeners that a friend has been removed from the client's friends list.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterFriendRemovedNotification</see> and
            <see>UnregisterFriendRemovedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.FriendMoved">
            <summary>
            Informs listeners that a friend on the user's friends list has changed position on the list.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterFriendMovedNotification</see> and
            <see>UnregisterFriendMovedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.BattleNet.BattleNetClient.UserProfileReceived">
            <summary>
            Informs listeners that a user profile has been received.
            </summary>
            <remarks>
            <para>Registering for this event with this member will register with <see cref="T:BNSharp.Priority">Normal priority</see>.  To register for 
            <see cref="T:BNSharp.Priority">High</see> or <see cref="T:BNSharp.Priority">Low</see> priority, use the <see>RegisterUserProfileReceivedNotification</see> and
            <see>UnregisterUserProfileReceivedNotification</see> methods.</para>
            <para>Events in the JinxBot API are never guaranteed to be executed on the UI thread.  Events that affect the user interface should
            be marshaled back to the UI thread by the event handling code.  Generally, high-priority event handlers are
            raised on the thread that is parsing data from Battle.net, and lower-priority event handler are executed from the thread pool.</para>
            <para>JinxBot guarantees that all event handlers will be fired regardless of exceptions raised in previous event handlers.  However, 
            if a plugin repeatedly raises an exception, it may be forcefully unregistered from events.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.BattleNetClient.Settings">
            <summary>
            Gets the <see cref="T:BNSharp.IBattleNetSettings">settings</see> associated with this connection.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.BattleNetClient.CommandQueue">
            <summary>
            Gets or sets a command queue implementation to be used by the Battle.net client.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this property is set while the 
            client is connected.</exception>
        </member>
        <member name="P:BNSharp.BattleNet.BattleNetClient.Channel">
            <summary>
            Gets a read-only list of all of the users in the current channel.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.BattleNetClient.ChannelName">
            <summary>
            Gets the name of the current channel.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if this property is set to a null or empty string.</exception>
        </member>
        <member name="P:BNSharp.BattleNet.BattleNetClient.UniqueUsername">
            <summary>
            Gets the unique username of the current user.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if this property is set to a null or empty string.</exception>
        </member>
        <member name="T:BNSharp.Plugins.IBattleNetEvents">
            <summary>
            Provided by the BN# Plugins Infrastructure to enable custom packet handlers to fire events.
            </summary>
            <remarks>
            <para><b>THIS IS PRELIMINARY SUPPORT FOR CUSTOM PACKET HANDLING!</b>  New events will be introduced before this is completed.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnAccountCreated(BNSharp.AccountCreationEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.AccountCreated">AccountCreated</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnAccountCreationFailed(BNSharp.AccountCreationFailedEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.AccountCreationFailed">AccountCreationFailed</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnChannelDidNotExist(BNSharp.ServerChatEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ChannelDidNotExist">ChannelDidNotExist</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnChannelListReceived(BNSharp.ChannelListEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ChannelListReceived">ChannelListReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnChannelWasFull(BNSharp.ServerChatEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ChannelWasFull">ChannelWasFull</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnChannelWasRestricted(BNSharp.ServerChatEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ChannelWasRestricted">ChannelWasRestricted</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanCandidatesSearchCompleted(BNSharp.BattleNet.Clans.ClanCandidatesSearchEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanCandidatesSearchCompleted">ClanCandidatesSearchCompleted</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanChangeChieftanCompleted(BNSharp.BattleNet.Clans.ClanChieftanChangeEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanChangeChieftanCompleted">ClanChangeChieftanCompleted</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanDisbandCompleted(BNSharp.BattleNet.Clans.ClanDisbandEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanDisbandCompleted">ClanDisbandCompleted</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanFormationCompleted(BNSharp.BattleNet.Clans.ClanFormationEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanFormationCompleted">ClanFormationCompleted</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanFormationInvitationReceived(BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanFormationInvitationReceived">ClanFormationInvitationReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanInvitationReceived(BNSharp.BattleNet.Clans.ClanInvitationEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanInvitationReceived">ClanInvitationReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanInvitationResponseReceived(BNSharp.BattleNet.Clans.ClanInvitationResponseEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanInvitationResponseReceived">ClanInvitationResponseReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanMemberListReceived(BNSharp.BattleNet.Clans.ClanMemberListEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberListReceived">ClanMemberListReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanMemberQuit(BNSharp.BattleNet.Clans.ClanMemberStatusEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberQuit">ClanMemberQuit</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanMemberRemoved(BNSharp.BattleNet.Clans.ClanMemberStatusEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberRemoved">ClanMemberRemoved</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanMembershipReceived(BNSharp.BattleNet.Clans.ClanMembershipEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanMembershipReceived">ClanMembershipReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanMemberStatusChanged(BNSharp.BattleNet.Clans.ClanMemberStatusEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberStatusChanged">ClanMemberStatusChanged</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanMessageOfTheDay(BNSharp.InformationEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanMessageOfTheDay">ClanMessageOfTheDay</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanMemberRankChanged(BNSharp.BattleNet.Clans.ClanMemberRankChangeEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanMemberRankChanged">ClanMemberRankChanged</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanRankChangeResponseReceived(BNSharp.BattleNet.Clans.ClanRankChangeEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanRankChangeResponseReceived">ClanRankChangeResponseReceived</see> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClanRemovalResponse(BNSharp.BattleNet.Clans.ClanRemovalResponseEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClanRemovalResponse">ClanRemovalResponse</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnLeftClan(BNSharp.BattleNet.Clans.LeftClanEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.LeftClan">LeftClan</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClientCheckFailed(BNSharp.ClientCheckFailedEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClientCheckFailed">ClientCheckFailed</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnClientCheckPassed(BNSharp.BaseEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ClientCheckPassed">ClientCheckPassed</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnCommandSent(BNSharp.InformationEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.CommandSent">CommandSent</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnEnteredChat(BNSharp.EnteredChatEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.EnteredChat">EnteredChat</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnFriendAdded(BNSharp.BattleNet.Friends.FriendAddedEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.FriendAdded">FriendAdded</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnFriendListReceived(BNSharp.BattleNet.Friends.FriendListReceivedEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.FriendListReceived">FriendListReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnFriendMoved(BNSharp.BattleNet.Friends.FriendMovedEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.FriendMoved">FriendMoved</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnFriendRemoved(BNSharp.BattleNet.Friends.FriendRemovedEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.FriendRemoved">FriendRemoved</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnFriendUpdated(BNSharp.BattleNet.Friends.FriendUpdatedEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.FriendUpdated">FriendUpdated</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnError(BNSharp.ErrorEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.Error">Error</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnInformation(BNSharp.InformationEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.Information">Information</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnInformationReceived(BNSharp.ServerChatEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.InformationReceived">InformationReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnJoinedChannel(BNSharp.ServerChatEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.JoinedChannel">JoinedChannel</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnLoginFailed(BNSharp.LoginFailedEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.LoginFailed">LoginFailed</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnLoginSucceeded(System.EventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.LoginSucceeded">LoginSucceeded</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnMessageSent(BNSharp.ChatMessageEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.MessageSent">MessageSent</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnServerBroadcast(BNSharp.ServerChatEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ServerBroadcast">ServerBroadcast</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnServerErrorReceived(BNSharp.ServerChatEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ServerErrorReceived">ServerErrorReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnServerNews(BNSharp.BattleNet.ServerNewsEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.WhisperSent">WhisperSent</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnUserEmoted(BNSharp.ChatMessageEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.UserEmoted">UserEmoted</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnUserFlagsChanged(BNSharp.UserEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.UserFlagsChanged">UserFlagsChanged</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnUserJoined(BNSharp.UserEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.UserJoined">UserJoined</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnUserLeft(BNSharp.UserEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.UserLeft">UserLeft</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnUserProfileReceived(BNSharp.BattleNet.UserProfileEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.UserProfileReceived">UserProfileReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnUserShown(BNSharp.UserEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.UserShown">UserShown</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnUserSpoke(BNSharp.ChatMessageEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.UserSpoke">UserSpoke</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnWhisperReceived(BNSharp.ChatMessageEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.WhisperReceived">WhisperReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnWhisperSent(BNSharp.ChatMessageEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.WhisperSent">WhisperSent</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnWarcraftProfileReceived(BNSharp.BattleNet.Stats.WarcraftProfileEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.WarcraftProfileReceived">WarcraftProfileReceived</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnProfileLookupFailed(BNSharp.BattleNet.Stats.ProfileLookupFailedEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.ProfileLookupFailed">ProfileLookupFailed</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Plugins.IBattleNetEvents.OnAdChanged(BNSharp.BattleNet.AdChangedEventArgs)">
            <summary>
            Fires the <see cref="E:BNSharp.BattleNet.BattleNetClient.AdChanged">AdChanged</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.BattleNetClient.ParseData">
            <summary>
            Contains data from the receive thread that needs to be used by the parsing thread.
            </summary>
            <remarks>
            <para>To maximize efficiency, this class does not protect any of its members through properties.  It should only be used when
            implementing a custom handler for one or more messages.</para>
            </remarks>
        </member>
        <member name="F:BNSharp.BattleNet.BattleNetClient.ParseData.PacketID">
            <summary>
            Contains the packet ID associated with this data.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.BattleNetClient.ParseData.Length">
            <summary>
            Contains the length specified by Battle.net for this data, minus the four bytes used in the header.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.BattleNetClient.ParseData.Data">
            <summary>
            Contains the literal data sent from Battle.net.
            </summary>
        </member>
        <member name="T:BNSharp.Plugins.ParseCallback">
            <summary>
            Designates a callback method that can be used to parse a specific packet.  This delegate is not CLS-compliant.
            </summary>
            <param name="packetData">The contents of the packet.</param>
            <remarks>
            <para>This delegate should only be used by advanced developers when registering custom packet handlers with BN#.</para>
            <para>When overriding default behavior, the implementer should be careful to ensure to free the parse data.  This can be done by, when 
            bubbling the event, by setting the <see>BaseEventArgs.EventData</see> property.  Otherwise, call 
            <see>BufferPool.FreeBuffer</see> on the <see>BattleNetClientResources.IncomingBufferPool</see>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Net.DownloadStatusEventArgs">
            <summary>
            Contains download status information about a currently-executing Battle.net FTP request.  This class cannot be inherited.
            </summary>
            <seealso cref="T:BNSharp.MBNCSUtil.Net.DownloadStatusEventHandler"/>
            <seealso cref="E:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.FilePartDownloaded"/>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Net.DownloadStatusEventArgs.DownloadStatus">
            <summary>
            Gets the current length of the file that has been downloaded.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Net.DownloadStatusEventArgs.FileLength">
            <summary>
            Gets the total length of the file to download.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Net.DownloadStatusEventArgs.FileName">
            <summary>
            Gets the name of the file being downloaded.
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Net.DownloadStatusEventHandler">
            <summary>
            Indicates the method type that handles Battle.net FTP download status events.
            </summary>
            <param name="sender">The object that initiated this event.</param>
            <param name="e">Status information about the download.</param>
            <remarks>
            <para>The <c>sender</c> parameter is guaranteed to always be an instance of <see cref="T:BNSharp.MBNCSUtil.Net.BnFtpRequestBase">BnFtpRequestBase</see> (or a derived class).</para>
            </remarks>
        </member>
        <member name="T:BNSharp.ErrorType">
            <summary>
            Indicates the causes of errors that are provided through BN#.
            </summary>
        </member>
        <member name="F:BNSharp.ErrorType.None">
            <summary>
            No error occurred.
            </summary>
        </member>
        <member name="F:BNSharp.ErrorType.General">
            <summary>
            No additional error cause is available.
            </summary>
        </member>
        <member name="F:BNSharp.ErrorType.Warcraft3ServerValidationFailure">
            <summary>
            Indicates that the server was unable to provide evidence that it is really the server to which the client is connected.  Connection
            will continue, but you may be connecting to an illegitimate server, or someone may be attempting to impersonate your client.
            </summary>
        </member>
        <member name="F:BNSharp.ErrorType.WardenModuleFailure">
            <summary>
            Indicates that the designated Warden module failed to initialize.
            </summary>
        </member>
        <member name="F:BNSharp.ErrorType.AccountUpgradeUnsupported">
            <summary>
            Indicates that Battle.net requested an account upgrade, but this functionality is not available in BN#.
            </summary>
        </member>
        <member name="F:BNSharp.ErrorType.InvalidUsernameOrPassword">
            <summary>
            Indicates that the client provided an invalid username or password.
            </summary>
        </member>
        <member name="F:BNSharp.ErrorType.LoginServerProofFailed">
            <summary>
            Indicates that the server was unable to provide evidence that it knew the client password.  Connection will continue,
            but you may be connecting to an illegitimate server, or someone may be attempting to impersonate your client.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.ProfileRecordKeyType">
            <summary>
            Specifies the type of profile record keys that can be requested.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.ProfileRecordKeyType.Normal">
            <summary>
            Specifies Normal.  This is valid on Starcraft, Diablo, Warcraft II: Battle.net Edition, and Warcraft III.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.ProfileRecordKeyType.Ladder">
            <summary>
            Specifies Ladder.  This is valid on Starcraft, Diablo, and Warcraft II: Battle.net Edition.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.ProfileRecordKeyType.IronManLadder">
            <summary>
            Specifies an Iron Man Ladder.  This is only valid on Warcraft II: Battle.net Edition.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendUser">
            <summary>
            Represents a Battle.net friend user.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Friends.FriendUser.#ctor(System.Int32,System.String,BNSharp.BattleNet.Friends.FriendStatus,BNSharp.BattleNet.Friends.FriendLocation,BNSharp.BattleNet.Product,System.String)">
            <summary>
            Creates a new <see>FriendUser</see>.
            </summary>
            <param name="index">The 0-based index of the user's location.</param>
            <param name="accountName">The account name of the friend.</param>
            <param name="status">The friend's current status.</param>
            <param name="locationType">The friend's current location information.</param>
            <param name="product">The product with which the friend is currently logged on, otherwise <see langword="null" />.</param>
            <param name="location">The name of the friend's current location.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendUser.Index">
            <summary>
            Gets, and in derived classes sets, the index (0-based) of the user on the client's friends list.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given 
            the name <c>Index</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendUser.AccountName">
            <summary>
            Gets, and in derived classes sets, the account name of the friend.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given 
            the name <c>AccountName</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendUser.Product">
            <summary>
            Gets, and in derived classes sets, a reference to the product information about the user's current logged on state.
            </summary>
            <remarks>
            <para>This property will return <see langword="null" /> if the user is currently offline.</para>
            <para>When exposed under a WCF data contract, this property's backing store is given 
            the name <c>Product</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendUser.Status">
            <summary>
            Gets, and in derived classes sets, contextual information about the user's status.
            </summary>
            <remarks>
            <para>This property will return <see langword="null" /> if the user is currently offline.</para>
            <para>When exposed under a WCF data contract, this property's backing store is given 
            the name <c>Product</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendUser.LocationType">
            <summary>
            Gets, and in derived classes sets, the type of location information provided by Battle.net.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given 
            the name <c>LocationType</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendUser.Location">
            <summary>
            Gets, and in derived classes sets, the name of the location of the current user.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given 
            the name <c>Location</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Diablo2DifficultyLevel">
            <summary>
            Specifies the difficulty level for Diablo II games and characters.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2DifficultyLevel.Unknown">
            <summary>
            Specifies that the difficulty level is unrecognized.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2DifficultyLevel.Normal">
            <summary>
            Specifies the Normal difficulty level.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2DifficultyLevel.Nightmare">
            <summary>
            Specifies the Nightmare difficulty level.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Diablo2DifficultyLevel.Hell">
            <summary>
            Specifies the Hell difficulty level.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMemberStatus">
            <summary>
            Specifies the current status of a clan member.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanMemberStatus.Offline">
            <summary>
            Specifies that the user is offline.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanMemberStatus.Online">
            <summary>
            Specifies that the user is online but not in a channel or a game.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanMemberStatus.InChannel">
            <summary>
            Specifies that the user is in a channel.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanMemberStatus.InPublicGame">
            <summary>
            Specifies that the user is in a public game.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanMemberStatus.InPrivateGame">
            <summary>
            Specifies that the user is in a private game.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMemberListEventArgs">
            <summary>
            The event arguments for the clan member list notification.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanMemberListEventArgs.#ctor(BNSharp.BattleNet.Clans.ClanMember[])">
            <summary>
            Creates a new instance of <see>ClanMemberListEventArgs</see>.
            </summary>
            <param name="members">The clan members in the list.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMemberListEventArgs.Members">
            <summary>
            Gets the list of members received from Battle.net.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Members</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMemberListEventHandler">
            <summary>
            Specifies the contract for clan member list events.
            </summary>
            <param name="sender">The <see>BattleNetClient</see> connection that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.AccountCreationFailedEventArgs">
            <summary>
            Contains information about an account creation attempt that failed.
            </summary>
        </member>
        <member name="T:BNSharp.AccountCreationEventArgs">
            <summary>
            Contains information about an attempted account creation event.
            </summary>
        </member>
        <member name="M:BNSharp.AccountCreationEventArgs.#ctor(System.String)">
            <summary>
            Creates a new <see>AccountCreationEventArgs</see> for the specified account name.
            </summary>
            <param name="accountName">The name of the account being created.</param>
        </member>
        <member name="P:BNSharp.AccountCreationEventArgs.AccountName">
            <summary>
            Gets the name of the account being created.
            </summary>
        </member>
        <member name="M:BNSharp.AccountCreationFailedEventArgs.#ctor(System.String,BNSharp.CreationFailureReason)">
            <summary>
            Creates a new <see>AccountCreationFailedEventArgs</see> for the specifiec account.
            </summary>
            <param name="accountName">The name that failed to be created.</param>
            <param name="reason">The reason provided by Battle.net for the failure.</param>
        </member>
        <member name="P:BNSharp.AccountCreationFailedEventArgs.Reason">
            <summary>
            Gets the reason for the account creation failure.
            </summary>
        </member>
        <member name="T:BNSharp.AccountCreationFailedEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for account creation failure events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.MBNCSUtil.CheckRevision">
            <summary>
            Encompasses any revision check functionality for all Battle.net games.
            This class cannot be inherited.
            </summary>
            <remarks>
            This class provides all CheckRevision-related support, 
            including file checksumming and EXE version information.
            </remarks>
            <threadsafety>This type is safe for multithreaded operations.</threadsafety>
        </member>
        <member name="F:BNSharp.MBNCSUtil.CheckRevision.hashcodes">
            These are the hashcodes for the various .mpq files. 
        </member>
        <member name="M:BNSharp.MBNCSUtil.CheckRevision.ExtractMPQNumber(System.String)">
            <summary>
            Extracts the MPQ number from the MPQ specified by the Battle.net server.
            </summary>
            <remarks>
            <para></para>
            <para>For older CheckRevision calls, the MPQ number is a required parameter of the CheckRevision function.  Note that the MPQ number is simply the number represented
            in string format in the 8th position (index 7) of the string -- for example, in "IX86ver<b>1</b>.mpq", 1 is the version number.</para>
            </remarks>
            <param name="mpqName">The name of the MPQ file specified in the SID_AUTH_INFO message.</param>
            <returns>The number from 0 to 7 specifying the number in the MPQ file.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the name of the MPQ version file is less than 8 characters long.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the <i>mpqName</i> parameter is <b>null</b> (<b>Nothing</b> in Visual Basic).
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown if the <i>mpqName</i> parameter indicates a Lockdown DLL.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.CheckRevision.DoCheckRevision(System.String,System.String[],System.Int32)">
            <summary>
            Calculates the revision check for the specified files.
            </summary>
            <param name="valueString">The value string for the check revision function specified by Battle.net's SID_AUTH_INFO message.</param>
            <param name="files">The list of files for the given game client.  This parameter must be exactly three files long.</param>
            <param name="mpqNumber">The number of the MPQ file.  To extract this number, see the 
            <see cref="M:BNSharp.MBNCSUtil.CheckRevision.ExtractMPQNumber(System.String)">ExtractMPQNumber</see> method.</param>
            <returns>The checksum value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <i>valueString</i> or <i>files</i> parameters are <b>null</b>
            (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="files"/> is not a 3-string array, or if  
            <paramref name="mpqNumber"/> is outside of the range of 0 to 7, inclusive.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if one of the specified game files is not found.</exception>
            <exception cref="T:System.IO.IOException">Thrown in the event of a general I/O error.</exception>
            <remarks>
            <para>The file list for this is product-specific and order-specific:</para>
            <list type="table">
            	<listheader>
            		<term>Product</term>
            		<description>File list</description>
            	</listheader>
            	<item>
            		<term>Starcraft; Starcraft: Brood War</term>
            		<description>
            			<list type="bullet">
            				<item>
            					<description>Starcraft.exe</description>
            				</item>
            				<item>
            					<description>storm.dll</description>
            				</item>
            				<item>
            					<description>battle.snp</description>
            				</item>
            			</list>
            		</description>
            	</item>
            	<item>
            		<term>Warcraft II: Battle.net Edition</term>
            		<description>
            			<list type="bullet">
            				<item>
            					<description>Warcraft II BNE.exe</description>
            				</item>
            				<item>
            					<description>storm.dll</description>
            				</item>
            				<item>
            					<description>battle.snp</description>
            				</item>
            			</list>
            		</description>
            	</item>
            	<item>
            		<term>Diablo II; Diablo II: Lord of Destruction</term>
            		<description>
            			<list type="bullet">
            				<item>
            					<description>Game.exe</description>
            				</item>
            				<item>
            					<description>Bnclient.dll</description>
            				</item>
            				<item>
            					<description>D2Client.dll</description>
            				</item>
            			</list>
            		</description>
            	</item>
            	<item>
            		<term>Warcraft III: The Reign of Chaos; Warcraft III: The Frozen Throne</term>
            		<description>
            			<list type="bullet">
            				<item>
            					<description>War3.exe</description>
            				</item>
            				<item>
            					<description>storm.dll</description>
            				</item>
            				<item>
            					<description>Game.dll</description>
            				</item>
            			</list>
            		</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.CheckRevision.DoLockdownCheckRevision(System.Byte[],System.String[],System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Performs the Lockdown revision check.
            </summary>
            <param name="valueString">The value string parameter, not including the null terminator.</param>
            <param name="gameFiles">The three game files.  This parameter must be exactly three files long.</param>
            <param name="lockdownFile">The path to the lockdown file requested.</param>
            <param name="imageFile">The path to the screen dump.</param>
            <param name="version">[return value] The EXE version.</param>
            <param name="checksum">[return value] The EXE hash.</param>
            <returns>The "EXE Information" data.  This value should be null-terminated when being inserted into the authorization packet.</returns>
            <remarks>
            <para>The file list for this is product-specific and order-specific:</para>
            <list type="table">
            	<listheader>
            		<term>Product</term>
            		<description>File list</description>
            	</listheader>
            	<item>
            		<term>Starcraft; Starcraft: Brood War</term>
            		<description>
            			<list type="bullet">
            				<item>
            					<description>Starcraft.exe</description>
            				</item>
            				<item>
            					<description>storm.dll</description>
            				</item>
            				<item>
            					<description>battle.snp</description>
            				</item>
            			</list>
            		</description>
            	</item>
            	<item>
            		<term>Warcraft II: Battle.net Edition</term>
            		<description>
            			<list type="bullet">
            				<item>
            					<description>Warcraft II BNE.exe</description>
            				</item>
            				<item>
            					<description>storm.dll</description>
            				</item>
            				<item>
            					<description>battle.snp</description>
            				</item>
            			</list>
            		</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.CheckRevision.GetExeInfo(System.String,System.String@)">
            <summary>
            Gets EXE information for the specified file.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="exeInfoString">Returns the file's timestamp and other information.</param>
            <returns>The file's version.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <i>fileName</i> parameter is <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file specified by <i>fileName</i> does not exist in the specified path.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.CheckRevision.GetVersionByte(System.String)">
            <summary>
            Gets the current "version byte" for the specified product.
            </summary>
            <remarks>
            <para>Only the following product IDs can be used with the web service: STAR, SEXP, W2BN, D2DV, D2XP,
            WAR3, and W3XP.  Other product IDs will result an a <see cref="T:System.NotSupportedException">NotSupportedException</see>
            being thrown.</para>
            <para><span style="color: red;">This method is new and currently in testing.  W2BN, D2DV, and D2XP are currently
            unsupported.</span></para>
            </remarks>
            <param name="productID">The four-character product ID for the product in question.</param>
            <exception cref="T:System.NotSupportedException">Thrown in all cases.</exception>
            <returns>The version byte of the product.</returns>
        </member>
        <member name="P:BNSharp.MBNCSUtil.CheckRevision.AlwaysUseSlowCheck">
            <summary>
            Gets or sets whether to use the slow revision check.
            </summary>
            <remarks>
            <para>By default, the revision check operation for non-Lockdown clients uses dynamic compilation based on 
            the standard format of the revision check formula (<c>A=x B=y C=z 4 A=A?S B=B?C C=C?A A=A?B</c>).  If there
            is a compatibility problem, clients can disable the use of dynamic compilation by setting this property
            to <see langword="true"/>.</para>
            <para>In the current version of MBNCSUtil and BN#, setting this property to <see langword="true"/> has the effect of causing the
            revision check process to use the <see cref="F:BNSharp.MBNCSUtil.CheckRevisionOptimizationStrategy.LoadFilesOnDemand">LoadFilesOnDemand</see> 
            <see cref="P:BNSharp.MBNCSUtil.CheckRevision.OptimizationStrategy">optimization strategy</see>, regardless of the value of that property, to ensure 100% compatibility with
            the older version of the revision check formulas.  Future versions will vary according to that property.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.MBNCSUtil.CheckRevision.OptimizationStrategy">
            <summary>
            Gets or sets the optimization strategy used by the revision check file loader.
            </summary>
            <remarks>
            <para>For more information about the differences between the optimization strategies, see 
            <see>CheckRevisionOptimizationStrategy</see>.</para>
            <para>By default, this is set to <see>CheckRevisionOptimizationStrategy.PreloadAllFilesAndClearAfterUse</see>.
            </para>
            </remarks>
        </member>
        <member name="T:BNSharp.MBNCSUtil.CheckRevisionOptimizationStrategy">
            <summary>
            Specifies the optimization strategy that <see>CheckRevision</see> should use when loading files from disk.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.CheckRevisionOptimizationStrategy.PreloadAllFilesAndClearAfterUse">
            <summary>
            Reads all the files and inserts the appropriate padding before executing the revision check, allowing the 
            operation to execute in a single pass without (generally) needing to hit the disk.  This is the default 
            optimization strategy, and will use about 11mb of memory transitionally during the operation of the check,
            but will free it following the check.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.CheckRevisionOptimizationStrategy.PreloadAndPersistFiles">
            <summary>
            Reads all of the files and inserts the appropriate padding before executing the revision check, based on a 
            combination of the names of the files that are being used.  This allows the operation to execute in a single
            pass without needing to hit the disk.  When the revision check is completed, the file data are retained so 
            that future calls don't need to recombine the file data.  For clients that use classic revision check, this
            means that files will take about 11mb each.  For clients that use lockdown, because the lockdown file is part
            of the hashed file data, this may be up to about 200mb.  This strategy is probably ideal for applications 
            similar to BNLS that need to focus on serving revision check requests, and not for general client use.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.CheckRevisionOptimizationStrategy.LoadFilesOnDemand">
            <summary>
            Reads files one kilobyte at a time, as the revision check needs the file data to be read in.  This is probably 
            the slowest optimization strategy, but it probably will hit the disk more than once during the operation.
            It also uses the least amount of memory.
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.BncsPacket">
            <summary>
            Completes a <see cref="T:BNSharp.MBNCSUtil.DataBuffer">DataBuffer</see> implementation with the additional
            data used by the BNCS protocol.
            </summary>
            <example>
            <para>The following example illustrates creating a buffer that contains only the
            <b>SID_NULL</b> packet:</para>
            <para><i><b>Note</b>: this example assumes you have a 
            <see cref="T:System.Net.Sockets.Socket">Socket</see> object called "sck" in the 
            current context</i>.</para>
            <code language="C#">
            [C#]
            BncsPacket pckNull = new BncsPacket(0);
            sck.Send(pckNull.GetData(), 0, pckNull.Count, SocketFlags.None);
            </code>
            <code language="Visual Basic">
            [Visual Basic]
            Dim pckNull As New BncsPacket(0)
            sck.Send(pckNull.GetData(), 0, pckNull.Count, SocketFlags.None)
            </code>
            <code language="C++">
            [C++]
            BncsPacket ^pckNull = gcnew BncsPacket(0);
            sck-&gt;Send(pckNull-&gt;GetData(), 0, pckNull-&gt;Count, SocketFlags.None);
            </code>
            </example>
            <example>
            <para>The following example illustrates calculating the revision check (SID_AUTH_ACCONTLOGON) of Warcraft III:</para>
            <para><i><b>Note</b>: this example assumes you have a 
            <see cref="T:System.Net.Sockets.Socket">Socket</see> object called "sck" in the 
            current context</i>.</para>
            <code language="C#">
            [C#]
            BncsPacket pckLogin = new BncsPacket(0x53);
            NLS nls = new NLS(userName, password);
            nls.LoginAccount(pckLogin);
            sck.Send(pckLogin.GetData(), 0, pckLogin.Count, SocketFlags.None);
            </code>
            <code language="Visual Basic">
            [Visual Basic]
            Dim pckLogin As New BncsPacket(&amp;H51)
            Dim nls As New NLS(userName, password)
            nls.LoginAccount(pckLogin)
            sck.Send(pckLogin.GetData(), 0, pckLogin.Count, SocketFlags.None)
            </code>
            <code language="C++">
            [C++]
            // NOTE that userName and password must be System::String^, not char*!
            BncsPacket ^pckLogin = gcnew BncsPacket(0x51);
            NLS ^nls = gcnew NLS(userName, password);
            nls-&gt;LoginAccount(pckLogin)
            sck-&gt;Send(pckLogin-&gt;GetData(), 0, pckLogin-&gt;Count, SocketFlags.None);
            </code>
            </example>
        </member>
        <member name="T:BNSharp.MBNCSUtil.DataBuffer">
            <summary>
            Operates as a data buffer for network and file output.
            </summary>
            <remarks>
            <para>This class does not read data in any manner; for reading or receiving data, 
            use the <see cref="T:BNSharp.MBNCSUtil.DataReader">DataReader</see> or derived classes.</para>
            <para>This class always uses little-endian byte ordering.</para>
            <para>This class no longer supports operator overloading in C# via the binary addition (+) 
            operator.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.#ctor">
            <summary>
            Creates a new <b>DataBuffer</b>.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.Boolean)">
            <summary>
            Inserts the specified Boolean value into the buffer.
            </summary>
            <param name="b">The value to insert.</param>
            <remarks>
            This method inserts a 32-bit value of 1 or 0 based on the value of the 
            parameter: 1 if the value is <b>true</b>, or otherwise 0.
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertBoolean(System.Boolean)">
            <summary>
            Inserts the specified Boolean value into the buffer.
            </summary>
            <param name="b">The value to insert.</param>
            <remarks>
            This method inserts a 32-bit value of 1 or 0 based on the value of the 
            parameter: 1 if the value is <b>true</b>, or otherwise 0.
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.Byte)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="b">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertByte(System.Byte)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="b">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.SByte)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <remarks>This method is not CLS-compliant.</remarks>
            <param name="b">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertSByte(System.SByte)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <remarks>This method is not CLS-compliant.</remarks>
            <param name="b">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.Byte[])">
            <summary>
            Inserts the specified byte array into the buffer.
            </summary>
            <param name="b">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertByteArray(System.Byte[])">
            <summary>
            Inserts the specified byte array into the buffer.
            </summary>
            <param name="b">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.SByte[])">
            <summary>
            Inserts the specified byte array into the buffer.
            </summary>
            <param name="b">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertSByteArray(System.SByte[])">
            <summary>
            Inserts the specified byte array into the buffer.
            </summary>
            <param name="b">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.Int16)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="s">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertInt16(System.Int16)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="s">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.UInt16)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <remarks>This method is not CLS-compliant.</remarks>
            <param name="s">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertUInt16(System.UInt16)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <remarks>This method is not CLS-compliant.</remarks>
            <param name="s">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.Int16[])">
            <summary>
            Inserts the specified 16-bit data array into the buffer.
            </summary>
            <param name="s">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertInt16Array(System.Int16[])">
            <summary>
            Inserts the specified 16-bit data array into the buffer.
            </summary>
            <param name="s">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.UInt16[])">
            <summary>
            Inserts the specified 16-bit data array into the buffer.
            </summary>
            <param name="s">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertUInt16Array(System.UInt16[])">
            <summary>
            Inserts the specified 16-bit data array into the buffer.
            </summary>
            <param name="s">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.Int32)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="i">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertInt32(System.Int32)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="i">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.UInt32)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="i">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertUInt32(System.UInt32)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="i">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.Int32[])">
            <summary>
            Inserts the specified 32-bit data array into the buffer.
            </summary>
            <param name="i">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertInt32Array(System.Int32[])">
            <summary>
            Inserts the specified 32-bit data array into the buffer.
            </summary>
            <param name="i">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.UInt32[])">
            <summary>
            Inserts the specified 32-bit data array into the buffer.
            </summary>
            <param name="i">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertUInt32Array(System.UInt32[])">
            <summary>
            Inserts the specified 32-bit data array into the buffer.
            </summary>
            <param name="i">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.Int64)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="l">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertInt64(System.Int64)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="l">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.UInt64)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="l">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertUInt64(System.UInt64)">
            <summary>
            Inserts the specified value into the buffer.
            </summary>
            <param name="l">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.Int64[])">
            <summary>
            Inserts the specified 64-bit data array into the buffer.
            </summary>
            <param name="l">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertInt64Array(System.Int64[])">
            <summary>
            Inserts the specified 64-bit data array into the buffer.
            </summary>
            <param name="l">The value to insert.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Insert(System.UInt64[])">
            <summary>
            Inserts the specified 64-bit data array into the buffer.
            </summary>
            <param name="l">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertUInt64Array(System.UInt64[])">
            <summary>
            Inserts the specified 64-bit data array into the buffer.
            </summary>
            <param name="l">The value to insert.</param>
            <remarks>This method is not CLS-compliant.</remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertCString(System.String)">
            <summary>
            Inserts the specified value into the buffer as a C-style null-terminated 
            ASCII string.
            </summary>
            <param name="str">The string value to insert.</param>
            <remarks>
            <para>This method inserts a string terminated by a single null (0) byte.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either <c>str</c> or <c>enc</c> were <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertCString(System.String,System.Text.Encoding)">
            <summary>
            Inserts the specified value into the buffer as a C-style null-terminated
            string using the specified encoding.
            </summary>
            <param name="enc">The byte encoding to use.</param>
            <param name="str">The string value to insert.</param>
            <remarks>
            <para>This method inserts a string terminated by a null character.  For 
            8-bit character encodings such as ASCII, this null character is also 8 bits.
            For 16-bit character encodings such as Unicode, this null character is also
            16 bits.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either <c>str</c> or <c>enc</c> were <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertPascalString(System.String)">
            <summary>
            Inserts the specified value into the buffer as a pascal-style ASCII string.
            </summary>
            <param name="str">The string value to insert.</param>
            <remarks>
            <para>This method inserts a string prefixed by the total number of characters
            in the string.  At most a string may be 255 characters.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either <c>str</c> or <c>enc</c> were <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The length of <c>str</c> was too great; maximum string length is 255 characters.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertPascalString(System.String,System.Text.Encoding)">
            <summary>
            Inserts the specified value into the buffer as a pascal-style string using 
            the specified encoding.
            </summary>
            <param name="enc">The encoding to use.</param>
            <param name="str">The string value to insert.</param>
            <remarks>
            <para>This method inserts a string prefixed by the total number of characters
            in the string.  At most a string may be 255 characters.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either <c>str</c> or <c>enc</c> were <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The length of <c>str</c> was too great; maximum string length is 255 characters.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertWidePascalString(System.String)">
            <summary>
            Inserts the specified value into the buffer as a wide-pascal-style ASCII
            string.
            </summary>
            <param name="str">The string value to insert.</param>
            <remarks>
            <para>This method inserts a string prefixed by the total number of characters
            in the string.  At most a string may be 65,535 characters.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either <c>str</c> or <c>enc</c> were <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The length of <c>str</c> was too great; maximum string length is 65,535 characters.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertWidePascalString(System.String,System.Text.Encoding)">
            <summary>
            Inserts the specified value into the buffer as a wide-pascal-style string
            using the specified encoding.
            </summary>
            <param name="enc">The encoding to use.</param>
            <param name="str">The string value to insert.</param>
            <remarks>
            <para>This method inserts a string prefixed by the total number of characters
            in the string.  At most a string may be 65,535 characters.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either <c>str</c> or <c>enc</c> were <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The length of <c>str</c> was too great; maximum string length is 65,535 characters.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertDwordString(System.String)">
            <summary>
            Inserts the specified value into the buffer as a 32-bit-style string using 
            null bytes as the default padding.
            </summary>
            <remarks>
            <para>This method inserts a string with the maximum length of 4 into the 
            buffer, reversed.  This mimics the C-style declarations of 4-character 
            integer literals:</para>
            <code>unsigned long int star_product = 'STAR';</code>
            <para>which results in <c>RATS</c> being in memory.</para>
            </remarks>
            <param name="str">The string which may be at most 4 characters.</param>
            <exception cref="T:System.ArgumentNullException">The <c>str</c> parameter was <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The length of <c>str</c> was too great; maximum string length is 4 characters.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.InsertDwordString(System.String,System.Byte)">
            <summary>
            Inserts the specified value into the buffer as a 32-bit-style string using 
            the specified byte as padding.
            </summary>
            <remarks>
            <para>This method inserts a string with the maximum length of 4 into the 
            buffer, reversed.  This mimics the C-style declarations of 4-character 
            integer literals:</para>
            <code>unsigned long int star_product = 'STAR';</code>
            <para>which results in <c>RATS</c> being in memory.</para>
            </remarks>
            <param name="str">The string which may be at most 4 characters.</param>
            <param name="padding">The byte which shall be used to pad the string if it is less than 4 characters long.</param>
            <exception cref="T:System.ArgumentNullException">The <c>str</c> parameter was <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The length of <c>str</c> was too great; maximum string length is 4 characters.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.GetData">
            <summary>
            Gets the data currently contained in the buffer.
            </summary>
            <returns>A byte array representing the data in the buffer.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.WriteToOutputStream(System.IO.Stream)">
            <summary>
            Writes the data currently contained in the buffer to the specified stream.
            </summary>
            <param name="str">The stream to which to write the data.</param>
            <returns>The number of bytes written to the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.ToString">
            <summary>
            Gets a hex representation of this buffer.
            </summary>
            <returns>A string representing this buffer's contents in hexadecimal notation.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Dispose">
            <summary>
            Disposes the object, freeing any unmanaged and managed resources.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataBuffer.Dispose(System.Boolean)">
            <summary>
            Disposes the object, freeing any unmanaged and optionally managed resources.
            </summary>
            <param name="disposing"><see langword="true" /> to dispose managed resources; otherwise <see langword="false" /> to only
            dispose unmanaged resources.</param>
        </member>
        <member name="P:BNSharp.MBNCSUtil.DataBuffer.UnderlyingBuffer">
            <summary>
            Gets the contents of the underlying buffer.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.DataBuffer.Count">
            <summary>
            Gets the length of data in the buffer.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.BncsPacket.#ctor(System.Byte)">
            <summary>
            Creates a new BNCS packet with the specified packet ID.
            </summary>
            <param name="id">The BNCS packet ID.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.BncsPacket.GetData">
            <summary>
            Gets the data in this packet, including the four-byte header.
            </summary>
            <returns>A byte array containing the packet data.</returns>
        </member>
        <member name="P:BNSharp.MBNCSUtil.BncsPacket.UnderlyingBuffer">
            <summary>
            Gets the contents of the underlying buffer.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.BncsPacket.PacketID">
            <summary>
            Gets or sets the ID of the packet as it was specified when it was created.
            </summary>
        </member>
        <member name="T:BNSharp.ErrorEventHandler">
            <summary>
            Specifies the contract for event handlers wishing to listen to the error event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.ErrorEventArgs">
            <summary>
            Specifies error event information.
            </summary>
        </member>
        <member name="M:BNSharp.ErrorEventArgs.#ctor(BNSharp.ErrorType,System.String,System.Boolean)">
            <summary>
            Creates a new instance of <see>ErrorEventArgs</see>.
            </summary>
            <param name="reason">The specific cause of the error message.</param>
            <param name="error">The error message.</param>
            <param name="disconnecting">Whether it is causing the client to disconnect.</param>
        </member>
        <member name="P:BNSharp.ErrorEventArgs.Reason">
            <summary>
            Gets the programmatic reason for the error.
            </summary>
        </member>
        <member name="P:BNSharp.ErrorEventArgs.Error">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:BNSharp.ErrorEventArgs.IsDisconnecting">
            <summary>
            Whether it is causing the client to disconnect.
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.WardenEncryptionContext">
            <summary>
            Handles the encryption and decryption of Warden modules for a given connection.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.WardenEncryptionContext.#ctor(System.Int32)">
            <summary>
            Creates a new <see>WardenEncryptionContext</see> with the specified seed.
            </summary>
            <param name="keyHashPart">The value with which to seed the encryption keys.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.WardenEncryptionContext.Encrypt(System.Byte[])">
            <summary>
            Encrypts an entire array.
            </summary>
            <param name="data">The data to encrypt.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is <see langword="null"/>.</exception>
            <returns>A new, encrypted array.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.WardenEncryptionContext.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts a block of data using the current encryption key.
            </summary>
            <param name="data">The data to encrypt.</param>
            <param name="start">The starting 0-based index to begin encryption.</param>
            <param name="length">The amount of data to encrypt.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="start"/> is negative, or if <paramref name="start"/> and <paramref name="length"/>
            sum to greater than the length of <paramref name="data"/>.</exception>
            <returns>A new, encrypted array.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.WardenEncryptionContext.Decrypt(System.Byte[])">
            <summary>
            Decrypts an entire array.
            </summary>
            <param name="data">The data to encrypt.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is <see langword="null"/>.</exception>
            <returns>A new, decrypted array.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.WardenEncryptionContext.Decrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts a block of data using the current decryption key.
            </summary>
            <param name="data">The data to decrypt.</param>
            <param name="start">The starting 0-based index to begin decryption.</param>
            <param name="length">The amount of data to decrypt.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="data"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="start"/> is negative, or if <paramref name="start"/> and <paramref name="length"/>
            sum to greater than the length of <paramref name="data"/>.</exception>
            <returns>A new, decrypted array.</returns>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.WarcraftLadderType">
            <summary>
            Specifies the ladder types tracked by Warcraft III ladder stats.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.WarcraftLadderType.FreeForAll">
            <summary>
            Specifies free-for-all ladder games.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.WarcraftLadderType.Solo">
            <summary>
            Specifies solo ladder games.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.WarcraftLadderType.Team">
            <summary>
            Specifies random-team ladder games.
            </summary>
        </member>
        <member name="T:BNSharp.Plugins.IPacketPriorityProvider">
            <summary>
            When implemented, allows a class to provide custom packet parsing priorities for BN# via the 
            <see cref="M:BNSharp.BattleNet.BattleNetClient.RegisterCustomPacketPriorities(BNSharp.Plugins.IPacketPriorityProvider)">RegisterCustomPacketPriorities</see> method.
            </summary>
            <remarks>
            <para>BN# uses a layered approach to custom packet priorities.  By default, all packet priorities 
            are Normal.  Registering a new packet priority provider will allow the new provider to allow High or Low 
            priorities to be defined without needing to define priorities for all packets.</para>
            <para>Once a lookup is performed for a given packet ID, the result is cached and reused.  Consequently, changing
            the priority value returned across multiple calls will only be reflected if the registered priority providers
            change across calls, at which point the cache is invalidated.</para>
            <para>The priority providers are checked in the most-recently-registered order; so consequently, if three 
            priority providers are registered in the order A, B, then C, then C will be checked first.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.Plugins.IPacketPriorityProvider.Defines(BNSharp.BncsPacketId)">
            <summary>
            Determines whether the packet provider specifies a priority for the given packet ID.
            </summary>
            <param name="packetToSearch">The ID of the packet to look up.</param>
            <returns><see langword="true" /> if the packet ID is supported by this priority provider; otherwise 
            <see langword="false" />.</returns>
        </member>
        <member name="M:BNSharp.Plugins.IPacketPriorityProvider.GetPriority(BNSharp.BncsPacketId)">
            <summary>
            Gets a priority for the specified packet ID.
            </summary>
            <param name="packetToSearch">The packet ID to look up.</param>
            <returns>A <see>Priority</see> for the specified packet ID that determines its parse order.</returns>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Net.BnFtpVersion2Request">
            <summary>
            Represents a Battle.net FTP (BnFTP) file transfer request for Version 2 products.
            </summary>
            <remarks>
            <para>This class is only valid for Warcraft III: The Reign of Chaos and Warcraft III: The Frozen Throne.
            For Starcraft Retail, Starcraft: Brood War, Diablo II Retail, Diablo II: Lord of Destruction, and Warcraft
            II: Battle.net Edition clients, use the <see cref="T:BNSharp.MBNCSUtil.Net.BnFtpVersion1Request">BnFtpVersion1Request</see>
            class.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Net.BnFtpVersion2Request.#ctor(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Creates a standard Version 2 Battle.net FTP request.
            </summary>
            <param name="productId">The four-character identifier for the product being emulated by this request.</param>
            <param name="fileName">The full or relative path to the file as it is to be stored on the local 
            machine.  The name portion of the file must be the filename being requested from the service.</param>
            <param name="fileTime">The last-write time of the file.  If the file is not available, this parameter
            can be <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="cdKey">The CD key of the client being emulated.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Net.BnFtpVersion2Request.#ctor(System.String,System.String,System.DateTime,System.String,System.Int32,System.String)">
            <summary>
            Creates a Version 2 Battle.net FTP request specifically for banner ad downloads.
            </summary>
            <param name="product">The four-character identifier for the product being emulated by this request.</param>
            <param name="fileName">The full or relative path to the file as it is to be stored on the local 
            machine.  The name portion of the file must be the filename being requested from the service.</param>
            <param name="fileTime">The last-write time of the file.  If the file is not available, this parameter
            can be <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="cdKey">The CD key of the client being emulated.</param>
            <param name="adId">The banner ID provided by Battle.net's ad notice message.</param>
            <param name="adFileExtension">The banner filename extension provided by Battle.net's ad notice message.</param>
            <remarks>
            <para>Although it is not specifically required to download banner ads, it is recommended for forward-compatibility
            with the Battle.net protocol that this constructor is used.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Net.BnFtpVersion2Request.ExecuteRequest">
            <summary>
            Executes the BnFTP request, downloading the file to where <see cref="P:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.LocalFileName">LocalFileName</see>
            specifies, and closes the connection.
            </summary>
            <remarks>
            <para>By default, <c>LocalFileName</c> is the same name as the remote file, which will cause the file
            to be saved in the local application path.  The desired location of the file must be set before 
            <b>ExecuteRequest</b> is called.</para>
            </remarks>
            <exception cref="T:System.IO.IOException">Thrown if the local file cannot be written.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown if the remote host closes the connection prematurely.</exception>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Data.MpqException">
            <summary>
            Wraps an I/O exception with MPQ-specific errors.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqException.#ctor">
            <summary>
            Creates an MPQ exception with no exception information.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqException.#ctor(System.String)">
            <summary>
            Creates an MPQ exception with the specified message.
            </summary>
            <param name="message">The error message related to the exception.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an MPQ exception with the specified message and inner exception.
            </summary>
            <param name="message">The error message related to the exception.</param>
            <param name="inner">A related exception that caused this exception.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an MPQ exception from serialized data.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization streaming context.</param>
        </member>
        <member name="T:BNSharp.ChatEventType">
            <summary>
            Specifies types of chat events that may occur.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.None">
            <summary>
            Specifies an invalid chat event type.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.UserInChannel">
            <summary>
            Indicates that another user was already in the current channel when it was joined by the client.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.UserJoinedChannel">
            <summary>
            Indicates that another user has joined the current channel.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.UserLeftChannel">
            <summary>
            Indicates that another user has left the current channel.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.WhisperReceived">
            <summary>
            Indicates that another user has whispered the client.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.Talk">
            <summary>
            Indicates that a user in the current channel spoke.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.Broadcast">
            <summary>
            Indicates that a server operator has broadcast a message.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.NewChannelJoined">
            <summary>
            Indicates that the client joined a new channel.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.UserFlagsChanged">
            <summary>
            Indicates that a user's channel properties have been updated.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.WhisperSent">
            <summary>
            Indicates that a whisper was sent.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.ChannelFull">
            <summary>
            Indicates that a channel join failed because the channel is full.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.ChannelDNE">
            <summary>
            Indicates that a channel view failed because the channel does not exist.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.ChannelRestricted">
            <summary>
            Indicates that a channel join failed because the channel is restricted.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.Information">
            <summary>
            Indicates that the server is relaying information, perhaps from a command.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.Error">
            <summary>
            Indicates that there was a command error.
            </summary>
        </member>
        <member name="F:BNSharp.ChatEventType.Emote">
            <summary>
            Indicates that a user has performed an emote.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.Warcraft3IconRace">
            <summary>
            The list of races that are supported by Warcraft III for Battle.net.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.Warcraft3IconRace.Unknown">
            <summary>
            Specifies that the icon race sent from Battle.net was unrecognized.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.Warcraft3IconRace.Random">
            <summary>
            Specifies that a user's icon is based on the random list.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.Warcraft3IconRace.Tournament">
            <summary>
            Specifies that a user's icon is based on the tournament list.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.Warcraft3IconRace.Human">
            <summary>
            Specifies that a user's icon is based on the human list.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.Warcraft3IconRace.Orc">
            <summary>
            Specifies that a user's icon is based on the orc list.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.Warcraft3IconRace.NightElf">
            <summary>
            Specifies that a user's icon is based on the night elf list.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.Warcraft3IconRace.Undead">
            <summary>
            Specifies that a user's icon is based on the undead list.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.ProfileLookupFailedEventArgs">
            <summary>
            Contains information about when a Warcraft 3 profile lookup failed.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.ProfileLookupFailedEventArgs.#ctor(System.String,BNSharp.BattleNet.Product)">
            <summary>
            Creates a new <see>ProfileLookupFailedEventArgs</see>.
            </summary>
            <param name="userName">The name of the user whose profile was looked.</param>
            <param name="product">The product for the request.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="userName"/> is <see langword="null"/> or empty, or if <paramref name="Product"/>
            is <see langword="null"/>.</exception>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ProfileLookupFailedEventArgs.Username">
            <summary>
            Gets the username of the requested profile.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ProfileLookupFailedEventArgs.Product">
            <summary>
            Gets the product with which the request failed.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.ProfileLookupFailedEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for profile lookup failure events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanDisbandEventArgs">
            <summary>
            Contains information about an attempt to disband the client's clan.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanDisbandEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a new <see>ClanDisbandEventArgs</see>.
            </summary>
            <param name="disbandSucceeded">Whether the disband succeeded.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanDisbandEventArgs.DisbandSucceeded">
            <summary>
            Gets whether the disband succeeded.
            </summary>
            <remarks>
            <para>The disband may fail if the client is not the clan leader, or if the clan is not at least one week old.</para>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Succeeded</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanDisbandEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for clan disband events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.JoinMethod">
            <summary>
            Specifies functionality differences when instructing the client to join a channel.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.JoinMethod.Default">
            <summary>
            Specifies the default channel join.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.JoinMethod.NoCreate">
            <summary>
            Joins the channel only if it is not empty.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.JoinMethod.FirstJoin">
            <summary>
            Joins the client's product-specific channel and is sent only upon logging in.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.JoinMethod.Forced">
            <summary>
            Sent when leaving a game or joining an empty public channel from the channels list.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.JoinMethod.FirstJoinDiablo2">
            <summary>
            Equivalent to <see>FirstJoin</see>, but specific to Diablo 2 clients.
            </summary>
        </member>
        <member name="T:BNSharp.AccountCreationEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for account creation events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Data.MpqArchive">
            <summary>
            Represents an MPQ archive.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqArchive.#ctor">
            <summary>
            Creates a new <see>MpqArchive</see>.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqArchive.OpenFile(System.String)">
            <summary>
            Opens the specified file contained within the MPQ.
            </summary>
            <param name="mpqFilePath">The path to the file relative to the MPQ root.</param>
            <returns>An <see cref="T:BNSharp.MBNCSUtil.Data.MpqFileStream">MpqFileStream</see> to the file within the MPQ.</returns>
            <exception cref="T:BNSharp.MBNCSUtil.Data.MpqException">Thrown if the file is not found or there is a problem reading from the MPQ.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>mpqFilePath</c> is <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqArchive.ContainsFile(System.String)">
            <summary>
            Determines whether the archive contains the specified file.
            </summary>
            <param name="fileName">The path to the file relative to the MPQ root.</param>
            <returns><b>True</b> if the file is contained within the MPQ; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqArchive.SaveToPath(System.String,System.String)">
            <summary>
            Saves the specified file to the provided path.
            </summary>
            <param name="mpqFileName">The fully-qualified name of the file in the MPQ.</param>
            <param name="pathBase">The path to which to save the file.</param>
            <remarks>
            <para>The file is saved as an immediate child of the path specified in <paramref name="pathBase"/>.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqArchive.SaveToPath(System.String,System.String,System.Boolean)">
            <summary>
            Saves the specified file to the specified path, optionally expanding the paths used in the MPQ.
            </summary>
            <param name="mpqFileName">The fully-qualified name of the file in the MPQ.</param>
            <param name="pathBase">The root path to which to save the file.</param>
            <param name="useFullMpqPath">Whether to create child directories based on the path to the file in the MPQ.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqArchive.Finalize">
            <summary>
            Called when the .NET Framework is removing this object from memory.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqArchive.Dispose">
            <summary>
            Disposes this archive.
            </summary>
            <remarks>
            <para>If you call Dispose on an archive you do not need to call <see cref="M:BNSharp.MBNCSUtil.Data.MpqServices.CloseArchive(BNSharp.MBNCSUtil.Data.MpqArchive)">MpqServices.CloseArchive</see> to close it.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqArchive.Dispose(System.Boolean)">
            <summary>
            Cleans up unmanaged resources used by this archive.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if it is being finalized.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqArchive.GetListFile">
            <summary>
            Gets the full text of the MPQ list file.
            </summary>
            <remarks>
            <para>In later versions of Blizzard's games, the developers included a file called "(listfile)" in 
            most MPQ archives identifying the names of the files contained in the MPQ (since they are hashed and
            therefore unavailable otherwise).</para>
            </remarks>
            <returns>A string containing the full text of the list file.</returns>
            <exception cref="T:BNSharp.MBNCSUtil.Data.MpqException">Thrown if the list file is not located.</exception>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Data.ImageParser">
            <summary>
            When implemented in a derived class, allows a custom image codec to be parsed to retrieve a .NET <see>Image</see> object.
            </summary>
            <remarks>
            <para>Because of differences in file type and purpose, this class does not support working with images from .BNI files found in 
            Starcraft or Warcraft II: Battle.net Edition.  To use those files, use the <see>BniFileParser</see> class instead.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.ImageParser.#ctor">
            <summary>
            Creates a new <see>ImageParser</see>.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.ImageParser.GetSizeOfMipmap(System.Int32)">
            <summary>
            Gets the size of the mipmap at the specified index.
            </summary>
            <param name="mipmapIndex">The mipmap index.  This value must be non-negative and less than the value reported by 
            the <see>NumberOfMipmaps</see> property.</param>
            <returns>A <see>Size</see> containing the dimensions of the mipmap at that index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="mipmapIndex"/> is out of bounds.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.ImageParser.GetMipmapImage(System.Int32)">
            <summary>
            Gets a new <see>Image</see> of the mipmap at the specified index.
            </summary>
            <param name="mipmapIndex">The mipmap index.  This value must be non-negative and less than the value reported by 
            the <see>NumberOfMipmaps</see> property.</param>
            <returns>An <see>Image</see> representation of the mipmap at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="mipmapIndex"/> is out of bounds.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.ImageParser.Dispose">
            <summary>
            Disposes the parser, cleaning up managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.ImageParser.Dispose(System.Boolean)">
            <summary>
            Disposes the parser, cleaning up unmanaged and optionally managed resources.
            </summary>
            <param name="disposing">Specifies whether to clean up managed resources.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.ImageParser.Create(System.String)">
            <summary>
            Creates a new <see>ImageParser</see> for the file at the specified path.
            </summary>
            <param name="path">The file to open.</param>
            <returns>An <see>ImageParser</see> ready to present images.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if <paramref name="path"/> is not found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the user does not have permission to open the file at 
            <paramref name="path"/>.</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the file format was invalid.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="path"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.ImageParser.Create(System.IO.Stream)">
            <summary>
            Creates a new <see>ImageParser</see> for the specified stream.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>An <see>ImageParser</see> ready to present images.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified stream cannot seek.</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the file format was invalid.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.ImageParser.NumberOfMipmaps">
            <summary>
            Gets the number of mipmaps contained in this image.
            </summary>
        </member>
        <member name="T:BNSharp.BncsPacketId">
            <summary>
            Specifies symbolic name IDs for Battle.net binary protocol messages.
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.Null">
            <summary>
            Specifies SID_NULL (0x00)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.StopAdv">
            <summary>
            Specifies SID_STOPADV (0x02)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.StartAdvEx">
            <summary>
            Specifies SID_STARTADVEX (0x08)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.GetAdvListEx">
            <summary>
            Specifies SID_GETADVLISTEX (0x09)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.EnterChat">
            <summary>
            Specifies SID_ENTERCHAT (0x0a)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.GetChannelList">
            <summary>
            Specifies SID_GETCHANNELLIST (0x0b)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.JoinChannel">
            <summary>
            Specifies SID_JOINCHANNEL (0x0c)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ChatCommand">
            <summary>
            Specifies SID_CHATCOMMAND (0x0e)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ChatEvent">
            <summary>
            Specifies SID_CHATEVENT (0x0f)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.LeaveChat">
            <summary>
            Specifies SID_LEAVECHAT (0x10)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.FloodDetected">
            <summary>
            Specifies SID_FLOODDETECTED (0x13)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.UdpPingResponse">
            <summary>
            Specifies SID_UDPPINGRESPONSE (0x14)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.CheckAd">
            <summary>
            Specifies SID_CHECKAD (0x15)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClickAd">
            <summary>
            Specifies SID_CLICKAD (0x16)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.MessageBox">
            <summary>
            Specifies SID_MESSAGEBOX (0x19)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.StartAdvEx3">
            <summary>
            Specifies SID_STARTADVEX3 (0x1c)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.LoginChallengeEx">
            <summary>
            Specifies SID_LOGONCHALLENGEEX (0x1d)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.LeaveGame">
            <summary>
            Specifies SID_LEAVEGAME (0x1f)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.DisplayAd">
            <summary>
            Specifies SID_DISPLAYAD (0x21)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.NotifyJoin">
            <summary>
            Specifies SID_NOTIFYJOIN (0x22)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.Ping">
            <summary>
            Specifies SID_PING (0x25)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ReadUserData">
            <summary>
            Specifies SID_READUSERDATA (0x26)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.WriteUserData">
            <summary>
            Specifies SID_WRITEUSERDATA (0x27)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.LogonChallenge">
            <summary>
            Specifies SID_LOGONCHALLENGE (0x28)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.LogonResponse">
            <summary>
            Specifies SID_LOGONRESPONSE (0x29)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.CreateAccount">
            <summary>
            Specifies SID_CREATEACCOUNT (0x2a)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.GameResult">
            <summary>
            Specifies SID_GAMERESULT (0x2c)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.GetIconData">
            <summary>
            Specifies SID_GETICONDATA (0x2d)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.GetLadderData">
            <summary>
            Specifies SID_GETLADDERDATA (0x2e)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.FindLadderUser">
            <summary>
            Specifies SID_FINDLADDERUSER (0x2f)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.CdKey">
            <summary>
            Specifies SID_CDKEY (0x30)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ChangePassword">
            <summary>
            Specifies SID_CHANGEPASSWORD (0x31)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.QueryRealms">
            <summary>
            Specifies SID_QUERYREALMS (0x34)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.Profile">
            <summary>
            Specifies SID_PROFILE (0x35)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.CdKey2">
            <summary>
            Specifies SID_CDKEY2 (0x36)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.LogonResponse2">
            <summary>
            Specifies SID_LOGONRESPONSE2 (0x3a)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.CreateAccount2">
            <summary>
            Specifies SID_CREATEACCOUNT2 (0x3d)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.LogonRealmEx">
            <summary>
            Specifies SID_LOGONREALMEX (0x3e)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.QueryRealms2">
            <summary>
            Specifies SID_QUERYREALMS2 (0x40)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.QueryAdUrl">
            <summary>
            Specifies SID_QUERYADURL (0x41)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.WarcraftGeneral">
            <summary>
            Specifies SID_WARCRAFTGENERAL (0x44)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.NetGamePort">
            <summary>
            Specifies SID_NETGAMEPORT (0x45)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.NewsInfo">
            <summary>
            Specifies SID_NEWSINFO (0x46)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.OptionalWork">
            <summary>
            Specifies SID_OPTIONALWORK (0x4a)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ExtraWork">
            <summary>
            Specifies SID_EXTRAWORK (0x4b)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.RequiredWork">
            <summary>
            Specifies SID_REQUIREDWORK (0x4c)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.AuthInfo">
            <summary>
            Specifies SID_AUTHINFO (0x50)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.AuthCheck">
            <summary>
            Specifies SID_AUTHCHECK (0x51)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.AuthAccountCreate">
            <summary>
            Specifies SID_AUTHACCOUNTCREATE (0x52)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.AuthAccountLogon">
            <summary>
            Specifies SID_AUTHACCOUNTLOGON (0x53)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.AuthAccountLogonProof">
            <summary>
            Specifies SID_AUTHACCOUNTLOGONPROOF (0x54)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.AuthAccountChange">
            <summary>
            Specifies SID_AUTHACCOUNTCHANGE (0x55)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.AuthAccountChangeProof">
            <summary>
            Specifies SID_AUTHACCOUNTCHANGEPROOF (0x56)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.AuthAccountUpgrade">
            <summary>
            Specifies SID_AUTHACCOUNTUPGRADE (0x57)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.AuthAccountUpgradeProof">
            <summary>
            Specifies SID_AUTHACCOUNTUPGRADEPROOF (0x58)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.SetEmail">
            <summary>
            Specifies SID_SETEMAIL (0x59)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ResetPassword">
            <summary>
            Specifies SID_RESETPASSWORD (0x5a)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ChangeEmail">
            <summary>
            Specifies SID_CHANGEEMAIL (0x5b)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.SwitchProduct">
            <summary>
            Specifies SID_SWITCHPRODUCT (0x5c)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.Warden">
            <summary>
            Specifies SID_WARDEN (0x5e)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.GamePlayerSearch">
            <summary>
            Specifies SID_GAMEPLAYERSEARCH (0x60)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.FriendsList">
            <summary>
            Specifies SID_FRIENDSLIST (0x65)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.FriendsUpdate">
            <summary>
            Specifies SID_FRIENDUPDATED (0x66)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.FriendsAdd">
            <summary>
            Specifies SID_FRIENDADDED (0x67)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.FriendsRemove">
            <summary>
            Specifies SID_FRIENDREMOVED (0x68)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.FriendsPosition">
            <summary>
            Specifies SID_FRIENDPOSITION (0x69).
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanFindCandidates">
            <summary>
            Specifies SID_CLANFINDCANDIDATES (0x70)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanInviteMultiple">
            <summary>
            Specifies SID_CLANINVITEMULTIPLE (0x71)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanCreationInvitation">
            <summary>
            Specifies SID_CLANCREATIONINVITATION (0x72)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanDisband">
            <summary>
            Specifies SID_CLANDISBAND (0x73)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanMakeChieftan">
            <summary>
            Specifies SID_CLANMAKECHEIFTAN (0x74)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanInfo">
            <summary>
            Specifies SID_CLANINFO (0x75)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanQuitNotify">
            <summary>
            Specifies SID_CLANQUITNOTIFY (0x76)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanInvitation">
            <summary>
            Specifies SID_CLANINVITATION (0x77)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanRemoveMember">
            <summary>
            Specifies SID_CLANREMOVEMEMBER (0x78)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanInvitationResponse">
            <summary>
            Specifies SID_CLANINVITATIONRESPONSE (0x79)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanRankChange">
            <summary>
            Specifies SID_CLANRANKCHANGE (0x7a)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanSetMOTD">
            <summary>
            Specifies SID_CLANSETMOTD (0x7b)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanMOTD">
            <summary>
            Specifies SID_CLANMOTD (0x7c)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanMemberList">
            <summary>
            Specifies SID_CLANMEMBERLIST (0x7d)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanMemberRemoved">
            <summary>
            Specifies SID_CLANMEMBERREMOVED (0x7e)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanMemberStatusChanged">
            <summary>
            Specifies SID_CLANMEMBERSTATUSCHANGED (0x7f)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanMemberRankChange">
            <summary>
            Specifies SID_CLANMEMBERRANKCHANGE (0x81)
            </summary>
        </member>
        <member name="F:BNSharp.BncsPacketId.ClanMemberInformation">
            <summary>
            Specifies SID_CLANMEMBERINFORMATION (0x82)
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendLocation">
            <summary>
            Specifies the level of information available about a Battle.net user who is on the client's friend list.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Friends.FriendLocation.Offline">
            <summary>
            Specifies that the user is offline.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Friends.FriendLocation.NotInChat">
            <summary>
            Specifies that the user is not in a chat channel.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Friends.FriendLocation.InChat">
            <summary>
            Specifies that the user is in a chat channel.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Friends.FriendLocation.InPublicGame">
            <summary>
            Specifies that the user is in a public game.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Friends.FriendLocation.InPrivateGame">
            <summary>
            Specifies that the user is in a private (password-protected) game, but you are not mutual friends, and so the user's game information
            will not be made available to you.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Friends.FriendLocation.InPrivateGameMutualFriends">
            <summary>
            Specifies that the user is in a private (password-protected) game, but because you are mutual friends, you will be provided
            the name of the game.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.ClanProfile">
            <summary>
            Contains statistical information about a user's clan.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.ClanProfile.#ctor(System.String,BNSharp.BattleNet.Clans.ClanRank,System.DateTime)">
            <summary>
            Creates a new <see>ClanProfile</see>.
            </summary>
            <param name="clanName">The name of the user's clan.</param>
            <param name="rank">The rank of the user within the clan.</param>
            <param name="joinDate">The date at which the user joined the clan.</param>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.ClanProfile.SetStats(BNSharp.BattleNet.Stats.WarcraftClanLadderRecord[],BNSharp.BattleNet.Stats.WarcraftRaceRecord[])">
            <summary>
            In derived classes, sets the statistical data associated with the clan's profile.
            </summary>
            <param name="ladderRecords">The user's ladder game records.</param>
            <param name="raceRecords">The user's records by playable race.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any parameters are <see langword="null"/>.</exception>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ClanProfile.ClanName">
            <summary>
            Gets the name of the clan to which the user belongs.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ClanProfile.Rank">
            <summary>
            Gets the user's rank within the clan.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ClanProfile.Joined">
            <summary>
            Gets the date at which the user joined the clan.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ClanProfile.LadderRecords">
            <summary>
            Retrieves a read-only collection of ladder records for the user's clan.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ClanProfile.RaceRecords">
            <summary>
            Retrieves a read-only collection of race statistics for the user's clan.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.ArrangedTeamRecord">
            <summary>
            Contains information about an arranged team record when viewing a user's Warcraft 3 profile.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.ArrangedTeamRecord.#ctor(BNSharp.BattleNet.Stats.ArrangedTeamType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.String[])">
            <summary>
            Creates a new <see>ArrangedTeamRecord</see>.
            </summary>
            <param name="teamType">The type of arranged team.</param>
            <param name="wins">The team's win count.</param>
            <param name="losses">The team's loss count.</param>
            <param name="level">The team's level.</param>
            <param name="hoursUntilExperienceDecay">The time (in hours) until the team's experience decays without playing.  For more information,
            see <see>HoursUntilExperienceDecay</see>.</param>
            <param name="totalExperience">The team's total experience value.</param>
            <param name="rank">The team's rank.</param>
            <param name="lastPlayedTime">The time of the team's last played game.</param>
            <param name="teammates">The team's members.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ArrangedTeamRecord.TeamType">
            <summary>
            Gets the type of arranged team record represented by this team record.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ArrangedTeamRecord.Wins">
            <summary>
            Gets the number of wins played by the team.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ArrangedTeamRecord.Losses">
            <summary>
            Gets the number of losses played by the team.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ArrangedTeamRecord.Level">
            <summary>
            Gets the team's level.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ArrangedTeamRecord.HoursUntilExperienceDecay">
            <summary>
            Gets the number of hours until the team's experience decays.
            </summary>
            <remarks>
            <para>This value is the only piece that does not have a corresponding representation within the Warcraft III user interface.
            It is hypothesized that this is the meaning of the underlying value; however, it is unconfirmed.  This property may be removed
            or changed in future versions.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ArrangedTeamRecord.TotalExperience">
            <summary>
            Gets the team's experience level.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ArrangedTeamRecord.Rank">
            <summary>
            Gets the team's rank, if the team is ranked.
            </summary>
            <remarks>
            <para>If the team is unranked, this property will return 0.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ArrangedTeamRecord.LastPlayedTime">
            <summary>
            Gets the time of the last played match.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.ArrangedTeamRecord.Teammates">
            <summary>
            Gets the names of the teammates for the team.
            </summary>
        </member>
        <member name="T:BNSharp.UserFlags">
            <summary>
            Specifies the flags that can be related to user-specific <see cref="P:BNSharp.BattleNet.ChatUser.Flags">chat events</see>.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.None">
            <summary>
            Indicates that the user is normal.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.BlizzardRepresentative">
            <summary>
            Indicates that the user is a Blizzard representative.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.ChannelOperator">
            <summary>
            Indicates that the user is a channel operator.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.Speaker">
            <summary>
            Indicates that the user has a Speaker icon.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.BattleNetAdministrator">
            <summary>
            Indicates that the user is a Battle.net Administrator.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.NoUDP">
            <summary>
            Indicates that the user's client expects UDP support but lacks it.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.Squelched">
            <summary>
            Indicates that the user is currently squelched by the client.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.SpecialGuest">
            <summary>
            Indicates a channel special guest.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.BeepEnabled">
            <summary>
            Represented when the client had "beep" enabled, a client-side setting.  No longer supported on Battle.net.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.PglPlayer">
            <summary>
            Represented PGL players.  No longer seen on Battle.net.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.PglOfficial">
            <summary>
            Represented PGL officials.  No longer seen on Battle.net.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.KbkPlayer">
            <summary>
            Represented KBK players.  No longer seen on Battle.net.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.WcgOfficial">
            <summary>
            The flag for WCG officials.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.KbkSingles">
            <summary>
            Represented KBK singles players.  No longer seen on Battle.net.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.KbkBeginner">
            <summary>
            Represented beginner KBK players.  No longer seen on Battle.net.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.WhiteKbk">
            <summary>
            Represented a single bar for KBK players.  No longer seen on Battle.net.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.GFOfficial">
            <summary>
            The flag for GF officials.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.GFPlayer">
            <summary>
            The flag for GF players.
            </summary>
        </member>
        <member name="F:BNSharp.UserFlags.PglPlayer2">
            <summary>
            The current flag for PGL players.
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Data.Blp1ImageType">
            <summary>
            Specifies the compression type used by a BLP1 image.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.Data.Blp1ImageType.Jpeg">
            <summary>
            Specifies that a BLP1 image is based on JPEG compression.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.Data.Blp1ImageType.Palette">
            <summary>
            Specifies that a BLP1 image is palettized.
            </summary>
        </member>
        <member name="T:BNSharp.LoginFailedEventArgs">
            <summary>
            Contains information about a situation in which the client failed to log into Battle.net.
            </summary>
        </member>
        <member name="M:BNSharp.LoginFailedEventArgs.#ctor(BNSharp.LoginFailureReason,System.Int32)">
            <summary>
            Creates a new <see>LoginFailedEventArgs</see> that does not support extended information.
            </summary>
            <param name="reason">The login failure reason associated with this event.</param>
            <param name="statusCode">The underlying message status code, which may be useful if the <paramref name="reason"/> parameter is 
            <see cref="T:BNSharp.LoginFailureReason">Unknown</see>.</param>
        </member>
        <member name="M:BNSharp.LoginFailedEventArgs.#ctor(BNSharp.LoginFailureReason,System.Int32,System.String)">
            <summary>
            Creates a new <see>LoginFailedEventArgs</see> that does supports extended information.
            </summary>
            <param name="reason">The login failure reason associated with this event.</param>
            <param name="statusCode">The underlying message status code, which may be useful if the <paramref name="reason"/> parameter is 
            <see cref="T:BNSharp.LoginFailureReason">Unknown</see>.</param>
            <param name="description">Additional textual information optionally provided by the Battle.net server.</param>
        </member>
        <member name="P:BNSharp.LoginFailedEventArgs.ProvidesExtendedInformation">
            <summary>
            Gets whether information besides that an invalid username or password was provided.
            </summary>
        </member>
        <member name="P:BNSharp.LoginFailedEventArgs.Description">
            <summary>
            Gets a textual reason for the login failure, if one was provided by the server.
            </summary>
            <remarks>
            <para>This property is only meaningful if <see>ProvidesExtendedInformation</see> is <see langword="true" />.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.LoginFailedEventArgs.StatusCode">
            <summary>
            Gets the literal status code returned from the server.
            </summary>
        </member>
        <member name="P:BNSharp.LoginFailedEventArgs.Reason">
            <summary>
            Gets the basic login failure reason.
            </summary>
        </member>
        <member name="T:BNSharp.LoginFailedEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for login failure events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.ClientCheckFailureCause">
            <summary>
            Specifies the causes of client versioning failure reported by Battle.net.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.Passed">
            <summary>
            Indicates that client checks passed.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.OldVersion">
            <summary>
            Indicates that the client should upgrade.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.InvalidVersion">
            <summary>
            Indicates that the version checksum was invalid.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.NewerVersion">
            <summary>
            Indicates that the client is using a newer version than is currently supported.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.InvalidCdKey">
            <summary>
            The CD key was invalid.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.CdKeyInUse">
            <summary>
            The CD key is already in use.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.BannedCdKey">
            <summary>
            The CD key has been banned.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.WrongProduct">
            <summary>
            The CD key was for the wrong product.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.InvalidExpCdKey">
            <summary>
            Indicates that the expansion CD key was invalid.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.ExpCdKeyInUse">
            <summary>
            Indicates that the expansion CD key is already in use.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.BannedExpCdKey">
            <summary>
            Indicates that the expansion CD key was banned.
            </summary>
        </member>
        <member name="F:BNSharp.ClientCheckFailureCause.WrongExpProduct">
            <summary>
            Indicates that the expansion CD key was for the wrong product.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendStatus">
            <summary>
            Specifies additional information about a person on your friend list.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Friends.FriendStatus.None">
            <summary>
            No additional information is provided.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Friends.FriendStatus.Mutual">
            <summary>
            The user also listed you as a friend.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Friends.FriendStatus.DoNotDisturb">
            <summary>
            The user has flagged themselves as do-not-disturb.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Friends.FriendStatus.Away">
            <summary>
            The user is away.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendRemovedEventArgs">
            <summary>
            Specifies that a friend has been removed from the client's friends list.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Friends.FriendRemovedEventArgs.#ctor(BNSharp.BattleNet.Friends.FriendUser)">
            <summary>
            Creates a new <see>FriendRemovedEventArgs</see>.
            </summary>
            <param name="friend">The friend who was removed.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendRemovedEventArgs.Friend">
            <summary>
            Gets a reference to the friend who was removed.
            </summary>
            <remarks>
            <para>When this property's backing store is serialized as part of a WCF data contract,
            it is given the name <c>Friend</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendRemovedEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for friend removed events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.LeftClanEventArgs">
            <summary>
            Contains event data about when the client's user account leaves a clan.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.LeftClanEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a new <see>LeftClanEventArgs</see>.
            </summary>
            <param name="removed">Specifies whether the client was removed from the clan.</param>
            <seealso cref="P:BNSharp.BattleNet.Clans.LeftClanEventArgs.RemovedByLeader"/>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.LeftClanEventArgs.RemovedByLeader">
            <summary>
            Gets whether the client was removed from the clan by a leader.
            </summary>
            <remarks>
            <para>If this property returns <see langword="false" />, it means that the user left of his or her own accord.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.LeftClanEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for client clan departure events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.PriorityQueue`1">
            <summary>
            Implements a basic priority queue.
            </summary>
            <typeparam name="T">The type of item to queue.</typeparam>
        </member>
        <member name="M:BNSharp.PriorityQueue`1.#ctor">
            <summary>
            Creates a new <see>PriorityQueue</see>.
            </summary>
        </member>
        <member name="M:BNSharp.PriorityQueue`1.Enqueue(BNSharp.Priority,`0)">
            <summary>
            Enqueues an item at the specified priority.
            </summary>
            <param name="priority">The <see>Priority</see> at which to enqueue the item.</param>
            <param name="item">The item to enqueue.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="priority"/> is not a valid enumeration value.</exception>
        </member>
        <member name="M:BNSharp.PriorityQueue`1.Dequeue">
            <summary>
            Gets an item from the queue.
            </summary>
            <returns>The next highest-priority item in the queue.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the queue is empty.</exception>
        </member>
        <member name="M:BNSharp.PriorityQueue`1.Clear">
            <summary>
            Clears all queued items.
            </summary>
            <remarks>
            <para>This method is thread-safe; however, if another thread is actively dequeuing an item and already has taken a lock, that operation will
            complete first.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.PriorityQueue`1.Count">
            <summary>
            Gets the current number of items in the queue.
            </summary>
        </member>
        <member name="T:BNSharp.Plugins.ICommandQueue">
            <summary>
            Implements an outgoing command queue, which allows the client to delay, filter, or reorder messages that are waiting to be sent to prevent 
            flooding.  The default implementation does not delay or reorder messages.
            </summary>
        </member>
        <member name="M:BNSharp.Plugins.ICommandQueue.EnqueueMessage(System.String,BNSharp.Priority)">
            <summary>
            Queues a message to be sent.
            </summary>
            <param name="message">The message to send.</param>
            <param name="priority">The priority of the message.</param>
            <remarks>
            <para>This method should not need to be called from user code; it is called automatically when <see cref="M:BNSharp.BattleNet.BattleNetClient.Send(System.String,BNSharp.Priority)">BattleNetClient.Send</see>
            is called.</para>
            <para>When implementing this interface, the <paramref name="priority"/> parameter may be ignored depending on implementation.</para>
            <para>In addition to enqueuing a message, it is possible to implement this method to filter specific types of messages from being sent.  For 
            instance, a simple filter may prevent a password from being sent over the wire.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.Plugins.ICommandQueue.Clear">
            <summary>
            Clears any messages enqueued for sending.
            </summary>
            <remarks>
            <para>This method is called when the <see>BattleNetClient</see> is disconnected.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.Plugins.ICommandQueue.MessageReady">
            <summary>
            Informs listeners that a message is ready to be sent over the wire.
            </summary>
        </member>
        <member name="T:BNSharp.Plugins.QueuedMessageReadyCallback">
            <summary>
            Informs the <see>BattleNetClient</see> that a queued message is ready to be sent to the server.
            </summary>
            <param name="message">The message to be sent to the server.</param>
        </member>
        <member name="T:BNSharp.ClientCheckFailedEventHandler">
            <summary>
            Specifies the contract for event handlers that want to handle the client versioning check failure event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.ClientCheckFailedEventArgs">
            <summary>
            Specifies the arguments for a client versioning check failure event.
            </summary>
        </member>
        <member name="M:BNSharp.ClientCheckFailedEventArgs.#ctor(BNSharp.ClientCheckFailureCause,System.String)">
            <summary>
            Creates a new instance of <see>ClientCheckFailedEventArgs</see>.
            </summary>
            <param name="reason">The failure code for version checking.</param>
            <param name="additionalInformation">Additional information, if available.</param>
        </member>
        <member name="P:BNSharp.ClientCheckFailedEventArgs.Reason">
            <summary>
            Gets the reason provided by Battle.net.
            </summary>
        </member>
        <member name="P:BNSharp.ClientCheckFailedEventArgs.AdditionalInformation">
            <summary>
            Gets additional information, if any, provided by Battle.net about the problem.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Product">
            <summary>
            Represents a Battle.net chat product.  This class cannot be instantiated.
            </summary>
            <remarks>
            <para>This class is primarily designed to provide information about products supported on Battle.net.  In order to obtain an instance of it,
            access one of the static fields.  Equality can also be tested by comparing a user's product to an instance retrieved from the fields exposed
            by this class.</para>
            </remarks>
        </member>
        <member name="F:BNSharp.BattleNet.Product.ChatClient">
            <summary>
            The <see>Product</see> object for a telnet chat client.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.StarcraftRetail">
            <summary>
            The <see>Product</see> object for Starcraft (Retail).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.StarcraftShareware">
            <summary>
            The <see>Product</see> object for Starcraft Shareware.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.StarcraftBroodWar">
            <summary>
            The <see>Product</see> object for Starcraft: Brood War.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.JapanStarcraft">
            <summary>
            The <see>Product</see> object for Japan Starcraft.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.Warcraft2BNE">
            <summary>
            The <see>Product</see> object for Warcraft II: Battle.net Edition.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.DiabloRetail">
            <summary>
            The <see>Product</see> object for Diablo (Retail).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.DiabloShareware">
            <summary>
            The <see>Product</see> object for Diablo (Shareware).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.Diablo2Shareware">
            <summary>
            The <see>Product</see> object for Diablo 2 Shareware.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.Diablo2Retail">
            <summary>
            The <see>Product</see> object for Diablo 2 (Retail).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.Diablo2Expansion">
            <summary>
            The <see>Product</see> object for Diablo 2: The Lord of Destruction.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.Warcraft3Retail">
            <summary>
            The <see>Product</see> object for Warcraft 3: The Reign of Chaos.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.Warcraft3Expansion">
            <summary>
            The <see>Product</see> object for Warcraft 3: The Frozen Throne.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Product.UnknownProduct">
            <summary>
            The <see>Product</see> object that represents any product unrecognized by BN#.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Product.GetByProductCode(System.String)">
            <summary>
            Gets the <see>Product</see> associated with the specified product code.
            </summary>
            <param name="productCode">The four-character product code to check.</param>
            <returns>A <see>Product</see> object associated with the product code if it is found; otherwise <see langword="null" />.</returns>
        </member>
        <member name="M:BNSharp.BattleNet.Product.GetAllProducts">
            <summary>
            Gets an array of all supported products.
            </summary>
            <returns>An array of recognized products.</returns>
        </member>
        <member name="M:BNSharp.BattleNet.Product.Equals(System.String)">
            <summary>
            Determines whether the specified product's product code matches the specified product code.
            </summary>
            <param name="other">The product code to test.</param>
            <returns><see langword="true" /> if this product matches the tested product code; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:BNSharp.BattleNet.Product.Equals(BNSharp.BattleNet.Product)">
            <summary>
            Determines whether the specified product and this product represent the same Battle.net client.
            </summary>
            <param name="other">The client to test.</param>
            <returns><see langword="true" /> if the products match; otherwise <see langword="false" />.</returns>
        </member>
        <member name="P:BNSharp.BattleNet.Product.ProductCode">
            <summary>
            Gets the product code for this Product.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Product.Name">
            <summary>
            Gets the name of this product.
            </summary>
            <remarks>
            <para>If localized resources exist for the current language, they are retrieved.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendAddedEventArgs">
            <summary>
            Specifies that a new friend was added to the list of friends.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Friends.FriendAddedEventArgs.#ctor(BNSharp.BattleNet.Friends.FriendUser)">
            <summary>
            Creates a new <see>FriendAddedEventArgs</see>.
            </summary>
            <param name="newFriend">The friend that was added to the list.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendAddedEventArgs.NewFriend">
            <summary>
            Gets a reference to the friend that was added.
            </summary>
            <remarks>
            <para>When this property's backing store is serialized as part of a WCF data contract,
            it is given the name <c>NewFriend</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendAddedEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for friend added events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanInvitationResponseEventArgs">
            <summary>
            Sent to the client after the client has invited another user to join an existing clan.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanInvitationResponseEventArgs.#ctor(System.Int32,BNSharp.BattleNet.Clans.ClanInvitationResponse)">
            <summary>
            Creates a new <see>ClanInvitationResponseEventArgs</see>.
            </summary>
            <param name="requestID">The ID of the request assigned by the invitation.</param>
            <param name="response">The response from Battle.net.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanInvitationResponseEventArgs.RequestID">
            <summary>
            Gets the ID of the associated invitation request.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanInvitationResponseEventArgs.Response">
            <summary>
            Gets the server's response.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanInvitationResponseEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for clan invitation response events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.InformationEventHandler">
            <summary>
            Specifies the contract for event handlers that want to listen to the Information event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.InformationEventArgs">
            <summary>
            Specifies informational event arguments.
            </summary>
        </member>
        <member name="M:BNSharp.InformationEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new <see>InformationEventArgs</see>.
            </summary>
            <param name="info">The information to pass.</param>
        </member>
        <member name="P:BNSharp.InformationEventArgs.Information">
            <summary>
            Gets the information for the event.
            </summary>
        </member>
        <member name="T:BNSharp.CreationFailureReason">
            <summary>
            Specifies the reasons for which an account may fail to be created.
            </summary>
        </member>
        <member name="F:BNSharp.CreationFailureReason.Unknown">
            <summary>
            Specifies that an unknown cause was responsible for the account creation failure.
            </summary>
        </member>
        <member name="F:BNSharp.CreationFailureReason.InvalidCharacters">
            <summary>
            Specifies that invalid characters (such as those in illies) was used.
            </summary>
        </member>
        <member name="F:BNSharp.CreationFailureReason.InvalidWord">
            <summary>
            Specifies that an invalid or banned word, such as a curse word, were in the name.
            </summary>
        </member>
        <member name="F:BNSharp.CreationFailureReason.AccountAlreadyExists">
            <summary>
            Specifies that the account name already exists.
            </summary>
        </member>
        <member name="F:BNSharp.CreationFailureReason.NotEnoughAlphanumerics">
            <summary>
            Specifies that not enough alphanumeric characters were in the name.
            </summary>
        </member>
        <member name="F:BNSharp.CreationFailureReason.NameTooShort">
            <summary>
            Specifies that the name was too short or blank.
            </summary>
        </member>
        <member name="F:BNSharp.CreationFailureReason.AdjacentPunctuation">
            <summary>
            Specifies that too many punctuation characters were next to each other in the name.
            </summary>
        </member>
        <member name="F:BNSharp.CreationFailureReason.TooMuchPunctuation">
            <summary>
            Specifies that there were too many punctuation characters in the name.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.PingType">
            <summary>
            Specifies the type of client ping that should be used.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.PingType.Normal">
            <summary>
            Specifies that the connection should have normal ping.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.PingType.MinusOneMs">
            <summary>
            Specifies that the connection should attempt to have a -1ms ping.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.PingType.ZeroMs">
            <summary>
            Specifies that the connection should attempt to have a 0ms ping.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.PingType.ReplyBeforeVersioning">
            <summary>
            Specifies that the client should reply to the ping packet before beginning the version check.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanRank">
            <summary>
            Specifies the ranks a clan member may have within a clan.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanRank.Initiate">
            <summary>
            Specifies that the member is a new recruit who has been with the clan less than one week.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanRank.Peon">
            <summary>
            Specifies that the member is a new recruit who has been with the clan at least one week.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanRank.Grunt">
            <summary>
            Specifies that the member is a regular clan member.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanRank.Shaman">
            <summary>
            Specifies that the member is a clan officer.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanRank.Chieftan">
            <summary>
            Specifies that the member is the clan leader.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMembershipEventArgs">
            <summary>
            Provides information about the client's user's current clan during login.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanMembershipEventArgs.#ctor(System.String,BNSharp.BattleNet.Clans.ClanRank)">
            <summary>
            Creates a new instance of <see>ClanMembershipEventArgs</see>.
            </summary>
            <param name="clanTag">The tag of the clan to which the client belongs.</param>
            <param name="rank">The rank within the clan of the client.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMembershipEventArgs.Rank">
            <summary>
            Gets your current rank within the clan.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Rank</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMembershipEventArgs.Tag">
            <summary>
            Gets the tag of the clan to which you belong.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Tag</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMembershipEventHandler">
            <summary>
            Specifies the contract for listeners that want to observe the clan membership event.
            </summary>
            <param name="sender">The <see>BattleNetClient</see> that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanChieftanChangeResult">
            <summary>
            Specifies result codes for an attempt to change the clan chieftan (leader).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanChieftanChangeResult.Success">
            <summary>
            Indicates that the change succeeded.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanChieftanChangeResult.ClanTooYoung">
            <summary>
            Indicates that the clan is less than a week old.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanChieftanChangeResult.Declined">
            <summary>
            Indicates that the designee did not accept becoming chieftan.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanChieftanChangeResult.Failed">
            <summary>
            Indicates that the request has failed.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanChieftanChangeResult.NotAuthorized">
            <summary>
            Indicates that the client is not the present clan chieftan.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanChieftanChangeResult.NoSuchUser">
            <summary>
            Indicates that the user does not exist, is not in the clan, or that the user has not been in the clan long enough.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.AdChangedEventArgs">
            <summary>
            Contains information about a change in advertisements.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.AdChangedEventArgs.#ctor(System.Int32,System.DateTime,System.String,System.String)">
            <summary>
            Creates a new <see>AdChangedEventArgs</see>.
            </summary>
            <param name="adID">The unique ID of the ad.</param>
            <param name="fileTime">The local time of the file's most recent change.</param>
            <param name="fileName">The name of the file that contains the ad image.</param>
            <param name="linkUrl">The URL to which the ad links.</param>
        </member>
        <member name="P:BNSharp.BattleNet.AdChangedEventArgs.AdID">
            <summary>
            Gets the unique ID of the ad.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.AdChangedEventArgs.FileTime">
            <summary>
            Gets the local time of the file's most recent change.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.AdChangedEventArgs.Filename">
            <summary>
            Gets the name of the file that has the ad image.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.AdChangedEventArgs.LinkUrl">
            <summary>
            Gets the URL to the link to which the ad links.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.AdChangedEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for AdChanged events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNetSettingsErrorsException">
            <summary>
            Contains error information raised when a new <see>BattleNetClient</see> is constructed with 
            invalid settings.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNetSettingsErrorsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:BNSharp.BattleNetSettingsErrorsException.Errors">
            <summary>
            Gets the bitwise combination of errors that were associated with this exception.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNetSettingsErrors">
            <summary>
            Specifies one or more errors that were found with an initialized <see>BattleNetClient</see>.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.None">
            <summary>
            Indicates no errors were found.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.GameExeMissingOrNotFound">
            <summary>
            Indicates that the game executable file (<see cref="P:BNSharp.IBattleNetSettings.GameFile3">the GameExe
            property</see>) was not specified or did not exist.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.GameFile2MissingOrNotFound">
            <summary>
            Indicates that the second game file (<see cref="P:BNSharp.IBattleNetSettings.GameFile3">the GameFile2
            property</see>) was not specified or did not exist.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.GameFile3MissingOrNotFound">
            <summary>
            Indicates that the third game file (<see cref="P:BNSharp.IBattleNetSettings.GameFile3">the GameFile3
            property</see>) was not specified or did not exist.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.UserNameNull">
            <summary>
            Indicates that the username (<see cref="P:BNSharp.IBattleNetSettings.Username">the Username
            property</see>) was null or empty.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.InvalidPingType">
            <summary>
            Indicates that the emulated ping response (<see cref="P:BNSharp.IBattleNetSettings.PingMethod">the
            PingMethod property</see>) was not one of the known values of the <see>PingType</see> 
            enumeration.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.InvalidEmulationClient">
            <summary>
            Indicates that the client specified (<see cref="P:BNSharp.IBattleNetSettings.Client">the Client
            property</see>) was not valid for emulation; the only valid values are presently
            <c>STAR</c>, <c>SEXP</c>, <c>D2DV</c>, <c>D2XP</c>, <c>W2BN</c>, <c>WAR3</c>, and <c>W3XP</c>.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.PrimaryCdKeyMissingOrInvalid">
            <summary>
            Indicates that the primary CD key (<see cref="P:BNSharp.IBattleNetSettings.CdKey1">the CdKey1
            property</see>) was not specified or was invalid.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.SecondaryCdKeyMissingOrInvalid">
            <summary>
            Indicates that the secondary CD key (<see cref="P:BNSharp.IBattleNetSettings.CdKey2">the CdKey2 
            property</see>) was not specified or was invalid, but was required for the selected client.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.LockdownFileMissingOrNotFound">
            <summary>
            Indicates that the lockdown file (<see cref="P:BNSharp.IBattleNetSettings.ImageFile">the ImageFile 
            property</see> was not specified or did not exist.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNetSettingsErrors.InvalidGatewayServer">
            <summary>
            Indicates that the gateway's server name (<see cref="P:BNSharp.IBattleNetSettings.Gateway">the 
            Gateway property</see>, then the <see cref="P:BNSharp.BattleNet.Gateway.ServerHost">ServerHost
            property</see>) was null or empty.
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.OldAuth">
            <summary>
            Calculates hash values for data using the old login-system
            checks.
            </summary>
            <remarks>
            This method of logon would be used in down-level clients 
            using the SID_CLIENTID, SID_CLIENTID2, or SID_AUTH_INFO 
            messages specifying the login style <b>0</b> (Old login
            system).
            </remarks>
            <threadsafety>This type is safe for multithreaded operations.</threadsafety>
        </member>
        <member name="M:BNSharp.MBNCSUtil.OldAuth.HashData(System.Byte[])">
            <summary>
            Calculates the single "broken" SHA-1 hash of the specified
            data.
            </summary>
            <param name="data">The data buffer to hash.</param>
            <returns>A 20-byte buffer containing the hash value.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.OldAuth.HashPassword(System.String)">
            <summary>
            Calculates the single "broken" SHA-1 hash of the specified
            password using ASCII encoding.
            </summary>
            <param name="data">The password to hash.</param>
            <returns>A 20-byte buffer containing the hash value.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.OldAuth.DoubleHashData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the double-pass "broken" SHA-1 hash of the 
            specified data.
            </summary>
            <param name="data">The data buffer to hash.</param>
            <param name="clientToken">The client token, 
            a randomly-generated value specified by the client.</param>
            <param name="serverToken">The server token, a 
            randomly-generated value specified by the server.</param>
            <returns>A 20-byte buffer containing the hash value.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.OldAuth.DoubleHashPassword(System.String,System.Int32,System.Int32)">
            <summary>
            Calculates the double-pass "broken" SHA-1 hash of the 
            specified password using ASCII encoding.
            </summary>
            <param name="data">The password to hash.</param>
            <param name="clientToken">The client token, 
            a randomly-generated value specified by the client.</param>
            <param name="serverToken">The server token, a 
            randomly-generated value specified by the server.</param>
            <returns>A 20-byte buffer containing the hash value.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.OldAuth.DoubleHashPassword(System.String,System.UInt32,System.UInt32)">
            <summary>
            Calculates the double-pass "broken" SHA-1 hash of the 
            specified password using ASCII encoding.  This method is
            not CLS-compliant.
            </summary>
            <param name="data">The password to hash.</param>
            <param name="clientToken">The client token, 
            a randomly-generated value specified by the client.</param>
            <param name="serverToken">The server token, a 
            randomly-generated value specified by the server.</param>
            <returns>A 20-byte buffer containing the hash value.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.OldAuth.DoubleHashData(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Calculates the double-pass "broken" SHA-1 hash of the 
            specified data.  This method is not CLS-compliant.
            </summary>
            <param name="data">The data buffer to hash.</param>
            <param name="clientToken">The client token, 
            a randomly-generated value specified by the client.</param>
            <param name="serverToken">The server token, a 
            randomly-generated value specified by the server.</param>
            <returns>A 20-byte buffer containing the hash value.</returns>
        </member>
        <member name="T:BNSharp.BattleNetClientResources">
            <summary>
            Provides global resources preallocated for performance.
            </summary>
            <remarks>
            <para>When custom packet handlers are being used, if the next handler is null, the handler should free the packet (return it to the pool) 
            by calling <c>BattleNetClientResources.IncomingBufferPool.FreeBuffer()</c> on the related packet.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.BattleNetClientResources.RegisterClient(BNSharp.BattleNet.BattleNetClient)">
            <summary>
            Registers a client connection, tracking it and increasing the available buffer pool.
            </summary>
            <param name="client">The client connection that is being registered.</param>
        </member>
        <member name="M:BNSharp.BattleNetClientResources.UnregisterClient(BNSharp.BattleNet.BattleNetClient)">
            <summary>
            Unregisters a client connection, halting tracking and decreasing the available buffer pool.
            </summary>
            <param name="client">The client connection being unregistered.</param>
        </member>
        <member name="M:BNSharp.BattleNetClientResources.AcquireDispatcher">
            <summary>
            Acquires the shared event dispatcher used to dispatch normal- and low-priority events for
            client implementations.
            </summary>
            <returns>The shared <see>EventDispatcher</see>.</returns>
        </member>
        <member name="P:BNSharp.BattleNetClientResources.IncomingBufferPool">
            <summary>
            Gets the <see>BufferPool</see> used for incoming packets.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNetClientResources.OutgoingBufferPool">
            <summary>
            Gets the <see>BufferPool</see> used for outgoing packets.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Gateway">
            <summary>
            Contains information about a Battle.net gateway, including information about how it renders chat usernames.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Gateway.USEast">
            <summary>
            Gets a <see>Gateway</see> representing the official Battle.net US East server.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Gateway.USWest">
            <summary>
            Gets a <see>Gateway</see> representing the official Battle.net US West server.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Gateway.Europe">
            <summary>
            Gets a <see>Gateway</see> representing the official Battle.net Europe server.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Gateway.Asia">
            <summary>
            Gets a <see>Gateway</see> representing the official Battle.net Asia server.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Gateway.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new <see>Gateway</see>.
            </summary>
            <param name="name">The descriptive name of the gatway.</param>
            <param name="oldClientSuffix">The suffix used for old clients when viewed by Warcraft 3 (see
            <see>OldClientSuffix</see> for more information).</param>
            <param name="war3ClientSuffix">The suffix used for Warcraft 3 clients when viewed by older clients (see
            <see>Warcraft3ClientSuffix</see> for more information).</param>
            <param name="serverName">The DNS host name or string representation of the IP address of the server.</param>
            <param name="port">The port to which to connect.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="serverName"/> is <see langword="null"/>
            or zero-length.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="port"/> is less than 1 or greater than
            65535.</exception>
        </member>
        <member name="M:BNSharp.BattleNet.Gateway.ToString">
            <inheritdoc />
        </member>
        <member name="P:BNSharp.BattleNet.Gateway.OldClientSuffix">
            <summary>
            Gets the old client suffix, e.g., <c>@USEast</c>, for the specified gateway.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Gateway.Warcraft3ClientSuffix">
            <summary>
            Gets the Warcraft 3 client suffix, e.g., <c>@Azeroth</c>, for the specified gateway.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Gateway.ServerHost">
            <summary>
            Gets the DNS host name, e.g., <c>useast.battle.net</c>, for the specified gateway.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Gateway.ServerPort">
            <summary>
            Gets the server port associated with this gateway.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Gateway.Name">
            <summary>
            Gets the descriptive name of this gateway.
            </summary>
        </member>
        <member name="T:BNSharp.Security.ImmediateCallerIsOfTypePermission`1">
            <summary>
            Enforces that the immediate caller of a method 
            </summary>
            <typeparam name="T">Any type for which to verify method ownership.</typeparam>
        </member>
        <member name="M:BNSharp.Security.ImmediateCallerIsOfTypePermission`1.Demand">
            <summary>
            Demands that the immediate caller of a method or property is declared by the type specified by the type parameter <typeparamref name="T"/> (or a compatible 
            descendant type).  
            </summary>
            <exception cref="T:System.Security.SecurityException">Thrown if the immediate caller of the protected method is not a matching <see>Type</see>.</exception>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Net.BnFtpVersion1Request">
            <summary>
            Represents a Battle.net FTP (BnFTP) file transfer request for Version 1 products.
            </summary>
            <remarks>
            <para>This class is only valid for Starcraft Retail, Starcraft: Brood War, Diablo II Retail, 
            Diablo II: Lord of Destruction, and Warcraft II: Battle.net Edition clients.  For Warcraft III: The Reign
            of Chaos and Warcraft III: The Frozen Throne, use the <see cref="T:BNSharp.MBNCSUtil.Net.BnFtpVersion2Request">BnFtpVersion2Request</see>
            class.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Net.BnFtpVersion1Request.#ctor(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            Creates a standard Version 1 Battle.net FTP request.
            </summary>
            <param name="productId">The four-character identifier for the product being emulated by this request.</param>
            <param name="fileName">The full or relative path to the file as it is to be stored on the local 
            machine.  The name portion of the file must be the filename being requested from the service.</param>
            <param name="fileTime">The last-write time of the file.  If the file is not available, this parameter
            can be <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Net.BnFtpVersion1Request.#ctor(System.String,System.String,System.DateTime,System.Int32,System.String)">
            <summary>
            Creates a Version 1 Battle.net FTP request specifically for banner ad downloads.
            </summary>
            <param name="productId">The four-character identifier for the product being emulated by this request.</param>
            <param name="fileName">The full or relative path to the file as it is to be stored on the local 
            machine.  The name portion of the file must be the filename being requested from the service.</param>
            <param name="fileTime">The last-write time of the file.  If the file is not available, this parameter
            can be <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="adBannerId">The banner ID provided by Battle.net's ad notice message.</param>
            <param name="adBannerExtension">The banner filename extension provided by Battle.net's ad notice message.</param>
            <remarks>
            <para>Although it is not specifically required to download banner ads, it is recommended for forward-compatibility
            with the Battle.net protocol that this constructor is used.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Net.BnFtpVersion1Request.ExecuteRequest">
            <summary>
            Executes the BnFTP request, downloading the file to where <see cref="P:BNSharp.MBNCSUtil.Net.BnFtpRequestBase.LocalFileName">LocalFileName</see>
            specifies, and closes the connection.
            </summary>
            <remarks>
            <para>By default, <c>LocalFileName</c> is the same name as the remote file, which will cause the file
            to be saved in the local application path.  The desired location of the file must be set before 
            <b>ExecuteRequest</b> is called.</para>
            </remarks>
            <exception cref="T:System.IO.IOException">Thrown if the local file cannot be written.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown if the remote host closes the connection prematurely.</exception>
        </member>
        <member name="T:BNSharp.EventExceptionEventArgs">
            <summary>
            Contains information about when a BN# connection event handler callback raises an exception.
            </summary>
            <remarks>
            <para>Battle.net-related events driven by <see>BattleNetClient</see> are guaranteed to execute sequentially, in the order in which they
            were registered relative to other event handlers of their priority.</para>
            <example>
            <para>For example, consider a scenario in which there are three handlers registered for the <see cref="E:BNSharp.BattleNet.BattleNetClient.UserJoined">UserJoined event</see>; 
            one is registered at High <see>Priority</see> and two are registered at Low priority:</para>
            <list type="bullet">
                <item>High: Moderation.ChannelModerationHandler.client_UserJoined(System.Object, BNSharp.UserEventArgs)</item>
                <item>Low: Client.UI.ChatDisplay.client_UserJoined(System.Object, BNSharp.UserEventArgs)</item>
                <item>Low: Client.UI.ChannelDisplay.client_UserJoined(System.Object, BNSharp.UserEventArgs)</item>
            </list>
            <para>Unlike normal .NET event handlers, every one of those handlers are guaranteed to be called back, regardless of whether a prior handler caused an 
            exception to be thrown.  However, if an exception is thrown, the <see cref="E:BNSharp.BattleNet.BattleNetClient.EventExceptionThrown">EventExceptionThrown event</see>
            will be raised on the client.  So, the sequence of external method calls that would happen in such an event, if the Moderation handler threw an exception, 
            would be something along these lines:</para>
            <list type="bullet">
                <item>ChannelModerationHandler.client_UserJoined (raises exception)</item>
                <item>BattleNetClient.EventExceptionThrown</item>
                <item>ChatDisplay.client_UserJoined</item>
                <item>ChannelDisplay.client_UserJoined</item>
            </list>
            </example>
            <para>Typically, all listeners of the EventExceptionThrown event are <b>not</b> guaranteed to be called and follow normal .NET event semantics.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.EventExceptionEventArgs.ToString">
            <summary>
            Gets a string representation of this event data.
            </summary>
            <remarks>
            <para>The results of this method vary based on the type of build passed.  For builds with the DEBUG constant defined, 
            the result will be a verbose response.  For builds without it defined, it will limit itself to basic information.  For 
            more information, see <see cref="M:BNSharp.EventExceptionEventArgs.ToString(System.String)">ToString(string)</see>.</para>
            </remarks>
            <returns>A string representation of this event data.</returns>
        </member>
        <member name="M:BNSharp.EventExceptionEventArgs.ToString(System.String)">
            <summary>
            Gets a string representation of this event data.
            </summary>
            <param name="type">The type of representation to return.  <c>"v"</c> results in verbose information; <c>"b"</c> results in basic information.</param>
            <returns>
            A string representation of this event data.
            </returns>
        </member>
        <member name="M:BNSharp.EventExceptionEventArgs.DumpObjectToBuilder(System.Int32,System.Object,System.Type,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <remarks>
            <para>Assumes all parameters are not null.</para>
            </remarks>
            <param name="indent"></param>
            <param name="obj"></param>
            <param name="t"></param>
            <param name="sb"></param>
        </member>
        <member name="P:BNSharp.EventExceptionEventArgs.Priority">
            <summary>
            Gets the <see cref="T:BNSharp.Priority">Priority</see> at which the event was executing.
            </summary>
        </member>
        <member name="P:BNSharp.EventExceptionEventArgs.Exception">
            <summary>
            Gets the <see cref="T:System.Exception">Exception</see> that is being reported.
            </summary>
        </member>
        <member name="P:BNSharp.EventExceptionEventArgs.FaultingMethod">
            <summary>
            Gets the <see>Delegate</see> that was being invoked during the failure.
            </summary>
        </member>
        <member name="P:BNSharp.EventExceptionEventArgs.EventName">
            <summary>
            Gets the name of the event that was being executed during the failure.
            </summary>
        </member>
        <member name="P:BNSharp.EventExceptionEventArgs.Sender">
            <summary>
            Gets the <c>sender</c> parameter of the method being invoked.
            </summary>
            <remarks>
            <para>This property typically returns the <see cref="T:BNSharp.BattleNet.BattleNetClient">BattleNetClient</see> that was executing the event.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.EventExceptionEventArgs.Args">
            <summary>
            Gets the event arguments that were passed along to the method.
            </summary>
        </member>
        <member name="T:BNSharp.EventExceptionEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for event exception events.
            </summary>
            <param name="sender">The object that originated the event (typically a <see cref="T:BNSharp.BattleNet.BattleNetClient">BattleNetClient</see>).</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.WarcraftRaceRecord">
            <summary>
            Contains information about a race as part of a Warcraft III profile containing race statistics.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.WarcraftRaceRecord.#ctor(BNSharp.BattleNet.Stats.Warcraft3IconRace,System.Int32,System.Int32)">
            <summary>
            Creates a new single <see>WarcraftRaceRecord</see>.
            </summary>
            <param name="race">The race represented by this record.</param>
            <param name="wins">The number of wins represented by this record.</param>
            <param name="losses">The number of losses represented by this record.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="wins"/> or 
            <paramref name="losses"/> are negative.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="race"/>
            is not defined by <see>Warcraft3IconRace</see>.</exception>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftRaceRecord.Wins">
            <summary>
            Gets the number of wins for this race record.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftRaceRecord.Losses">
            <summary>
            Gets the number of losses for this race record.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftRaceRecord.Race">
            <summary>
            Gets the race of this particular record.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs">
            <summary>
            Specifies the event arguments provided from Battle.net when the client is invited to join a new clan.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs.#ctor(System.Int32,System.String,System.String,System.String,System.String[])">
            <summary>
            Creates a new <see>ClanFormationInvitationEventArgs</see>.
            </summary>
            <param name="requestNumber">The unique ID of the request.</param>
            <param name="tag">The clan tag.</param>
            <param name="clanName">The full name of the new clan.</param>
            <param name="inviter">The user responsible for the invitation.</param>
            <param name="invitees">The users being invited.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs.RequestID">
            <summary>
            Gets the unique ID of the request.
            </summary>
            <remarks>
            <para>This value should be used in the response.</para>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>RequestID</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs.ClanTag">
            <summary>
            Gets the Tag of the clan being formed.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Tag</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs.ClanName">
            <summary>
            Gets the full name of the clan being formed.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Name</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs.InvitingUser">
            <summary>
            Gets the screen name of the user sending the invitation.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Inviter</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanFormationInvitationEventArgs.InvitedUsers">
            <summary>
            Gets a copy of the list of users being invited to join.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>InvitedUsers</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanFormationInvitationEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for clan formation invitation events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.UserEventHandler">
            <summary>
            Specifies the contract for chat events that involve another user, but not specifically communication.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.UserEventArgs">
            <summary>
            Specifies event information for chat events that involve another user, but not specifically communication.
            </summary>
            <para>An example of when this class would be used is for a user joined or user left event.</para>
        </member>
        <member name="M:BNSharp.UserEventArgs.#ctor(BNSharp.ChatEventType,BNSharp.BattleNet.ChatUser)">
            <summary>
            Creates a new <see>UserEventArgs</see> with the specified settings.
            </summary>
            <param name="eventType">The type of chat event.</param>
            <param name="user">A reference to the user involved in the event.</param>
        </member>
        <member name="P:BNSharp.UserEventArgs.User">
            <summary>
            Gets a reference to the user who was involved in the event.
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.CdKey">
            <summary>
            Provides utilities for decoding and otherwise validating
            CD keys of Blizzard products.  This class cannot be inherited.
            </summary>
            <threadsafety>This type is safe for multithreaded operations.</threadsafety>
        </member>
        <member name="M:BNSharp.MBNCSUtil.CdKey.#ctor(System.String)">
            <summary>
            Creates a CD key decoder for the specified key.
            </summary>
            <remarks>
            <para>This constructor only conducts initial validity checks to ensure that the CD key is valid; that is,
            it checks for a valid key length (13, 16, or 26 characters) and checks that the characters are valid 
            for the key type.  For example, Starcraft keys are numeric only, whereas Warcraft II, Diablo II, Lord
            of Destruction, Warcraft III, and The Frozen Throne keys are alphanumeric.</para>
            <para>Additional validity checks are conducted internally; however, these do not raise Exceptions.  To
            confirm the validity of a key after instantiation, call the <b>CdKey</b>.<see cref="P:BNSharp.MBNCSUtil.CdKey.IsValid">IsValid</see>
            property.</para>
            </remarks>
            <param name="cdKey">The CD key to initialize processing for.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the value of <i>cdKey</i> is 
            <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the 
            CD key is an invalid length or does not pass initial 
            validity checks.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.CdKey.CreateDecoder(System.String)">
            <summary>
            Creates a CD key decoder for the specified key.
            </summary>
            <remarks>
            <para>This method only conducts initial validity checks to ensure that the CD key is valid; that is,
            it checks for a valid key length (13, 16, or 26 characters) and checks that the characters are valid 
            for the key type.  For example, Starcraft keys are numeric only, whereas Warcraft II, Diablo II, Lord
            of Destruction, Warcraft III, and The Frozen Throne keys are alphanumeric.</para>
            <para>Additional validity checks are conducted internally; however, these do not raise Exceptions.  To
            confirm the validity of a key after instantiation, call the <b>CdKey</b>.<see cref="P:BNSharp.MBNCSUtil.CdKey.IsValid">IsValid</see>
            property.</para>
            <para>This method is only a wrapper for the CdKey constructor and provides no additional
            functionality.</para>
            </remarks>
            <param name="key">The CD key to initialize processing for.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the value of <i>key</i> is 
            <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the 
            CD key is an invalid length or does not pass initial 
            validity checks.</exception>
            <returns>An instance of the CdKey class </returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.CdKey.GetValue2">
            <summary>
            Gets the "Private" or "Value 2" value of the CD key.
            </summary>
            <remarks>
            <para>This method returns <b>null</b> (<b>Nothing</b> in Visual Basic) if the CD key is not valid.  
            To check validity, use the <b>IsValid</b> property.</para>
            <para>For Starcraft, Warcraft II: Battle.net Edition, Diablo II, or Lord of Destruction CD keys,
            this value is a 4-byte array.  It can be converted to an integer value with the 
            <see cref="T:System.BitConverter">BitConverter</see> class.</para>
            <para>For Warcraft III: The Reign of Chaos and The Frozen Throne CD keys, this value is a 10-byte
            array.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.CdKey.GetHash(System.Int32,System.Int32)">
            <summary>
            Computes the 20-byte hash value of the CD key.
            </summary>
            <remarks>
            <para>The result of the hash calculation is used in the message 0x51 SID_AUTH_CHECK (from the client)
            as well as 0x36 SID_CDKEY2.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not yet been
            initialized.</exception>
            <param name="clientToken">A randomly-generated token value that is determined by session at the client.</param>
            <param name="serverToken">A randomly-generated token value that is determined by session at the server.</param>
            <returns>A 20-byte array containing the hash value of the specified key.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.CdKey.GetHash(System.UInt32,System.UInt32)">
            <summary>
            Computes the 20-byte hash value of the CD key.  This method is not CLS-compliant.
            </summary>
            <remarks>
            <para>The result of the hash calculation is used in the message 0x51 SID_AUTH_CHECK (from the client)
            as well as 0x36 SID_CDKEY2.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not yet been
            initialized.</exception>
            <param name="clientToken">A randomly-generated token value that is determined by session at the client.</param>
            <param name="serverToken">A randomly-generated token value that is determined by session at the server.</param>
            <returns>A 20-byte array containing the hash value of the specified key.</returns>
        </member>
        <member name="P:BNSharp.MBNCSUtil.CdKey.Key">
            <summary>
            Gets the CD key this object is processing.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not yet been
            initialized.</exception>
        </member>
        <member name="P:BNSharp.MBNCSUtil.CdKey.Product">
            <summary>
            Gets the product value encoded in the CD key.
            </summary>
            <remarks>This property returns 0 if the CD key is not valid.  To check validity, use the 
            <b>IsValid</b> property.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not yet been
            initialized.</exception>
        </member>
        <member name="P:BNSharp.MBNCSUtil.CdKey.Value1">
            <summary>
            Gets the "Public" or "Value 1" value of the CD key.
            </summary>
            <remarks>This property returns 0 if the CD key is not valid.  To check validity, use the 
            <b>IsValid</b> property.</remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not yet been
            initialized.</exception>
        </member>
        <member name="P:BNSharp.MBNCSUtil.CdKey.Value2">
            <summary>
            Gets the "Private" or "Value 2" value of the CD key.
            </summary>
            <remarks>
            <para>This property returns <b>null</b> (<b>Nothing</b> in Visual Basic) if the CD key is not valid.  
            To check validity, use the <b>IsValid</b> property.</para>
            <para>For Starcraft, Warcraft II: Battle.net Edition, Diablo II, or Lord of Destruction CD keys,
            this value is a 4-byte array.  It can be converted to an integer value with the 
            <see cref="T:System.BitConverter">BitConverter</see> class.</para>
            <para>For Warcraft III: The Reign of Chaos and The Frozen Throne CD keys, this value is a 10-byte
            array.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.MBNCSUtil.CdKey.IsValid">
            <summary>
            Gets whether or not the CD key is valid.
            </summary>
            <remarks>
            This property does not return whether or not this CD key is valid for Battle.net, but rather whether 
            the product's installer would accept the key as valid.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not yet been
            initialized.</exception>
        </member>
        <member name="T:BNSharp.MBNCSUtil.BncsReader">
            <summary>
            Completes a <see cref="T:BNSharp.MBNCSUtil.DataBuffer">DataBuffer</see> implementation with the additional
            data used by the BNCS protocol.
            </summary>
            <remarks>
            <para>When using this class with a Stream, the BncsReader only takes the next packet's data
            off of the stream.  An ideal example of this would be when using a <see cref="T:System.Net.Sockets.NetworkStream">NetworkSteam</see>
            to connect to Battle.net.  Incidentally, this constructor and method will block execution until new data has arrived.  Therefore,
            if your main receiving loop is going to use these methods, it should be on a background worker loop.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.MBNCSUtil.DataReader">
            <summary>
            Operates as a buffered data reader for network and file input.
            </summary>
            <remarks>
            <para>This class does not write data in any manner; for writing or sending data, 
            use the <see cref="T:BNSharp.MBNCSUtil.DataBuffer">DataBuffer</see> or derived classes.</para>
            <para>This class always uses little-endian byte ordering.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a new data reader with the specified stream as input.
            </summary>
            <remarks>
            <para>This constructor will block until a full packet has been returned.</para>
            </remarks>
            <param name="str">The stream from which to read.</param>
            <param name="length">The length of the data to read from the stream.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.#ctor(System.Byte[])">
            <summary>
            Creates a new data reader with the specified byte data.
            </summary>
            <param name="data">The data to read.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadBoolean">
            <summary>
            Reads a boolean value from the data stream.
            </summary>
            <remarks>
            <para>This method interprets a 32-bit value from the stream as false if it is zero and true if it is nonzero.</para>
            </remarks>
            <returns>The next boolean value from the data stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadByte">
            <summary>
            Reads a byte value from the data stream.
            </summary>
            <returns>The next byte from the data stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadByteArray(System.Int32)">
            <summary>
            Reads a byte array from the data stream.
            </summary>
            <param name="expectedItems">The number of bytes to read from the stream.</param>
            <returns>The next <i>expectedItems</i> bytes from the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadNullTerminatedByteArray">
            <summary>
            Reads a null-terminated byte array from the data stream.
            </summary>
            <remarks>
            <para>The return value includes the null terminator.</para>
            </remarks>
            <returns>The next byte array in the stream, terminated by a value of 0.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadInt16">
            <summary>
            Reads a signed 16-bit value from the data stream.
            </summary>
            <returns>The next 16-bit value from the data stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadInt16Array(System.Int32)">
            <summary>
            Reads an array of signed 16-bit values from the data stream.
            </summary>
            <param name="expectedItems">The number of 16-bit values to read from the stream.</param>
            <returns>The next <i>expectedItems</i> 16-bit values from the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadUInt16">
            <summary>
            Reads an unsigned 16-bit value from the data stream.
            </summary>
            <remarks>
            <para>This method is not CLS-compliant.</para>
            </remarks>
            <returns>The next 16-bit value from the data stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadUInt16Array(System.Int32)">
            <summary>
            Reads an array of unsigned 16-bit values from the data stream.
            </summary>
            <remarks>
            <para>This method is not CLS-compliant.</para>
            </remarks>
            <param name="expectedItems">The number of 16-bit values to read from the stream.</param>
            <returns>The next <i>expectedItems</i> 16-bit values from the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadInt32">
            <summary>
            Reads a signed 32-bit value from the data stream.
            </summary>
            <returns>The next 32-bit value from the data stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadInt32Array(System.Int32)">
            <summary>
            Reads an array of signed 32-bit values from the data stream.
            </summary>
            <param name="expectedItems">The number of 32-bit values to read from the stream.</param>
            <returns>The next <i>expectedItems</i> 32-bit values from the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadUInt32">
            <summary>
            Reads an unsigned 32-bit value from the data stream.
            </summary>
            <remarks>
            <para>This method is not CLS-compliant.</para>
            </remarks>
            <returns>The next 32-bit value from the data stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadUInt32Array(System.Int32)">
            <summary>
            Reads an array of signed 32-bit values from the data stream.
            </summary>
            <remarks>
            <para>This method is not CLS-compliant.</para>
            </remarks>
            <param name="expectedItems">The number of 32-bit values to read from the stream.</param>
            <returns>The next <i>expectedItems</i> 32-bit values from the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadInt64">
            <summary>
            Reads a signed 64-bit value from the data stream.
            </summary>
            <returns>The next 64-bit value from the data stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadInt64Array(System.Int32)">
            <summary>
            Reads an array of signed 64-bit values from the data stream.
            </summary>
            <param name="expectedItems">The number of 64-bit values to read from the stream.</param>
            <returns>The next <i>expectedItems</i> 64-bit values from the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadUInt64">
            <summary>
            Reads an unsigned 64-bit value from the data stream.
            </summary>
            <remarks>
            <para>This method is not CLS-compliant.</para>
            </remarks>
            <returns>The next 64-bit value from the data stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadUInt64Array(System.Int32)">
            <summary>
            Reads an array of unsigned 64-bit values from the data stream.
            </summary>
            <remarks>
            <para>This method is not CLS-compliant.</para>
            </remarks>
            <param name="expectedItems">The number of 64-bit values to read from the stream.</param>
            <returns>The next <i>expectedItems</i> 64-bit values from the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.Peek">
            <summary>
            Reads the next byte in the stream but does not consume it.
            </summary>
            <returns>A byte value (0-255) if the call succeeded, or else -1 if reading past the end of the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.PeekDwordString(System.Byte)">
            <summary>
            Peeks at the next possible four-byte string with the specified byte padding without advancing the index.
            </summary>
            <param name="padding">The byte used to pad the string to total four bytes.</param>
            <returns>The next 4-byte string, reversed, from the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadDwordString(System.Byte)">
            <summary>
            Reads the next possible four-byte string with the specified byte padding.
            </summary>
            <param name="padding">The byte used to pad the string to total four bytes.</param>
            <returns>The next 4-byte string, reversed, from the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadCString">
            <summary>
            Reads the next C-style ASCII null-terminated string from the stream.
            </summary>
            <returns>The next C-style string.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadCString(System.Text.Encoding)">
            <summary>
            Reads the next C-style null-terminated string from the stream.
            </summary>
            <param name="enc">The encoding used for the string.</param>
            <returns>The next C-style string encoded with the specified encoding.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadPascalString">
            <summary>
            Reads the next pascal-style ASCII string from the stream.
            </summary>
            <returns>The next pascal-style string.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadPascalString(System.Text.Encoding)">
            <summary>
            Reads the next pascal-style string from the stream.
            </summary>
            <param name="enc">The encoding used for the string.</param>
            <returns>The next pascal-style string encoded with the specified encoding.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadWidePascalString">
            <summary>
            Reads the next wide-pascal-style string from the stream.
            </summary>
            <returns>The next wide-pascal-style string.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadWidePascalString(System.Text.Encoding)">
            <summary>
            Reads the next wide-pascal-style string from the stream.
            </summary>
            <param name="enc">The encoding used for the string.</param>
            <returns>The next wide-pascal-style string encoded with the specified encoding.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ReadTerminatedString(System.Char,System.Text.Encoding)">
            <summary>
            Returns the next variable-length string with the specified terminator character.
            </summary>
            <param name="Terminator">The terminator that should indicate the end of the string.</param>
            <param name="enc">The encoding to use to read the string.</param>
            <returns>A variable-length string with no NULL (0) characters nor the terminator character.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.Seek(System.Int32)">
            <summary>
            Checks to see whether the offset from the current position lies within the stream and, if so, advances to
            that position relative to the current location.
            </summary>
            <param name="offset">The number of bytes beyond the current position to advance to.</param>
            <returns><b>True</b> if the position lies within the stream and the cursor was advanced; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataReader.ToString">
            <summary>
            Gets a hex representation of this buffer.
            </summary>
            <returns>A string representing this buffer's contents in hexadecimal notation.</returns>
        </member>
        <member name="P:BNSharp.MBNCSUtil.DataReader.Data">
            <summary>
            Gets a copy of the data used by the current instance.  When overridden in a 
            derived class, allows this class to access an alternative data source.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.DataReader.UnderlyingBuffer">
            <summary>
            Gets a reference to the underlying buffer.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.DataReader.Length">
            <summary>
            Gets the length of the data.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.DataReader.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.BncsReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a new data reader with the specified stream as input.
            </summary>
            <param name="str">The stream from which to read.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <b>str</b>
            is <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.BncsReader.#ctor(System.Byte[])">
            <summary>
            Creates a new data reader with the specified byte data.
            </summary>
            <param name="data">The data to read.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <b>data</b> is 
            <b>null</b> (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.BncsReader.ToString">
            <summary>
            Gets a hex representation of this data.
            </summary>
            <returns>A string representing this buffer's contents in hexadecimal notation.</returns>
        </member>
        <member name="P:BNSharp.MBNCSUtil.BncsReader.Length">
            <summary>
            Gets the length of the data.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this reader is not yet initialized.</exception>
        </member>
        <member name="P:BNSharp.MBNCSUtil.BncsReader.PacketID">
            <summary>
            Gets or sets the ID of the packet as it was specified when it was created.
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.bnftp_filenotfound">
            <summary>
              Looks up a localized string similar to The specified file was not found by Battle.net..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.bnftp_ver1invalidProduct">
            <summary>
              Looks up a localized string similar to Only Starcraft, Starcraft: Brood War, Diablo II Retail, Diablo II: the Lord of Destruction, and Warcraft II: Battle.net Edition (STAR, SEXP, D2DV, D2XP, and W2BN, respectively) can use BnFTP version 1..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.bnftp_ver2invalidProduct">
            <summary>
              Looks up a localized string similar to Only Warcraft III: the Reign of Chaos, and Warcraft III: the Frozen Throne (WAR3 and W3XP, respectively) can use BnFTP version 2..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.cdKeyArgNull">
            <summary>
              Looks up a localized string similar to The value specified for the CD key is null..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.crevExtrMpqNum_NoLockdown">
            <summary>
              Looks up a localized string similar to Extraction of MPQ number is not supported on Lockdown MPQs.  The entire Lockdown DLL file must be passed into the Lockdown CheckRevision function.  See the CheckRevision class documentation for more information..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.crExeFileNull">
            <summary>
              Looks up a localized string similar to The file name cannot be null..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.crFileListInvalid">
            <summary>
              Looks up a localized string similar to You must specify a list of exactly three files for the revision check..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.crFileListNull">
            <summary>
              Looks up a localized string similar to You must specify a 3-file list for the revision check..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.crMpqNameArgShort">
            <summary>
              Looks up a localized string similar to The name of the MPQ version file must be greater than 7 characters long..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.crMpqNameNull">
            <summary>
              Looks up a localized string similar to The MPQ name parameter cannot be null..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.crValstringNull">
            <summary>
              Looks up a localized string similar to The value string parameter cannot be null for a revision check..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.d2dv">
            <summary>
              Looks up a localized string similar to D2DV.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.d2xp">
            <summary>
              Looks up a localized string similar to D2XP.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.dataNull">
            <summary>
              Looks up a localized string similar to The specified data buffer was null..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.encNull">
            <summary>
              Looks up a localized string similar to The specified encoding parameter was null..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.exeInfoFmt">
            <summary>
              Looks up a localized string similar to {0} {1:d1}/{2:d2}/{3:d2} {4:d2}:{5:d2}:{6:d2} {7}.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.fileNotFound">
            <summary>
              Looks up a localized string similar to The specified file was not found..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.fileNull">
            <summary>
              Looks up a localized string similar to The specified value for the local file name was null..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.invalidCdKeyGeneral">
            <summary>
              Looks up a localized string similar to The CD key must be a valid 13-, 16-, or 26-character key..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.invalidCdKeyHashed">
            <summary>
              Looks up a localized string similar to You cannot calculate the key hash on an invalid key..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.invalidCdKeySc">
            <summary>
              Looks up a localized string similar to The CD key specified is not a valid Starcraft CD key..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.invalidCdKeyWar2">
            <summary>
              Looks up a localized string similar to The CD key specified is not a valid Warcraft II/Diablo II/Lord of Destruction CD key..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.invalidCdKeyWar3">
            <summary>
              Looks up a localized string similar to The CD key specified is not a valid Warcraft III/Frozen Throne CD key..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.mpq_badOpenMode">
            <summary>
              Looks up a localized string similar to The MPQ file was not able to be opened in the specified mode..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.mpq_fileNotFound">
            <summary>
              Looks up a localized string similar to The specified file could not be found in the MPQ archive..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.mpq_mpqArchiveCorrupt">
            <summary>
              Looks up a localized string similar to The MPQ file is corrupt..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.mpq_UnknownErrorType">
            <summary>
              Looks up a localized string similar to Unknown MPQ API error: {0}.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.mpqFilePathArgNull">
            <summary>
              Looks up a localized string similar to The path to the MPQ file cannot be null..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.nlsAcctCreateSpace">
            <summary>
              Looks up a localized string similar to There is insufficient space in the data buffer for the account creation packet..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.nlsAcctLoginSpace">
            <summary>
              Looks up a localized string similar to There is insufficient space in the data buffer for the account login packet..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.nlsLoginProofSpace">
            <summary>
              Looks up a localized string similar to There is insufficient space in the data buffer for the account login proof packet..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.nlsSalt32">
            <summary>
              Looks up a localized string similar to The salt value was not 32 bytes..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.nlsServerKey32">
            <summary>
              Looks up a localized string similar to The server key was not 32 bytes..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.nlsServerProof20">
            <summary>
              Looks up a localized string similar to The server proof value must be exactly 20 bytes..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.nlsSrvSig128">
            <summary>
              Looks up a localized string similar to The server signature must be exactly 128 bytes..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.notInitialized">
            <summary>
              Looks up a localized string similar to The object you attempted to access has not yet been initialized.  You must call the Initialize method on the object before it can be used..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.objAlreadyInited">
            <summary>
              Looks up a localized string similar to An object was already initiated at the call for initiation..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.objNotInited">
            <summary>
              Looks up a localized string similar to An object was not initialized prior to use..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_cdKey">
            <summary>
              Looks up a localized string similar to cdKey.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_data">
            <summary>
              Looks up a localized string similar to data.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_enc">
            <summary>
              Looks up a localized string similar to enc.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_fileName">
            <summary>
              Looks up a localized string similar to fileName.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_len">
            <summary>
              Looks up a localized string similar to len.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_mpqFilePath">
            <summary>
              Looks up a localized string similar to mpqFilePath.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_productId">
            <summary>
              Looks up a localized string similar to productId.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_salt">
            <summary>
              Looks up a localized string similar to salt.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_serverKey">
            <summary>
              Looks up a localized string similar to serverKey.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_str">
            <summary>
              Looks up a localized string similar to str.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.param_value">
            <summary>
              Looks up a localized string similar to value.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.sexp">
            <summary>
              Looks up a localized string similar to SEXP.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.star">
            <summary>
              Looks up a localized string similar to STAR.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.streamNull">
            <summary>
              Looks up a localized string similar to The specified stream is null..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.strNull">
            <summary>
              Looks up a localized string similar to The specified string is null..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.strTooLongFmt">
            <summary>
              Looks up a localized string similar to String length was too long; max length {0}..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.valMustBeGTZero">
            <summary>
              Looks up a localized string similar to The specified parameter must be greater than zero (0)..
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.w2bn">
            <summary>
              Looks up a localized string similar to W2BN.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.w3xp">
            <summary>
              Looks up a localized string similar to W3XP.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.war3">
            <summary>
              Looks up a localized string similar to WAR3.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Resources.xshaMaxHash1024">
            <summary>
              Looks up a localized string similar to Cannot hash more than 1024 bytes..
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.RecordKeyType">
            <summary>
            Specifies the type of record key to look up for statistics.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.RecordKeyType.Wins">
            <summary>
            Specifies the Wins value.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.RecordKeyType.Losses">
            <summary>
            Specifies the Losses value.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.RecordKeyType.Disconnects">
            <summary>
            Specifies the Disconnects value.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.RecordKeyType.LastGame">
            <summary>
            Specifies the Last Game value.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.RecordKeyType.LastGameResult">
            <summary>
            Specifies the Last Game Result value.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.RecordKeyType.Rating">
            <summary>
            Specifies the Rating value.  This is only valid for <see cref="T:BNSharp.BattleNet.ProfileRecordKeyType">Ladder</see> and 
            <see cref="T:BNSharp.BattleNet.ProfileRecordKeyType">IronManLadder</see> profile record key requests.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.RecordKeyType.HighRating">
            <summary>
            Specifies the High Rating value.  This is only valid for <see cref="T:BNSharp.BattleNet.ProfileRecordKeyType">Ladder</see> and 
            <see cref="T:BNSharp.BattleNet.ProfileRecordKeyType">IronManLadder</see> profile record key requests.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.RecordKeyType.Rank">
            <summary>
            Specifies the Rank value.  This is only valid for <see cref="T:BNSharp.BattleNet.ProfileRecordKeyType">Ladder</see> and 
            <see cref="T:BNSharp.BattleNet.ProfileRecordKeyType">IronManLadder</see> profile record key requests.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.RecordKeyType.HighRank">
            <summary>
            Specifies the High Rank value.  This is only valid for <see cref="T:BNSharp.BattleNet.ProfileRecordKeyType">Ladder</see> and 
            <see cref="T:BNSharp.BattleNet.ProfileRecordKeyType">IronManLadder</see> profile record key requests.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMemberStatusEventArgs">
            <summary>
            Specifies the event arguments for a clan member's status change event.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanMemberStatusEventArgs.#ctor(BNSharp.BattleNet.Clans.ClanMember)">
            <summary>
            Creates a new <see>ClanMemberStatusEventArgs</see>.
            </summary>
            <param name="associatedMember">The members whose status has changed.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMemberStatusEventArgs.Member">
            <summary>
            Gets the associated clan member.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Member</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMemberStatusEventHandler">
            <summary>
            Specifies the contract for handlers of clan member status events.
            </summary>
            <param name="sender">The <see>BattleNetClient</see> that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanCandidatesSearchStatus">
            <summary>
            Specifies the status of a clan candidates search.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanCandidatesSearchStatus.Success">
            <summary>
            Indicates that the search was a success and that the tag is available.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanCandidatesSearchStatus.ClanTagTaken">
            <summary>
            Indicates that the requested tag is already taken.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanCandidatesSearchStatus.AlreadyInClan">
            <summary>
            Indicates that the client user is already in a clan.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanCandidatesSearchStatus.InvalidTag">
            <summary>
            Specifies the tag requested was invalid.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.ChatUser">
            <summary>
            Represents a user found in a channel.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.ChatUser.#ctor(System.String,System.Int32,BNSharp.UserFlags,BNSharp.BattleNet.Stats.UserStats)">
            <summary>
            Creates a new <see>ChatUser</see>.
            </summary>
            <param name="userName">Specifies the user's fully-qualified username, including possibly the character name, 
            name separator (for Diablo 2 characters), and realm namespace qualifier.</param>
            <param name="ping">The user's latency.</param>
            <param name="flags">The user's flags.</param>
            <param name="stats">The user's stats.</param>
            <remarks>
            <para>The user's stats can be determined by passing the username and binary statsring value to 
            <see cref="M:BNSharp.BattleNet.Stats.UserStats.Parse(System.String,System.Byte[])">UserStats.Parse</see>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.ChatUser.Ping">
            <summary>
            Gets, and in derived classes sets, the user's latency to Battle.net.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.ChatUser.Flags">
            <summary>
            Gets, and in derived classes sets, user-specific flags.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.ChatUser.Username">
            <summary>
            Gets the user's full display name.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.ChatUser.Stats">
            <summary>
            Gets the user's stats.
            </summary>
            <remarks>
            <para>For more information about the user's stats, you should check the <see cref="P:BNSharp.BattleNet.Stats.UserStats.Product">Product</see>
            property of the object and then cast to one of the descendant classes.  For more information, see 
            <see>UserStats</see>.</para>
            </remarks>
            <seealso cref="T:BNSharp.BattleNet.Stats.UserStats"/>
            <seealso cref="T:BNSharp.BattleNet.Stats.Warcraft3Stats"/>
            <seealso cref="T:BNSharp.BattleNet.Stats.Diablo2Stats"/>
            <seealso cref="T:BNSharp.BattleNet.Stats.StarcraftStats"/>
            <seealso cref="T:BNSharp.BattleNet.Stats.DefaultStats"/>
        </member>
        <member name="T:BNSharp.Plugins.IWardenModule">
            <summary>
            When implemented, allows a custom class to handle Warden packets.
            </summary>
        </member>
        <member name="M:BNSharp.Plugins.IWardenModule.InitWarden(System.Int32)">
            <summary>
            Initializes the Warden module with the specified CD key hash part, the native socket handle, and the game file.
            </summary>
            <param name="keyHashPart">The key hash part provided.</param>
            <returns><see langword="true" /> if successful; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:BNSharp.Plugins.IWardenModule.UninitWarden">
            <summary>
            Uninitializes the Warden module.
            </summary>
        </member>
        <member name="M:BNSharp.Plugins.IWardenModule.ProcessWarden(System.Byte[])">
            <summary>
            Processes the warden challenge.
            </summary>
            <param name="wardenPacket">A copy of the original buffer sent by the server.</param>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Data.MpqServices">
            <summary>
            Provides access to the loading and unloading of MPQ archives.  This class cannot be instantiated or inherited.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqServices.OpenArchive(System.String)">
            <summary>
            Opens an MPQ archive at the specified path.
            </summary>
            <param name="fullPath">The path to the MPQ archive.</param>
            <returns>An <see cref="T:BNSharp.MBNCSUtil.Data.MpqArchive">MpqArchive</see> instance representing the archive.</returns>
            <exception cref="T:BNSharp.MBNCSUtil.Data.MpqException">Thrown if there is an error with the MPQ archive.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqServices.CloseArchive(BNSharp.MBNCSUtil.Data.MpqArchive)">
            <summary>
            Closes an MPQ archive.
            </summary>
            <param name="archive">The archive to close.</param>
        </member>
        <member name="T:BNSharp.ChatMessageEventHandler">
            <summary>
            Specifies the contract for chat events that involve another user and communication.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.ChatMessageEventArgs">
            <summary>
            Represents the event information associated with a chat event with a given user and communication.
            </summary>
        </member>
        <member name="M:BNSharp.ChatMessageEventArgs.#ctor(BNSharp.ChatEventType,BNSharp.UserFlags,System.String,System.String)">
            <summary>
            Creates a new instance of <see>ChatMessageEventArgs</see> with the given parameters.
            </summary>
            <param name="eventType">The type of event.</param>
            <param name="flags">The other user's flags.</param>
            <param name="username">The primarily involved user.</param>
            <param name="text">The message.</param>
        </member>
        <member name="P:BNSharp.ChatMessageEventArgs.Flags">
            <summary>
            Gets the flags of the user.
            </summary>
        </member>
        <member name="P:BNSharp.ChatMessageEventArgs.Username">
            <summary>
            Gets the name of the user who communicated.
            </summary>
        </member>
        <member name="P:BNSharp.ChatMessageEventArgs.Text">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.WarcraftProfileEventArgs">
            <summary>
            Contains information about a user's statistics and profile for Warcraft 3 clients.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.WarcraftProfileEventArgs.#ctor(System.String,BNSharp.BattleNet.Product)">
            <summary>
            Creates a new instance of <see>WarcraftProfileEventArgs</see>.
            </summary>
            <param name="userName">The name of the user profile.</param>
            <param name="product">The product for which the profile represents.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfileEventArgs.Username">
            <summary>
            Gets the name of the user whose profile was requested.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfileEventArgs.Product">
            <summary>
            Gets the product for which the profile was requested.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfileEventArgs.Profile">
            <summary>
            Gets (and in derived classes, sets) the <see>WarcraftProfile</see> for the given user.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfileEventArgs.Clan">
            <summary>
            Gets (and in derived classes, sets) the <see>ClanProfile</see> for the given user.
            </summary>
            <remarks>
            <para>This member may be <see langword="null"/> if the user is not in a clan.  To detect whether the user is in a clan, 
            check the <see cref="P:BNSharp.BattleNet.Stats.WarcraftProfileEventArgs.Profile">Profile property's</see> <see cref="P:BNSharp.BattleNet.Stats.WarcraftProfile.ClanTag">ClanTag</see> property.  If that 
            value is <see langword="null"/>, this property will be <see langword="null"/>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.WarcraftProfileEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for Warcraft 3 Profile events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMember">
            <summary>
            Represents a Battle.net Clan member.
            </summary>
            <remarks>
            <para>This class cannot be directly instantiated.  Rather, it is provided when you log on via the <see>TODO</see> event.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanMember.#ctor(System.String,BNSharp.BattleNet.Clans.ClanRank)">
            <summary>
            Creates a new <see>ClanMember</see> for a user who is currently offline.
            </summary>
            <param name="userName">The clan member's user name.</param>
            <param name="rank">The clan member's rank.</param>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanMember.#ctor(System.String,BNSharp.BattleNet.Clans.ClanRank,BNSharp.BattleNet.Clans.ClanMemberStatus,System.String)">
            <summary>
            Creates a new <see>ClanMember</see> for a user who is online or offline.
            </summary>
            <param name="userName">The clan member's user name.</param>
            <param name="rank">The clan member's rank.</param>
            <param name="status">The clan member's current status.</param>
            <param name="location">The name of the member's current location (such as a channel or game name).</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMember.Username">
            <summary>
            Gets the user's name.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Username</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMember.Rank">
            <summary>
            Gets, and in derived classes sets, the user's current <see cref="T:BNSharp.BattleNet.Clans.ClanRank">rank</see> within the clan.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Rank</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMember.CurrentStatus">
            <summary>
            Gets, and in derived classes sets, the current location and status of the clan member.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>OnlineStatus</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMember.Location">
            <summary>
            Gets, and in derived classes sets, the user's current Battle.net location, if the user is online.
            </summary>
            <remarks>
            <para>This property will return <see langword="null" /> if the user is not online.</para>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Location</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanChieftanChangeEventArgs">
            <summary>
            Specifies the status of an attempt to designate a new clan leader.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanChieftanChangeEventArgs.#ctor(BNSharp.BattleNet.Clans.ClanChieftanChangeResult)">
            <summary>
            Creates a new <see>ClanChieftanChangeEventArgs</see>.
            </summary>
            <param name="result">The result code from Battle.net.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanChieftanChangeEventArgs.Result">
            <summary>
            Gets the result of the change attempt.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Result</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanChieftanChangeEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for clan chieftan change command events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.UserProfileEventArgs">
            <summary>
            Specifies a user profile that has been populated by Battle.net.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.UserProfileEventArgs.#ctor(BNSharp.BattleNet.UserProfileRequest)">
            <summary>
            Creates a new <see>UserProfileEventArgs</see> with the specified profile.
            </summary>
            <param name="filledProfile">The profile that had been populated.</param>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileEventArgs.Profile">
            <summary>
            Gets the user profile result from the request.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.UserProfileEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for user profile events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanRemovalResponseEventArgs">
            <summary>
            Contains information about the result of an attempt of the client to remove another member from the clan.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanRemovalResponseEventArgs.#ctor(System.Int32,BNSharp.BattleNet.Clans.ClanMemberRemovalResponse)">
            <summary>
            Creates a new <see>ClanRemovalResponseEventArgs</see>.
            </summary>
            <param name="requestID">The request ID assigned to the request.</param>
            <param name="response">The response from the server.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanRemovalResponseEventArgs.RequestID">
            <summary>
            Gets the request ID associated with the request.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanRemovalResponseEventArgs.Response">
            <summary>
            Gets the user's or server's response to the request.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanRemovalResponseEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for clan member removal response events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMemberRankChangeEventArgs">
            <summary>
            Contains information about when the client's user's clan rank has changed.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanMemberRankChangeEventArgs.#ctor(BNSharp.BattleNet.Clans.ClanRank,BNSharp.BattleNet.Clans.ClanRank,BNSharp.BattleNet.Clans.ClanMember)">
            <summary>
            Creates a new instance of <see>ClanMemberRankChangeEventArgs</see>.
            </summary>
            <param name="oldRank">The previous rank.</param>
            <param name="newRank">The new rank.</param>
            <param name="memberWhoChangedTheRank">The member who was responsible for the rank change.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMemberRankChangeEventArgs.PreviousRank">
            <summary>
            Gets your previous clan rank.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>PreviousRank</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMemberRankChangeEventArgs.NewRank">
            <summary>
            Gets your new clan rank.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>NewRank</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanMemberRankChangeEventArgs.MemberResponsible">
            <summary>
            Gets the <see>ClanMember</see> who changed the rank.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>MemberResponsible</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMemberRankChangeEventHandler">
            <summary>
            Specifies the contract for when handlers want to take care of the event in which the client's clan rank has changed.
            </summary>
            <param name="sender">The <see>BattleNetClient</see> that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanFormationEventArgs">
            <summary>
            Specifies information provided by Battle.net when the client attempts to form a clan.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanFormationEventArgs.#ctor">
            <summary>
            Creates a new <see>ClanFormationEventArgs</see> indicating success.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanFormationEventArgs.#ctor(System.Boolean,System.Boolean,System.String[])">
            <summary>
            Creates a new <see>ClanFormationEventArgs</see> indicating failure.
            </summary>
            <param name="declined">Whether the failure is due to users declining.</param>
            <param name="unavailable">Whether the failure is due to users being unavailable.</param>
            <param name="failedAccounts">The accounts that failed.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanFormationEventArgs.Succeeded">
            <summary>
            Gets whether the invitation succeeded.
            </summary>
            <remarks>
            <para>When this property returns <see langword="true" />, the <see>FailureAccountNames</see> property will return a zero-length array.</para>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Succeeded</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanFormationEventArgs.UsersDeclined">
            <summary>
            Gets whether the invitation failed because users declined.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Declined</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanFormationEventArgs.UsersWereUnavailable">
            <summary>
            Gets whether the invitation failed because users were unavailable.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Unavailable</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanFormationEventArgs.FailureAccountNames">
            <summary>
            Gets a copy of the account names that failed being invited.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>FailedAccounts</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanFormationEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for clan formation events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanRankChangeStatus">
            <summary>
            Specifies the status codes associated with changing a clan member's rank.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanRankChangeStatus.Success">
            <summary>
            Indicates a success.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanRankChangeStatus.Failed">
            <summary>
            Indicates a general failure.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanRankChangeStatus.UserIsTooNew">
            <summary>
            Indicates that the user is too new to be moved from Initiate status.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanRankChangeStatus.NotAnOfficer">
            <summary>
            Indicates that the user requesting the change is not an officer.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanRankChangeStatus.TargetIsTooHigh">
            <summary>
            Indicates that the user being changed is higher than the user requesting the change.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanRankChangeEventArgs">
            <summary>
            Represents the result of an attempt to change a user's clan rank.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanRankChangeEventArgs.#ctor(System.String,BNSharp.BattleNet.Clans.ClanRankChangeStatus)">
            <summary>
            Creates a new <see>ClanRankChangeEventArgs</see>.
            </summary>
            <param name="memberName">The name of the target user.</param>
            <param name="status">The result of the change request.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanRankChangeEventArgs.MemberName">
            <summary>
            Gets the name of the user whose rank was requested to be changed.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanRankChangeEventArgs.Status">
            <summary>
            Gets the status of the change request.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanRankChangeEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for clan rank change response events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.AccountDNECreating">
            <summary>
              Looks up a localized string similar to The account &apos;{0}&apos; does not exist.  Attempting to create....
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_InviteUsersToNewClan_NullUser">
            <summary>
              Looks up a localized string similar to One or more names of users to invite is null..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_InviteUsersToNewClan_WrongUserCount">
            <summary>
              Looks up a localized string similar to Exactly 9 users may be invited to form a new clan..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_InviteUserToClan_NullUser">
            <summary>
              Looks up a localized string similar to Clan invitation user must not be null or zero-length..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_LoginAccountOld_ClientNotSupported_fmt">
            <summary>
              Looks up a localized string similar to Client &apos;{0}&apos; is not supported with old-style account login..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Send_NotConnected">
            <summary>
              Looks up a localized string similar to The client must be connected in order to send a message..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Send_TooLong">
            <summary>
              Looks up a localized string similar to Maximum text length is 223 characters..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_setCommandQueue_Connected">
            <summary>
              Looks up a localized string similar to Cannot change the command queue implementation while the client is connected..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_CdKey1Null">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.CdKey1 contained a null or zero-length string..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_CdKey2Null">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.CdKey2 contained a null or zero-length string, but the specified product requires two CD keys..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_ClientTypeCantConnect">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.Client did not specify a client that could connect.  Valid values are STAR, SEXP, D2DV, D2XP, W2BN, WAR3, and W3XP..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_GameExeDNE">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.GameExe did not point to a valid file..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_GameFile2DNE">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.GameFile2 did not point to a valid file..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_GameFile3DNE">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.GameFile3 did not point to a valid file..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_GameImageFileDNE">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.ImageFile did not point to a valid file, but the selected product uses the Lockdown method of versioning..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_InvalidClientType">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.Client was not valid because it did not specify a valid client type..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_KeyOwnerNull">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.CdKeyOwner was null or zero-length..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_PasswordNull">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.Password was null or zero-length..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_PingTypeInvalid">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.PingType was not a valid enumeration member for the PingType enumeration..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.BnetClient_Validate_UsernameNull">
            <summary>
              Looks up a localized string similar to IBattleNetSettings.Username was null or zero-length..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ChannelFlags_GloballyAccessibleChannel">
            <summary>
              Looks up a localized string similar to a globally-accessible channel.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ChannelFlags_ModeratedChannel">
            <summary>
              Looks up a localized string similar to a moderated channel.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ChannelFlags_None">
            <summary>
              Looks up a localized string similar to a private channel.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ChannelFlags_ProductSpecificChannel">
            <summary>
              Looks up a localized string similar to a product-specific channel.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ChannelFlags_PublicChannel">
            <summary>
              Looks up a localized string similar to a public channel.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ChannelFlags_RestrictedChannel">
            <summary>
              Looks up a localized string similar to a restricted channel.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ChannelFlags_SilentChannel">
            <summary>
              Looks up a localized string similar to a silent channel.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ChannelFlags_SystemChannel">
            <summary>
              Looks up a localized string similar to a system channel.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ConnectionBase_Connect_ConnectFailed_fmt">
            <summary>
              Looks up a localized string similar to The connection was unable to complete a connection to {0}:{1} ({2}).  More information is available in the exception..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ConnectionBase_Connect_ResolveFailed_fmt">
            <summary>
              Looks up a localized string similar to Your computer was unable to resolve hostname {0}.  If necessary, add an entry to %SystemRoot%\system32\drivers\etc\hosts, or flush your DNS resolver cache, and try again..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.InvalidPacketSizeFromBnet">
            <summary>
              Looks up a localized string similar to Battle.net specified an invalid packet size..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.InvalidUsernameOrPassword">
            <summary>
              Looks up a localized string similar to Invalid username and/or password..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.LoginProofClientProofFailed">
            <summary>
              Looks up a localized string similar to The server rejected your password..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.LoginProofCustomError">
            <summary>
              Looks up a localized string similar to The server rejected your password with a specific error message: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.LoginProofRegisterEmail">
            <summary>
              Looks up a localized string similar to Logon success!  Battle.net has requested that you register an e-mail address with this account.  You will not be notified again..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.LoginProofServerProofFailed">
            <summary>
              Looks up a localized string similar to The server was unable to verify that it knew your password; you may be connecting to a malicious server..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.LoginProofSuccess">
            <summary>
              Looks up a localized string similar to Logon success!  Entering chat....
            </summary>
        </member>
        <member name="P:BNSharp.Strings.NameCreateFail10">
            <summary>
              Looks up a localized string similar to The specified user name contained too few alphanumeric characters..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.NameCreateFail11">
            <summary>
              Looks up a localized string similar to The specified user name contained too many adjacent punctuation characters..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.NameCreateFail12">
            <summary>
              Looks up a localized string similar to The specified user name contained too many punctuation characters..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.NameCreateFail7">
            <summary>
              Looks up a localized string similar to The specified user name was too short or blank.  User names should be at least 3 characters long..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.NameCreateFail8">
            <summary>
              Looks up a localized string similar to The specified user name contained one or more illegal characters..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.NameCreateFail9">
            <summary>
              Looks up a localized string similar to The specified user name contained one or more illegal words..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.NameCreateFailOther">
            <summary>
              Looks up a localized string similar to The specified user name already exists..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.NameCreateSuccess">
            <summary>
              Looks up a localized string similar to Successfully created account name &apos;{0}&apos;.  Logging in....
            </summary>
        </member>
        <member name="P:BNSharp.Strings.param_channelName">
            <summary>
              Looks up a localized string similar to channelName.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.param_clanName">
            <summary>
              Looks up a localized string similar to clanName.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.param_clanTag">
            <summary>
              Looks up a localized string similar to clanTag.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.param_memberToRemove">
            <summary>
              Looks up a localized string similar to memberToRemove.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.param_name">
            <summary>
              Looks up a localized string similar to name.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.param_newChieftanName">
            <summary>
              Looks up a localized string similar to newChieftanName.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.param_newRank">
            <summary>
              Looks up a localized string similar to newRank.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.param_text">
            <summary>
              Looks up a localized string similar to text.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.param_usersToInvite">
            <summary>
              Looks up a localized string similar to usersToInvite.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.param_userToInvite">
            <summary>
              Looks up a localized string similar to userToInvite.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdCHAT">
            <summary>
              Looks up a localized string similar to Chat client.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdD2DV">
            <summary>
              Looks up a localized string similar to Diablo II (Retail).
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdD2SH">
            <summary>
              Looks up a localized string similar to Diablo 2: Shareware.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdD2XP">
            <summary>
              Looks up a localized string similar to Diablo II: The Lord of Destruction.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdDRTL">
            <summary>
              Looks up a localized string similar to Diablo Classic (Retail).
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdDSHR">
            <summary>
              Looks up a localized string similar to Diablo Classic (Shareware).
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdJSTR">
            <summary>
              Looks up a localized string similar to Japan Starcraft.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdSEXP">
            <summary>
              Looks up a localized string similar to Starcraft: Brood War.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdSSHR">
            <summary>
              Looks up a localized string similar to Starcraft: Shareware.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdSTAR">
            <summary>
              Looks up a localized string similar to Starcraft (Retail).
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdUNKN">
            <summary>
              Looks up a localized string similar to An Unknown Product or Client.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdW2BN">
            <summary>
              Looks up a localized string similar to Warcraft II: Battle.net Edition.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdW3XP">
            <summary>
              Looks up a localized string similar to Warcraft III: The Frozen Throne.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ProdWAR3">
            <summary>
              Looks up a localized string similar to Warcraft III: The Reign of Chaos.
            </summary>
        </member>
        <member name="P:BNSharp.Strings.ReceivedTooLongMessage">
            <summary>
              Looks up a localized string similar to Battle.net has sent a packet that exceeds the maximum length supported..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.UnableToConnectFmt">
            <summary>
              Looks up a localized string similar to The connection was unable to complete a connection to {0}:{1} (&apos;{2}&apos;).  More information is available in the exception..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.UnableToResolveHostFmt">
            <summary>
              Looks up a localized string similar to Your computer was unable to resolve host name &apos;{0}&apos;.  If necessary, add an entry to %SystemRoot%\system32\drivers\etc\hosts, or flush your DNS resolver cache, and try again..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.UpgradeRequestedUnsupported">
            <summary>
              Looks up a localized string similar to Battle.net has requested that your account be upgraded, but this is not supported.  Please upgrade your account via the official Warcraft III client..
            </summary>
        </member>
        <member name="P:BNSharp.Strings.War3ServerValidationFailed">
            <summary>
              Looks up a localized string similar to The Warcraft 3 server validation check failed.  You may not be connecting to a legitimate Battle.net server..
            </summary>
        </member>
        <member name="T:BNSharp.Priority">
            <summary>
            Specifies priorities for data handling. 
            </summary>
            <remarks>
            <para>When using BNSharp for a simple client, use of the Priority enumeration is optional.  However, if you want
            to develop something such as an extremely secure channel moderation client, it is highly recommended that you utilize both 
            the prioritized packet parsing engine and the prioritized event handler system.</para>
            </remarks>
        </member>
        <member name="F:BNSharp.Priority.High">
            <summary>
            Specifies the highest priority.  This enumeration value is 5.
            </summary>
        </member>
        <member name="F:BNSharp.Priority.Normal">
            <summary>
            Specifies the normal priority.  This enumeration value is 3.
            </summary>
        </member>
        <member name="F:BNSharp.Priority.Low">
            <summary>
            Specifies the lowest priority.  This enumeration value is 1.
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Data.MpqFileStream">
            <summary>
            Represents an MPQ file stream (that is, a stream within an MPQ file).
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqFileStream.Dispose">
            <summary>
            Disposes the MpqFileStream.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqFileStream.Dispose(System.Boolean)">
            <summary>
            Cleans up unmanaged resources in use.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if it is being finalized.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the underlying stream into the specified buffer.
            </summary>
            <param name="buffer">The buffer that will receive the data.</param>
            <param name="offset">The starting location in the buffer to get the data.</param>
            <param name="count">The amount of data to be read.</param>
            <remarks>
            <para>Rather than throwing an exception, if the buffer is too small to return the requested amount of 
            data, only as much data as the buffer can hold is returned.</para>
            </remarks>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Moves the current location within the stream to the specified location.
            </summary>
            <param name="offset">The offset relative to the seek origin.</param>
            <param name="origin">The seek origin.</param>
            <returns>The new position in the file.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqFileStream.Flush">
            <summary>
            Flushes the buffer to the underlying stream.
            </summary>
            <exception cref="T:System.NotImplementedException">Thrown whenever this method is called.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqFileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the underlying stream.
            </summary>
            <param name="value">The new length.</param>
            <exception cref="T:System.NotImplementedException">Thrown whenever this method is called.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.MpqFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the stream.
            </summary>
            <param name="buffer">The data to write.</param>
            <param name="offset">The offset into the buffer to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotImplementedException">Thrown whenever this method is called.</exception>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.MpqFileStream.Name">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.MpqFileStream.CanRead">
            <summary>
            Gets whether the stream supports reading.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.MpqFileStream.CanSeek">
            <summary>
            Gets whether the stream supports seeking.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.MpqFileStream.Length">
            <summary>
            Gets the length of the stream.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.MpqFileStream.Position">
            <summary>
            Gets or sets the offset from the beginning of the stream at which the stream is currently located.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.MpqFileStream.CanWrite">
            <summary>
            Gets whether this stream supports writing.
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Data.Blp2CompressionType">
            <summary>
            Specifies the types of compression supported by a BLP2 image.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.Data.Blp2CompressionType.Jpeg">
            <summary>
            Specifies that the image uses JPEG compression.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.Data.Blp2CompressionType.Palette">
            <summary>
            Specifies that the image is palettized.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.Data.Blp2CompressionType.DirectX">
            <summary>
            Specifies that the image uses DirectX-style compression.
            </summary>
        </member>
        <member name="T:BNSharp.Net.ConnectCompletedResult">
            <summary>
            Represents the result of a connection attempt made asynchronously.
            </summary>
        </member>
        <member name="M:BNSharp.Net.ConnectCompletedResult.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates a new <see>ConnectCompletedResult</see>.
            </summary>
        </member>
        <member name="P:BNSharp.Net.ConnectCompletedResult.State">
            <summary>
            Gets user-provided state associated with the connection attempt.
            </summary>
            <remarks>
            <para>This property returns the object provided via the <c>state</c> parameter of <see>ConnectionBase.ConnectAsync</see> method.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.Net.ConnectCompletedResult.Succeeded">
            <summary>
            Gets whether the connection succeeded.
            </summary>
        </member>
        <member name="T:BNSharp.Net.ConnectCompletedCallback">
            <summary>
            Specifies the signature of methods that should be implemented to handle an asynchronous connect method call.
            </summary>
            <param name="result">The result of the connection attempt.</param>
        </member>
        <member name="T:BNSharp.Net.BufferPool">
            <summary>
            Implements a pool of byte arrays to improve allocation performance when parsing data.
            </summary>
            <threadsafety>This type is safe for multithreaded operations.</threadsafety>
        </member>
        <member name="M:BNSharp.Net.BufferPool.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new buffer pool with the specified name, buffer sizes, and buffer count.
            </summary>
            <param name="poolName">The name of the pool.</param>
            <param name="baseBufferLength">The size of the preallocated buffers.</param>
            <param name="baseBufferCount">The number of preallocated buffers that should be available.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="baseBufferLength"/> or
            <paramref name="baseBufferCount"/> are zero or negative.</exception>
        </member>
        <member name="M:BNSharp.Net.BufferPool.Contains(System.Byte[])">
            <summary>
            Determines whether the specified buffer is already free.
            </summary>
            <param name="buffer">The buffer to check.</param>
            <returns><see langword="true" /> if the buffer is freed; otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:BNSharp.Net.BufferPool.GetBuffer">
            <summary>
            Gets a buffer from the available pool if one is available, or else allocates a new one.
            </summary>
            <remarks>
            <para>Buffers retrieved with this method should be returned to the pool by using the
            <see>FreeBuffer</see> method.</para>
            </remarks>
            <returns>A <see>byte</see>[] from the pool.</returns>
        </member>
        <member name="M:BNSharp.Net.BufferPool.FreeBuffer(System.Byte[])">
            <summary>
            Returns the specified buffer to the pool.
            </summary>
            <returns><see langword="true"/> if the buffer belonged to this pool and was freed; otherwise <see langword="false"/>.</returns>
            <remarks>
            <para>If the <see>ClearOnFree</see> property is <see langword="true"/>, then the buffer will be zeroed before 
            being restored to the pool.</para>
            </remarks>
            <param name="buffer">The buffer to return to the pool.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="buffer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BNSharp.Net.BufferPool.IncreaseBufferCount(System.Int32)">
            <summary>
            Increases the number of buffers available in the pool by a given size.
            </summary>
            <param name="buffersToAdd">The number of buffers to preallocate.</param>
            <exception cref="T:System.OutOfMemoryException">Thrown if the system is unable to preallocate the requested number of buffers.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="buffersToAdd"/> is less than or equal to 0.</exception>
            <remarks>
            <para>This method does not cause the <see>NewBufferAllocated</see> event to be raised.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.Net.BufferPool.DecreaseBufferCount(System.Int32)">
            <summary>
            Removes up to the specified number of buffers from the pool.
            </summary>
            <param name="buffersToRemove">The number of buffers to attempt to remove.</param>
            <returns>The number of buffers actually removed.</returns>
            <remarks>
            <para>The number of buffers removed may actually be lower than the number requested if the specified number of buffers are not free.
            For example, if the number of buffers free is 15, and the callee requests the removal of 20 buffers, only 15 will be freed, and so the
            returned value will be 15.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="buffersToRemove"/> is less than or equal to 0.</exception>
        </member>
        <member name="M:BNSharp.Net.BufferPool.OnNewBufferAllocated(System.EventArgs)">
            <summary>
            Fires the <see>NewBufferAllocated</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Net.BufferPool.OnBufferRequested(System.EventArgs)">
            <summary>
            Raises the <see>BufferRequested</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:BNSharp.Net.BufferPool.OnBufferReturned(System.EventArgs)">
            <summary>
            Raises the <see>BufferReturned</see> event.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:BNSharp.Net.BufferPool.Name">
            <summary>
            Gets the name of this pool.
            </summary>
            <remarks>
            <para>If no name is set, this property may return <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.Net.BufferPool.BufferLength">
            <summary>
            Gets the size of the buffers allocated from this pool.
            </summary>
        </member>
        <member name="P:BNSharp.Net.BufferPool.MaxBufferCount">
            <summary>
            Gets the maximum number of buffers available at any given time from this pool.
            </summary>
        </member>
        <member name="P:BNSharp.Net.BufferPool.BuffersAvailable">
            <summary>
            Gets the current number of buffers available for use.
            </summary>
        </member>
        <member name="P:BNSharp.Net.BufferPool.ClearOnFree">
            <summary>
            Gets or sets whether to zero the contents of a buffer when it is freed.  
            </summary>
            <remarks>
            <para>The default value of this is <see langword="true" />; however, it may be set to <see langword="false" /> to achieve
            a minor performance increase.</para>
            </remarks>
        </member>
        <member name="E:BNSharp.Net.BufferPool.NewBufferAllocated">
            <summary>
            Informs listeners when a new buffer beyond the initial length has been allocated.
            </summary>
        </member>
        <member name="E:BNSharp.Net.BufferPool.BufferRequested">
            <summary>
            Informs listeners that a buffer has been allocated.
            </summary>
        </member>
        <member name="E:BNSharp.Net.BufferPool.BufferReturned">
            <summary>
            Informs listeners that a buffer has been freed.
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Data.BniFileParser">
            <summary>
            Provides a parser for .bni files from Starcraft and Warcraft II: Battle.net Edition.
            </summary>
            <remarks>
            <para>It is incorrect to attempt to use this class to read a Warcraft III .BNI file.  Those files are .MPQ files, and should be read
            using the <see>MpqArchive</see> class.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.BniFileParser.#ctor(System.String)">
            <summary>
            Creates a new BNI file parser to parse the specified file.
            </summary>
            <param name="filePath">The path to the file to parse.</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file specified in <paramref name="filePath"/> does not exist.</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the file contains data types that are unsupported by this implementation.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.BniFileParser.#ctor(System.IO.Stream)">
            <summary>
            Creates a new BNI file parser from the specified stream.
            </summary>
            <param name="bniFileStream">The stream to load.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="bniFileStream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.IO.InvalidDataException">Thrown if the file contains data types that are unsupported by this implementation.</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.BniFileParser.Dispose">
            <summary>
            Disposes the object, freeing any managed and unmanaged resources.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.BniFileParser.FullImage">
            <summary>
            Gets the full image.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.BniFileParser.AllIcons">
            <summary>
            Gets all icons and their associated metadata.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.UserProfileKey">
            <summary>
            Represents a user profile request key.  This class cannot be inherited.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.UserProfileKey.GetRecordKey(BNSharp.BattleNet.ProfileRecordKeyType,BNSharp.BattleNet.RecordKeyType,BNSharp.BattleNet.Product)">
            <summary>
            Gets a user profile key for the specified type of statistic.
            </summary>
            <param name="profileType">The type of statistic (ladder, non-ladder).</param>
            <param name="recordType">The type of record (wins, losses).</param>
            <param name="client">The client for which to request.</param>
            <returns>A non-writeable UserProfileKey.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown if <paramref name="profileType"/> or <paramref name="recordType"/>
            are values that are not defined by their enumerations.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the product specified by <paramref name="client"/> was invalid, or if the 
            type of profile or record was not appropriate for the client (for example, IronMan Ladder is only valid for Warcraft II: 
            Battle.net Edition).</exception>
        </member>
        <member name="M:BNSharp.BattleNet.UserProfileKey.ToString">
            <inheritdoc />
        </member>
        <member name="M:BNSharp.BattleNet.UserProfileKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:BNSharp.BattleNet.UserProfileKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileKey.Sex">
            <summary>
            Gets the profile key corresponding to the user's Sex entry.
            </summary>
            <remarks>
            <para>This field is defunct in Starcraft and Warcraft III.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileKey.Age">
            <summary>
            Gets the profile key corresponding to the user's Age entry.
            </summary>
            <remarks>
            <para>This field is defunct on all Battle.net clients.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileKey.Location">
            <summary>
            Gets the profile key corresponding to the user's Location entry.
            </summary>
            <remarks>
            <para>This key may be used when writing the user profile.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileKey.Description">
            <summary>
            Gets the profile key corresponding to the user's Description entry.
            </summary>
            <remarks>
            <para>This key may be used when writing the user profile.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileKey.LastLogon">
            <summary>
            Gets the profile key corresponding to the time of the last logon.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileKey.LastLogoff">
            <summary>
            Gets the profile key corresponding to the time of the last logoff.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileKey.TotalTimeLogged">
            <summary>
            Gets the profile key corresponding to the total time logged in.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileKey.AccountCreated">
            <summary>
            Gets the profile key corresponding to the account creation time.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileKey.IsWriteable">
            <summary>
            Gets whether this key may be used when writing a profile update.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Util.LockdownCrev.CheckRevision(System.String,System.String,System.String,System.Byte[],System.Int32@,System.Int32@,System.Byte[]@,System.String,System.String)">
            <summary>
            Calculates the lockdown checkrevision.
            </summary>
            <param name="file1">The first game file</param>
            <param name="file2">The second game file</param>
            <param name="file3">The third game file</param>
            <param name="valueString">The value calculation string from the server</param>
            <param name="version">The version</param>
            <param name="checksum">The checksum</param>
            <param name="digest">The result</param>
            <param name="lockdownFile">The name of the lockdown file</param>
            <param name="imageDump">The path to the screen dump</param>
            <returns></returns>
        </member>
        <member name="T:BNSharp.MBNCSUtil.DataFormatter">
            <summary>
            Provides functions for printing bytes to various output devices.  This class cannot
            be inherited.
            </summary>
            <example>
            <para>This example demonstrates how the formatter prints out binary data.</para>
            <code language="c#">
            DataFormatter.WriteToConsole(XSha1.CalculateHash(Encoding.ASCII.GetBytes("password")));
            </code>
            <para><b>Output:</b></para>
            <code>
            0000   ec c8 0d 1d 76 e7 58 c0  b9 da 8c 25 ff 10 6a ff    ìE..vçXA.U.%ÿ.jÿ
            0010   8e 24 29 16                                         .$).
            </code>
            </example>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataFormatter.Format(System.Byte[])">
            <summary>
            Formats a data into 16-byte rows followed by an ASCII representation.
            </summary>
            <param name="data">The data to format.</param>
            <returns>A string representing the data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <b>data</b> is <b>null</b>
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataFormatter.Format(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Formats a data into 16-byte rows followed by an ASCII representation.
            </summary>
            <param name="data">The data to format.</param>
            <param name="startIndex">The starting position of the data to format.</param>
            <param name="length">The amount of data to format.</param>
            <returns>A string representing the data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <b>data</b> is <b>null</b>
            (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataFormatter.WriteToConsole(System.Byte[])">
            <summary>
            Writes a series of bytes to the console, printing them in 16-byte rows
            followed by an ASCII representation.
            </summary>
            <param name="data">The data to print.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataFormatter.WriteToTrace(System.Byte[])">
            <summary>
            Writes a series of bytes to trace listeners, printing them in 16-byte rows,
            followed by an ASCII representation.
            </summary>
            <param name="data">The data to print.</param>
        </member>
        <member name="M:BNSharp.MBNCSUtil.DataFormatter.WriteToTrace(System.Byte[],System.String)">
            <summary>
            Writes a series of bytes to trace listeners, printing them in 16-byte rows,
            followed by an ASCII representation.
            </summary>
            <param name="data">The data to print.</param>
            <param name="category">A category name to classify the data.</param>
        </member>
        <member name="T:BNSharp.EnteredChatEventHandler">
            <summary>
            Specifies the contract for event handlers wishing to listen to the entered chat event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.EnteredChatEventArgs">
            <summary>
            Specifies the event arguments for when the client entered chat.
            </summary>
        </member>
        <member name="M:BNSharp.EnteredChatEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see>EnteredChatEventArgs</see>.
            </summary>
            <param name="uniqueName">The unique display name of the client.</param>
            <param name="statstring">The client's stat string.</param>
            <param name="acctName">The client's account name.</param>
        </member>
        <member name="P:BNSharp.EnteredChatEventArgs.UniqueUsername">
            <summary>
            Gets the unique username assigned to the client.
            </summary>
        </member>
        <member name="P:BNSharp.EnteredChatEventArgs.Statstring">
            <summary>
            Gets the user's client information string.
            </summary>
        </member>
        <member name="P:BNSharp.EnteredChatEventArgs.AccountName">
            <summary>
            Gets the user's login account name.
            </summary>
        </member>
        <member name="T:BNSharp.ChannelListEventHandler">
            <summary>
            Specifies the contract for clients wishing to register for the channel list event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.ChannelListEventArgs">
            <summary>
            Specifies the channel list event arguments.
            </summary>
        </member>
        <member name="M:BNSharp.ChannelListEventArgs.#ctor(System.String[])">
            <summary>
            Creates a new instance of <see>ChannelListEventArgs</see>.
            </summary>
            <param name="channels">The channels to list.</param>
        </member>
        <member name="P:BNSharp.ChannelListEventArgs.Channels">
            <summary>
            Gets the copy of the list of channels sent by the server.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.Warcraft3Stats">
            <summary>
            Contains information about a user who is logged on with a Warcraft III client.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Warcraft3Stats.ClanTag">
            <summary>
            Gets the user's clan tag.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Warcraft3Stats.IconRace">
            <summary>
            Gets the icon race used for the user.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Warcraft3Stats.IconTier">
            <summary>
            Gets the icon tier used for the user.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Warcraft3Stats.Level">
            <summary>
            Gets the level of the user.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Warcraft3Stats.Product">
            <summary>
            Gets the <see cref="T:BNSharp.BattleNet.Product">Product</see> with which the user is currently logged on.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.Warcraft3Stats.LiteralText">
            <summary>
            Gets the user's literal statstring text.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendMovedEventArgs">
            <summary>
            Specifies that a friend has moved position in the client's list of friends (for example, by being promoted or demoted).
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Friends.FriendMovedEventArgs.#ctor(BNSharp.BattleNet.Friends.FriendUser,System.Int32)">
            <summary>
            Creates a new <see>FriendMovedEventArgs</see>.
            </summary>
            <param name="friend">The friend whose position changed.</param>
            <param name="newIndex">The new 0-based index of the friend's position.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendMovedEventArgs.Friend">
            <summary>
            Gets a reference to the friend whose position changed.
            </summary>
            <remarks>
            <para>When this property's backing store is serialized as part of a WCF data contract,
            it is given the name <c>Friend</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendMovedEventArgs.NewIndex">
            <summary>
            Gets the new position of the friend (0-based).
            </summary>
            <remarks>
            <para>When this property's backing store is serialized as part of a WCF data contract,
            it is given the name <c>NewIndex</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendMovedEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for friend moved events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.WarcraftClanLadderRecord">
            <summary>
            Contains information about a clan's Warcraft 3 ladder matches.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.WarcraftClanLadderRecord.#ctor(BNSharp.BattleNet.Stats.WarcraftClanLadderType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see>WarcraftLadderRecord</see>.
            </summary>
            <param name="teamType">The type of ladder represented by this record.</param>
            <param name="wins">The player's win count.</param>
            <param name="losses">The player's loss count.</param>
            <param name="level">The player's level.</param>
            <param name="hoursUntilExperienceDecay">The time (in hours) until the player's experience decays without playing.  For more information,
            see <see>HoursUntilExperienceDecay</see>.</param>
            <param name="totalExperience">The player's total experience value.</param>
            <param name="rank">The player's rank.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftClanLadderRecord.LadderType">
            <summary>
            Gets the type of ladder record represented by this team record.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftClanLadderRecord.Wins">
            <summary>
            Gets the number of wins played by the team.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftClanLadderRecord.Losses">
            <summary>
            Gets the number of losses played by the team.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftClanLadderRecord.Level">
            <summary>
            Gets the team's level.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftClanLadderRecord.HoursUntilExperienceDecay">
            <summary>
            Gets the number of hours until the team's experience decays.
            </summary>
            <remarks>
            <para>This value is the only piece that does not have a corresponding representation within the Warcraft III user interface.
            It is hypothesized that this is the meaning of the underlying value; however, it is unconfirmed.  This property may be removed
            or changed in future versions.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftClanLadderRecord.TotalExperience">
            <summary>
            Gets the team's experience level.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftClanLadderRecord.Rank">
            <summary>
            Gets the team's rank, if the team is ranked.
            </summary>
            <remarks>
            <para>If the team is unranked, this property will return 0.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanMemberRemovalResponse">
            <summary>
            Specifies the possible results when attempting to remove a clan member with <see cref="M:BNSharp.BattleNet.BattleNetClient.RemoveClanMember(System.String)">RemoveClanMember</see>.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanMemberRemovalResponse.Removed">
            <summary>
            Specifies that the member was successfully removed.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanMemberRemovalResponse.RemovalFailed">
            <summary>
            Specifies that Battle.net failed to remove the user from the clan.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanMemberRemovalResponse.CannotRemoveNewMember">
            <summary>
            Specifies that the member is too new to be removed from the clan.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanMemberRemovalResponse.NotAuthorized">
            <summary>
            Specifies that the client is not authorized to remove that member.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanMemberRemovalResponse.NotAllowed">
            <summary>
            Specifies that the user is not allowed to be removed.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanCandidatesSearchEventArgs">
            <summary>
            Specifies the result of a search for clan candidates.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanCandidatesSearchEventArgs.#ctor(BNSharp.BattleNet.Clans.ClanCandidatesSearchStatus)">
            <summary>
            Creates a new <see>ClanCandidatesSearchEventArgs</see> for a request that was unsuccessful.
            </summary>
            <param name="status">The status reported by Battle.net.</param>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanCandidatesSearchEventArgs.#ctor(BNSharp.BattleNet.Clans.ClanCandidatesSearchStatus,System.String[])">
            <summary>
            Creates a new <see>ClanCandidatesSearchEventArgs</see> for a request that was successful.
            </summary>
            <param name="status">The status reported by Battle.net.</param>
            <param name="candidateNames">The list of candidate names provided by Battle.net.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanCandidatesSearchEventArgs.Candidates">
            <summary>
            Gets a read-only list of the candidate names returned as a result of the search.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>CandidateNames</c>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanCandidatesSearchEventArgs.Status">
            <summary>
            Gets the functional result of the search.
            </summary>
            <remarks>
            <para>When exposed under a WCF data contract, this property's backing store is given the name <c>Status</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanCandidatesSearchEventHandler">
            <summary>
            Specifies the contract for event handlers that want to listen to clan candidates search events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.ArrangedTeamType">
            <summary>
            Specifies the type of arranged team for an <see>ArrangedTeamRecord</see> when viewing a player's profile.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.ArrangedTeamType.TwoVsTwo">
            <summary>
            Specifies that an arranged team record represents a 2vs2 group.  Values: 0x32565332 (844518194).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.ArrangedTeamType.ThreeVsThree">
            <summary>
            Specifies that an arranged team record represents a 3vs3 group.  Value: 0x33565333 (861295411).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.ArrangedTeamType.FourVsFour">
            <summary>
            Specifies that an arranged team is a 4vs4 group.  Value: 0x34565334 (878072627).
            </summary>
        </member>
        <member name="T:BNSharp.MBNCSUtil.NLS">
            <summary>
            Supports the New Logon System's SRP (Secure Remote Password)
            authentication system as well as Warcraft III server 
            signature validation.  This class cannot be inherited.
            </summary>
            <remarks>
            <para>This class does not monitor contexts to ensure that 
            its values are being modified in the appropriate sequence;
            the NLS authorization scheme is left up to the consumer.</para>
            </remarks>
            <threadsafety>This type is safe for all multithreaded operations.</threadsafety>
        </member>
        <member name="F:BNSharp.MBNCSUtil.NLS.Modulus">
            <summary>
            The modulus value used for login calculations.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.NLS.Generator">
            <summary>
            The generator value used for login calculations.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.NLS.SignatureKey">
            <summary>
            The four-byte RSA server signature key used to decrypt 
            the server signatures.
            </summary>
        </member>
        <member name="F:BNSharp.MBNCSUtil.NLS.ServerModulus">
            <summary>
            The modulus used to calculate the server IP signature.
            </summary>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.#ctor(System.String,System.String)">
            <summary>
            Creates a new NLS login context.
            </summary>
            <param name="Username">The username to use for authentication.</param>
            <param name="Password">The password to use for authentication.</param>
            <remarks>
            This type does not validate the sequence from moving from one message to the next.  Ensure that you
            have the correct sequence of calls.
            </remarks>
            <returns>An NLS context ID.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.VerifyServerProof(System.Byte[])">
            <summary>
            Verifies that the server's proof value matches the value
            calculated by the client.
            </summary>
            <param name="serverProof">The 20-byte server proof.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if 
            the server proof value is not exactly 20 bytes.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not 
            yet been initialized.</exception>
            <remarks>
            This method should be called after the <see cref="M:BNSharp.MBNCSUtil.NLS.LoginProof(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[])">LoginProof</see> method.
            </remarks>
            <returns><b>True</b> if the server proof is valid; 
            otherwise <b>false</b>.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.LoginProof(System.IO.Stream,System.Byte[],System.Byte[])">
            <summary>
            Adds the account login proof (for SID_AUTH_ACCOUNTLOGONPROOF)
            to the specified stream at the current location.
            </summary>
            <param name="stream">The stream to modify.</param>
            <param name="serverSalt">The salt value, sent from the server
            in SID_AUTH_ACCOUNTLOGON.</param>
            <param name="serverRandomKey">The server key, sent from the server
            in SID_AUTH_ACCOUNTLOGON.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if 
            the salt or server key values are not exactly 32 bytes.</exception>
            <exception cref="T:System.IO.IOException">Thrown if the buffer does 
            not have enough space to add the account creation information.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not 
            yet been initialized.</exception>
            <remarks>
            <para>The writeable length of the stream must be at least 20 bytes.</para>
            <para>This method should be called after the <see cref="M:BNSharp.MBNCSUtil.NLS.LoginAccount(System.Byte[],System.Int32,System.Int32)">LoginAccount</see> method.</para>
            </remarks>
            <returns>The total number of bytes written to the buffer.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.LoginProof(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Adds the account login proof (for SID_AUTH_ACCOUNTLOGONPROOF)
            to the specified buffer at the specified location.
            </summary>
            <param name="buffer">The buffer to modify.</param>
            <param name="startIndex">The starting index at which to 
            modify the buffer.</param>
            <param name="totalLength">The total number of bytes from 
            the starting index of the buffer that may be modified.</param>
            <param name="serverSalt">The salt value, sent from the server
            in SID_AUTH_ACCOUNTLOGON.</param>
            <param name="serverKey">The server key, sent from the server
            in SID_AUTH_ACCOUNTLOGON.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if 
            the salt or server key values are not exactly 32 bytes.</exception>
            <exception cref="T:System.IO.IOException">Thrown if the buffer does 
            not have enough space to add the account creation information.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not 
            yet been initialized.</exception>
            <remarks>
            <para>The writeable length of the buffer must be at least 20 bytes.</para>
            <para>This method should be called after the <see cref="M:BNSharp.MBNCSUtil.NLS.LoginAccount(System.Byte[],System.Int32,System.Int32)">LoginAccount</see> method.</para>
            </remarks>
            <returns>The total number of bytes written to the buffer.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.LoginProof(BNSharp.MBNCSUtil.DataBuffer,System.Byte[],System.Byte[])">
            <summary>
            Adds the account login proof (for SID_AUTH_ACCOUNTLOGONPROOF)
            to the specified packet.
            </summary>
            <param name="logonProofPacket">The BNCS packet to which to add the account logon data.</param>
            <param name="serverSalt">The salt value, sent from the server
            in SID_AUTH_ACCOUNTLOGON.</param>
            <param name="serverKey">The server key, sent from the server
            in SID_AUTH_ACCOUNTLOGON.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if 
            the salt or server key values are not exactly 32 bytes.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not 
            yet been initialized.</exception>
            <remarks>
            <para>This method should be called after the <see cref="M:BNSharp.MBNCSUtil.NLS.LoginAccount(BNSharp.MBNCSUtil.DataBuffer)">LoginAccount</see> method.</para>
            </remarks>
            <returns>The total number of bytes written to the buffer.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.LoginAccount(System.IO.Stream)">
            <summary>
            Adds the account login information (for SID_AUTH_ACCOUNTLOGON)
            to the specified stream at the current location.
            </summary>
            <param name="stream">The stream to modify.</param>
            <exception cref="T:System.IO.IOException">Thrown if the stream does 
            not have enough space to add the account creation information.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not 
            yet been initialized.</exception>
            <remarks>
            <para>The writeable length of the stream must be at least 33 bytes plus the length of the username.</para>
            <para>This method may be called first after creating the instance, or after the 
            <see cref="M:BNSharp.MBNCSUtil.NLS.CreateAccount(System.IO.Stream)">CreateAccount</see> method.</para>
            </remarks>
            <returns>The total number of bytes written to the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.LoginAccount(BNSharp.MBNCSUtil.DataBuffer)">
            <summary>
            Adds the account login information (for SID_AUTH_ACCOUNTLOGON)
            to the specified packet.
            </summary>
            <param name="loginPacket">The packet to which to add the login information.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not 
            yet been initialized.</exception>
            <remarks>
            <para>This method may be called first after creating the instance, or after the 
            <see cref="M:BNSharp.MBNCSUtil.NLS.CreateAccount(BNSharp.MBNCSUtil.DataBuffer)">CreateAccount</see> method.</para>		
            </remarks>
            <returns>The total number of bytes written to the buffer.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.LoginAccount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the account login information (for SID_AUTH_ACCOUNTLOGON)
            to the specified buffer at the specified location.
            </summary>
            <param name="buffer">The buffer to modify.</param>
            <param name="startIndex">The starting index at which to 
            modify the buffer.</param>
            <param name="totalLength">The total number of bytes from 
            the starting index of the buffer that may be modified.</param>
            <exception cref="T:System.IO.IOException">Thrown if the buffer does 
            not have enough space to add the account creation information.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not 
            yet been initialized.</exception>
            <remarks>
            <para>The writeable length of the stream must be at least 33 bytes plus the length of the username.</para>
            <para>This method may be called first after creating the instance, or after the 
            <see cref="M:BNSharp.MBNCSUtil.NLS.CreateAccount(System.Byte[],System.Int32,System.Int32)">CreateAccount</see> method.</para>		
            </remarks>
            <returns>The total number of bytes written to the buffer.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.CreateAccount(System.IO.Stream)">
            <summary>
            Adds the account creation information (for SID_AUTH_ACCOUNTCREATE)
            to the specified stream at the current location.
            </summary>
            <param name="stream">The stream to modify.</param>
            <exception cref="T:System.IO.IOException">Thrown if the stream does 
            not have enough space to add the account creation information.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not 
            yet been initialized.</exception>
            <remarks>
            <para>The writeable length of the stream must be at least 65 bytes plus the length of the user name.</para>
            <para>This method must be called first if you are creating a new account.</para>
            </remarks>
            <returns>The total number of bytes written to the stream.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.CreateAccount(BNSharp.MBNCSUtil.DataBuffer)">
            <summary>
            Adds the account creation information (for SID_AUTH_ACCOUNTCREATE)
            to the specified packet.
            </summary>
            <param name="acctPacket">The packet to which to add the account creation information.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not 
            yet been initialized.</exception>
            <remarks>
            <para>This method must be called first if you are creating a new account.</para>
            </remarks>
            <returns>The total number of bytes written to the buffer.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.CreateAccount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the account creation information (for SID_AUTH_ACCOUNTCREATE)
            to the specified buffer at the specified location.
            </summary>
            <param name="buffer">The buffer to modify.</param>
            <param name="startIndex">The starting index at which to 
            modify the buffer.</param>
            <param name="totalLength">The total number of bytes from 
            the starting index of the buffer that may be modified.</param>
            <exception cref="T:System.IO.IOException">Thrown if the buffer does 
            not have enough space to add the account creation information.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the object has not 
            yet been initialized.</exception>
            <remarks>
            <para>The writeable length of the stream must be at least 65 bytes plus the length of the user name.</para>
            <para>This method must be called first if you are creating a new account.</para>
            </remarks>
            <returns>The total number of bytes written to the buffer.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.NLS.ValidateServerSignature(System.Byte[],System.Byte[])">
            <summary>
            Validates a Warcraft III server signature.
            </summary>
            <param name="serverSignature">The server signature from 
            Battle.net's SID_AUTH_INFO message.</param>
            <param name="ipAddress">The IPv4 address of the server
            currently connected-to.</param>
            <returns><b>True</b> if the signature matches; 
            otherwise <b>false</b>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if 
            the server signature is not exactly 128 bytes.</exception>
        </member>
        <member name="T:BNSharp.MBNCSUtil.Data.BniIcon">
            <summary>
            Represents metadata about an icon from a Starcraft or Warcraft II: Battle.net Edition .BNI file.  This class cannot be inherited.
            </summary>
            <remarks>
            <para>To obtain an instance of this class, use the <see>BniFileParser</see> class.</para>
            </remarks>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.BniIcon.ToString">
            <summary>
            Gets a string representation of this icon.
            </summary>
            <returns>A string containing flags and product information.</returns>
        </member>
        <member name="M:BNSharp.MBNCSUtil.Data.BniIcon.Dispose">
            <summary>
            Disposes the object, freeing any unmanaged and managed resources.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.BniIcon.Image">
            <summary>
            Gets the icon.
            </summary>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.BniIcon.UserFlags">
            <summary>
            Gets the user flags that should be set in order for a user to display this icon.
            </summary>
            <remarks>
            <para>If this value is <see cref="P:BNSharp.MBNCSUtil.Data.BniIcon.UserFlags">None</see> then the user should receive his or her product-defined icon, 
            available in the <see>SoftwareProductCodes</see> property.
            </para>
            </remarks>
        </member>
        <member name="P:BNSharp.MBNCSUtil.Data.BniIcon.SoftwareProductCodes">
            <summary>
            Gets a list of the product codes that are eligible for this icon.  If this list is empty, the icon is determined based on the 
            user's flags.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendUpdatedEventArgs">
            <summary>
            Specifies that a friend's status has been updated.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Friends.FriendUpdatedEventArgs.#ctor(BNSharp.BattleNet.Friends.FriendUser)">
            <summary>
            Creates a new <see>FriendUpdatedEventArgs</see>.
            </summary>
            <param name="updatedFriend">The friend that was updated.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendUpdatedEventArgs.Friend">
            <summary>
            Gets a reference to the friend that was updated.
            </summary>
            <remarks>
            <para>When this property's backing store is serialized as part of a WCF data contract,
            it is given the name <c>Friend</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendUpdatedEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for friend updated events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.WarcraftProfile">
            <summary>
            Contains information about the user's Warcraft 3 profile, including statistics.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.WarcraftProfile.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new <see>WarcraftProfile</see>.
            </summary>
            <param name="description">The user's Description field value.</param>
            <param name="location">The user's Location field value.</param>
            <param name="clanTag">The user's clan tag.</param>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.WarcraftProfile.SetStats(BNSharp.BattleNet.Stats.WarcraftLadderRecord[],BNSharp.BattleNet.Stats.ArrangedTeamRecord[],BNSharp.BattleNet.Stats.WarcraftRaceRecord[])">
            <summary>
            In derived classes, sets the statistical data associated with the user's profile.
            </summary>
            <param name="ladderRecords">The user's ladder game records.</param>
            <param name="arrangedTeams">The user's arranged team game records.</param>
            <param name="raceRecords">The user's records by playable race.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if any parameters are <see langword="null"/>.</exception>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfile.Description">
            <summary>
            Gets the user's Description profile field.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfile.Location">
            <summary>
            Gets the user's Location profile field.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfile.ClanTag">
            <summary>
            Gets the user's clan tag, if any.
            </summary>
            <remarks>
            <para>If the user is not in a clan, this property will be <see langword="null" />.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfile.IconID">
            <summary>
            Gets (and in derived classes, sets) the selected icon ID of the user.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfile.ArrangedTeams">
            <summary>
            Retrieves a read-only collection of arranged team statistics.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfile.RaceRecords">
            <summary>
            Retrieves a read-only collection of race statistics.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftProfile.LadderRecords">
            <summary>
            Retrieves a read-only collection of ladder records for the user.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.WarcraftLadderRecord">
            <summary>
            Contains information about a player's records playing on official Warcraft 3 ladder matches.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Stats.WarcraftLadderRecord.#ctor(BNSharp.BattleNet.Stats.WarcraftLadderType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see>WarcraftLadderRecord</see>.
            </summary>
            <param name="teamType">The type of ladder represented by this record.</param>
            <param name="wins">The player's win count.</param>
            <param name="losses">The player's loss count.</param>
            <param name="level">The player's level.</param>
            <param name="hoursUntilExperienceDecay">The time (in hours) until the player's experience decays without playing.  For more information,
            see <see>HoursUntilExperienceDecay</see>.</param>
            <param name="totalExperience">The player's total experience value.</param>
            <param name="rank">The player's rank.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftLadderRecord.LadderType">
            <summary>
            Gets the type of ladder record represented by this team record.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftLadderRecord.Wins">
            <summary>
            Gets the number of wins played by the team.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftLadderRecord.Losses">
            <summary>
            Gets the number of losses played by the team.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftLadderRecord.Level">
            <summary>
            Gets the team's level.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftLadderRecord.HoursUntilExperienceDecay">
            <summary>
            Gets the number of hours until the team's experience decays.
            </summary>
            <remarks>
            <para>This value is the only piece that does not have a corresponding representation within the Warcraft III user interface.
            It is hypothesized that this is the meaning of the underlying value; however, it is unconfirmed.  This property may be removed
            or changed in future versions.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftLadderRecord.TotalExperience">
            <summary>
            Gets the team's experience level.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.WarcraftLadderRecord.Rank">
            <summary>
            Gets the team's rank, if the team is ranked.
            </summary>
            <remarks>
            <para>If the team is unranked, this property will return 0.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanInvitationEventArgs">
            <summary>
            Specifies information provided to the client when being invited to join an existing clan.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Clans.ClanInvitationEventArgs.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see>ClanInvitationEventArgs</see>.
            </summary>
            <param name="requestID">The unique request ID specified by Battle.net.</param>
            <param name="tag">The clan tag.</param>
            <param name="clanName">The clan name.</param>
            <param name="inviter">The name of the user inviting the client.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanInvitationEventArgs.RequestID">
            <summary>
            Gets the unique request ID associated with the invitation.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanInvitationEventArgs.ClanTag">
            <summary>
            Gets the clan tag of the clan to which the client was invited.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanInvitationEventArgs.ClanName">
            <summary>
            Gets the name of the clan to which the client was invited.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Clans.ClanInvitationEventArgs.Inviter">
            <summary>
            Gets the name of the Battle.net user who invited the client to the clan.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanInvitationEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for clan invitation events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.MBNCSUtil.XSha1">
            <summary>
            Provides an implementation of Battle.net's "broken" (nonstandard) SHA-1 
            implementation.  This class cannot be inherited.
            </summary>
            <remarks>
            This class does not derive from the standard
            .NET <see cref="T:System.Security.Cryptography.SHA1">SHA1</see>
            class, and also does not provide adequate security for independent
            security solutions.  See the System.Security.Cryptography 
            namespace for more information.
            </remarks>
            <threadsafety>This type is safe for multithreaded operations.</threadsafety>
        </member>
        <member name="M:BNSharp.MBNCSUtil.XSha1.CalculateHash(System.Byte[])">
            <summary>
            Calculates the "broken" SHA-1 hash used by Battle.net.
            </summary>
            <param name="data">The data to hash.</param>
            <returns>A 20-byte array containing the hashed result.</returns>
        </member>
        <member name="T:BNSharp.IBattleNetSettings">
            <summary>
            When implemented, provides the necessary settings to establish a Battle.net client connection.
            </summary>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.Client">
            <summary>
            Gets or sets the client product code.
            </summary>
            <remarks>
            <para>There are seven clients that may be currently emulated using BN#:</para>
            <list type="table">
                <listheader>
                    <term>Product Name</term>
                    <description>Product Code</description>
                </listheader>
                <item>
                    <term>Starcraft (Retail)</term>
                    <description>STAR</description>
                </item>
                <item>
                    <term>Starcraft: Brood War</term>
                    <description>SEXP</description>
                </item>
                <item>
                    <term>Warcraft II: Battle.net Edition</term>
                    <description>W2BN</description>
                </item>
                <item>
                    <term>Diablo II (Retail)</term>
                    <description>D2DV</description>
                </item>
                <item>
                    <term>Diablo II: The Lord of Destruction</term>
                    <description>D2XP</description>
                </item>
                <item>
                    <term>Warcraft III: The Reign of Chaos</term>
                    <description>WAR3</description>
                </item>
                <item>
                    <term>Warcraft III: The Frozen Throne</term>
                    <description>W3XP</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.VersionByte">
            <summary>
            Gets or sets the version byte.
            </summary>
            <remarks>
            <para>The version byte is a value that cannot be reliably retrieved from game files.  It can be found on most 
            web sites, or is generally updated on <a href="http://www.jinxbot.net/wiki/index.php?title=Client_Versions" target="_blank">the JinxBot Wiki</a>.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.CdKey1">
            <summary>
            Gets or sets the Product CD key.
            </summary>
            <remarks>
            <para>This property is required for all products.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.CdKey2">
            <summary>
            Gets or sets the Expansion Product CD key, if applicable.
            </summary>
            <remarks>
            <para>This property is only required when emulating Warcraft III: The Frozen Throne or Diablo II: Lord of Destruction.  However,
            when emulating the down-level clients, it will still be used if it is supported (for example, when logging onto Warcraft III: The 
            Reign of Chaos even though you have Warcraft III: The Frozen Throne installed).</para>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.GameExe">
            <summary>
            Gets or sets the full or relative path to the executable file used for revision checking.
            </summary>
            <remarks>
            <para>This file varies by client.</para>
            <list type="table">
                <listheader>
                    <term>Product</term>
                    <description>File</description>
                </listheader>
                <item>
                    <term>Starcraft; Starcraft: Brood War</term>
                    <description>Starcraft.exe</description>
                </item>
                <item>
                    <term>Warcraft II: Battle.net Edition</term>
                    <description>Warcraft II BNE.exe</description>
                </item>
                <item>
                    <term>Diablo II; Diablo II: Lord of Destruction</term>
                    <description>Game.exe</description>
                </item>
                <item>
                    <term>Warcraft III: The Reign of Chaos; Warcraft III: The Frozen Throne</term>
                    <description>War3.exe</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.GameFile2">
            <summary>
            Gets or sets the full or relative path to the second file used for revision checking.
            </summary>
            <remarks>
            <para>This file varies by client.</para>
            <list type="table">
                <listheader>
                    <term>Product</term>
                    <description>File</description>
                </listheader>
                <item>
                    <term>Starcraft; Starcraft: Brood War; Warcraft II: Battle.net Edition; 
                    Warcraft III: The Reign of Chaos; Warcraft III: The Frozen Throne</term>
                    <description>Storm.dll</description>
                </item>
                <item>
                    <term>Diablo II; Diablo II: Lord of Destruction</term>
                    <description>Bnclient.dll</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.GameFile3">
            <summary>
            Gets or sets the full or relative path to the third file used for revision checking.
            </summary>
            <remarks>
            <para>This file varies by client.</para>
            <list type="table">
                <listheader>
                    <term>Product</term>
                    <description>File</description>
                </listheader>
                <item>
                    <term>Starcraft; Starcraft: Brood War; Warcraft II: Battle.net Edition</term>
                    <description>Battle.snp</description>
                </item>
                <item>
                    <term>Diablo II; Diablo II: Lord of Destruction</term>
                    <description>D2Client.dll</description>
                </item>
                <item>
                    <term>Warcraft III: The Reign of Chaos; Warcraft III: The Frozen Throne</term>
                    <description>Game.dll</description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.Username">
            <summary>
            Gets or sets the name of the account that should be used to connect.
            </summary>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.ImageFile">
            <summary>
            Gets or sets the full or relative path to the file used for Lockdown revision checking.
            </summary>
            <remarks>
            <para>This property is not required for products other than Starcraft and Warcraft II: Battle.net Edition.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.Password">
            <summary>
            Gets or sets the password of the account used to connect.
            </summary>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.Server">
            <summary>
            Gets or sets the name or IP address of the server used to connect.
            </summary>
            <remarks>
            <alert class="important">
                <para>The Port property has been deprecated in BN# Beta 3 in favor of the <see>Gateway</see> property.  Its value
                is now ignored.</para>
            </alert>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.Port">
            <summary>
            Gets or sets the port that should be used to connect.
            </summary>
            <remarks>
            <alert class="important">
                <para>The Port property has been deprecated in BN# Beta 3 in favor of the <see>Gateway</see> property.  Its value
                is now ignored.</para>
            </alert>
            <para>The default port for Battle.net is 6112.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.Gateway">
            <summary>
            Gets or sets the Gateway that should be used to connect to the server.
            </summary>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.CdKeyOwner">
            <summary>
            Gets or sets the name of the CD Key Owner.
            </summary>
            <remarks>
            <para>This name is the one that appears if you attempt to log in with the CD key while it is already logged in.</para>
            </remarks>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.PingMethod">
            <summary>
            Gets or sets the type of ping that should be used for the connection.
            </summary>
        </member>
        <member name="P:BNSharp.IBattleNetSettings.HomeChannel">
            <summary>
            Gets or sets the channel the client should join when first logging in.
            </summary>
            <remarks>
            <para>If this property returns <see langword="null" /> or an empty string, then the standard channel
            join will be performed (for example, a client connecting with Starcraft: Brood War emulation might 
            join the channel Brood War USA-2).</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.UserProfileRequest">
            <summary>
            Specifies a key-value-based user profile.  This class cannot be inherited.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.UserProfileRequest.#ctor(System.String)">
            <summary>
            Creates a new empty <see>UserProfileRequest</see>.
            </summary>
            <param name="userName">The name of the user being requested.</param>
        </member>
        <member name="M:BNSharp.BattleNet.UserProfileRequest.#ctor(System.String,BNSharp.BattleNet.UserProfileKey[])">
            <summary>
            Creates a new <see>UserProfileRequest</see> with a number of keys.
            </summary>
            <param name="userName">The name of the user being requested.</param>
            <param name="keys">The keys to initially add.</param>
        </member>
        <member name="M:BNSharp.BattleNet.UserProfileRequest.Add(BNSharp.BattleNet.UserProfileKey)">
            <summary>
            Adds a key to a profile request.
            </summary>
            <param name="key">The key to retrieve.</param>
        </member>
        <member name="M:BNSharp.BattleNet.UserProfileRequest.AddRange(BNSharp.BattleNet.UserProfileKey[])">
            <summary>
            Adds a list of keys to a profile request.
            </summary>
            <param name="keys">The keys to retrieve.</param>
        </member>
        <member name="M:BNSharp.BattleNet.UserProfileRequest.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileRequest.Count">
            <summary>
            Gets the number of keys in this request.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileRequest.UserName">
            <summary>
            Gets the name of the user whose profile this represents.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.UserProfileRequest.Item(BNSharp.BattleNet.UserProfileKey)">
            <summary>
            Gets the value returned from Battle.net for the specified key.
            </summary>
            <param name="key">The key to look up.</param>
            <returns>The value returned from Battle.net.</returns>
            <remarks>
            <para>You can obtain the keys by creating and maintaining references to them, or by treating this object as enumerable
            (which means it can be used in a <see langword="foreach" /> loop).</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.DefaultStats">
            <summary>
            Gets information about the user's product when the product is otherwise unrecognized.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.DefaultStats.Product">
            <summary>
            Gets the <see cref="T:BNSharp.BattleNet.Product">Product</see> with which the user is currently logged on.
            </summary>
        </member>
        <member name="P:BNSharp.BattleNet.Stats.DefaultStats.LiteralText">
            <summary>
            Gets the literal statstring text.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendListReceivedEventArgs">
            <summary>
            Provides a friend list received from the server.
            </summary>
        </member>
        <member name="M:BNSharp.BattleNet.Friends.FriendListReceivedEventArgs.#ctor(BNSharp.BattleNet.Friends.FriendUser[])">
            <summary>
            Creates a new <see>FriendListReceivedEventArgs</see>.
            </summary>
            <param name="friends">The list of friends received from Battle.net.</param>
        </member>
        <member name="P:BNSharp.BattleNet.Friends.FriendListReceivedEventArgs.Friends">
            <summary>
            Gets the friends list received from Battle.net.
            </summary>
            <remarks>
            <para>When this property's backing store is serialized as part of a WCF data contract,
            it is given the name <c>Friends</c>.</para>
            </remarks>
        </member>
        <member name="T:BNSharp.BattleNet.Friends.FriendListReceivedEventHandler">
            <summary>
            Specifies the contract for handlers wishing to listen for friend list received events.
            </summary>
            <param name="sender">The object that originated the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BNSharp.BattleNet.Stats.WarcraftClanLadderType">
            <summary>
            Specifies the types of ladder rankings for clans.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.WarcraftClanLadderType.Solo">
            <summary>
            Specifies a clan solo match type.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.WarcraftClanLadderType.TwoVsTwo">
            <summary>
            Specifies a clan two-vs-two match type.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.WarcraftClanLadderType.ThreeVsThree">
            <summary>
            Specifies a clan three-vs-three match type.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Stats.WarcraftClanLadderType.FourVsFour">
            <summary>
            Specifies a clan four-vs-four match type.
            </summary>
        </member>
        <member name="T:BNSharp.BattleNet.Clans.ClanInvitationResponse">
            <summary>
            Specifies the types of responses when attempting to invite a user to join a clan.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanInvitationResponse.Accepted">
            <summary>
            Indicates that the user accepted the invitation.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanInvitationResponse.Declined">
            <summary>
            Indicates that the user declined the invitation.
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanInvitationResponse.FailedToInvite">
            <summary>
            Indicates that Battle.net was unable to invite the user (for instance, the user was not online).
            </summary>
        </member>
        <member name="F:BNSharp.BattleNet.Clans.ClanInvitationResponse.ClanFull">
            <summary>
            Indicates that the clan is full.
            </summary>
        </member>
    </members>
</doc>
