#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JinxBot.Data.LinqToSqlClient
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="JinxBot")]
	public partial class JinxBotDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClientSession(ClientSession instance);
    partial void UpdateClientSession(ClientSession instance);
    partial void DeleteClientSession(ClientSession instance);
    partial void InsertSessionPacket(SessionPacket instance);
    partial void UpdateSessionPacket(SessionPacket instance);
    partial void DeleteSessionPacket(SessionPacket instance);
    #endregion
		
		public JinxBotDataDataContext() : 
				base(global::JinxBot.Data.LinqToSqlClient.Properties.Settings.Default.JinxBotConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public JinxBotDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JinxBotDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JinxBotDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JinxBotDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ClientSession> ClientSessions
		{
			get
			{
				return this.GetTable<ClientSession>();
			}
		}
		
		public System.Data.Linq.Table<SessionPacket> SessionPackets
		{
			get
			{
				return this.GetTable<SessionPacket>();
			}
		}
	}
	
	[Table(Name="dbo.ClientSessions")]
	public partial class ClientSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientSessionID;
		
		private string _Client;
		
		private string _Server;
		
		private System.Data.Linq.Binary _VersionFile1;
		
		private System.Data.Linq.Binary _VersionFile2;
		
		private System.Data.Linq.Binary _VersionFile3;
		
		private System.Data.Linq.Binary _VersionFile4;
		
		private System.DateTime _Started;
		
		private System.Nullable<System.DateTime> _Ended;
		
		private EntitySet<SessionPacket> _SessionPackets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientSessionIDChanging(int value);
    partial void OnClientSessionIDChanged();
    partial void OnClientChanging(string value);
    partial void OnClientChanged();
    partial void OnServerChanging(string value);
    partial void OnServerChanged();
    partial void OnVersionFile1Changing(System.Data.Linq.Binary value);
    partial void OnVersionFile1Changed();
    partial void OnVersionFile2Changing(System.Data.Linq.Binary value);
    partial void OnVersionFile2Changed();
    partial void OnVersionFile3Changing(System.Data.Linq.Binary value);
    partial void OnVersionFile3Changed();
    partial void OnVersionFile4Changing(System.Data.Linq.Binary value);
    partial void OnVersionFile4Changed();
    partial void OnStartedChanging(System.DateTime value);
    partial void OnStartedChanged();
    partial void OnEndedChanging(System.Nullable<System.DateTime> value);
    partial void OnEndedChanged();
    #endregion
		
		public ClientSession()
		{
			this._SessionPackets = new EntitySet<SessionPacket>(new Action<SessionPacket>(this.attach_SessionPackets), new Action<SessionPacket>(this.detach_SessionPackets));
			OnCreated();
		}
		
		[Column(Storage="_ClientSessionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientSessionID
		{
			get
			{
				return this._ClientSessionID;
			}
			set
			{
				if ((this._ClientSessionID != value))
				{
					this.OnClientSessionIDChanging(value);
					this.SendPropertyChanging();
					this._ClientSessionID = value;
					this.SendPropertyChanged("ClientSessionID");
					this.OnClientSessionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Client", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Client
		{
			get
			{
				return this._Client;
			}
			set
			{
				if ((this._Client != value))
				{
					this.OnClientChanging(value);
					this.SendPropertyChanging();
					this._Client = value;
					this.SendPropertyChanged("Client");
					this.OnClientChanged();
				}
			}
		}
		
		[Column(Storage="_Server", DbType="VarChar(127) NOT NULL", CanBeNull=false)]
		public string Server
		{
			get
			{
				return this._Server;
			}
			set
			{
				if ((this._Server != value))
				{
					this.OnServerChanging(value);
					this.SendPropertyChanging();
					this._Server = value;
					this.SendPropertyChanged("Server");
					this.OnServerChanged();
				}
			}
		}
		
		[Column(Storage="_VersionFile1", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionFile1
		{
			get
			{
				return this._VersionFile1;
			}
			set
			{
				if ((this._VersionFile1 != value))
				{
					this.OnVersionFile1Changing(value);
					this.SendPropertyChanging();
					this._VersionFile1 = value;
					this.SendPropertyChanged("VersionFile1");
					this.OnVersionFile1Changed();
				}
			}
		}
		
		[Column(Storage="_VersionFile2", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionFile2
		{
			get
			{
				return this._VersionFile2;
			}
			set
			{
				if ((this._VersionFile2 != value))
				{
					this.OnVersionFile2Changing(value);
					this.SendPropertyChanging();
					this._VersionFile2 = value;
					this.SendPropertyChanged("VersionFile2");
					this.OnVersionFile2Changed();
				}
			}
		}
		
		[Column(Storage="_VersionFile3", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionFile3
		{
			get
			{
				return this._VersionFile3;
			}
			set
			{
				if ((this._VersionFile3 != value))
				{
					this.OnVersionFile3Changing(value);
					this.SendPropertyChanging();
					this._VersionFile3 = value;
					this.SendPropertyChanged("VersionFile3");
					this.OnVersionFile3Changed();
				}
			}
		}
		
		[Column(Storage="_VersionFile4", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary VersionFile4
		{
			get
			{
				return this._VersionFile4;
			}
			set
			{
				if ((this._VersionFile4 != value))
				{
					this.OnVersionFile4Changing(value);
					this.SendPropertyChanging();
					this._VersionFile4 = value;
					this.SendPropertyChanged("VersionFile4");
					this.OnVersionFile4Changed();
				}
			}
		}
		
		[Column(Storage="_Started", DbType="DateTime NOT NULL")]
		public System.DateTime Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this.OnStartedChanging(value);
					this.SendPropertyChanging();
					this._Started = value;
					this.SendPropertyChanged("Started");
					this.OnStartedChanged();
				}
			}
		}
		
		[Column(Storage="_Ended", DbType="DateTime")]
		public System.Nullable<System.DateTime> Ended
		{
			get
			{
				return this._Ended;
			}
			set
			{
				if ((this._Ended != value))
				{
					this.OnEndedChanging(value);
					this.SendPropertyChanging();
					this._Ended = value;
					this.SendPropertyChanged("Ended");
					this.OnEndedChanged();
				}
			}
		}
		
		[Association(Name="ClientSession_SessionPacket", Storage="_SessionPackets", OtherKey="SessionID")]
		public EntitySet<SessionPacket> SessionPackets
		{
			get
			{
				return this._SessionPackets;
			}
			set
			{
				this._SessionPackets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SessionPackets(SessionPacket entity)
		{
			this.SendPropertyChanging();
			entity.ClientSession = this;
		}
		
		private void detach_SessionPackets(SessionPacket entity)
		{
			this.SendPropertyChanging();
			entity.ClientSession = null;
		}
	}
	
	[Table(Name="dbo.SessionPackets")]
	public partial class SessionPacket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SessionID;
		
		private bool _Sent;
		
		private System.Data.Linq.Binary _Contents;
		
		private EntityRef<ClientSession> _ClientSession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnSentChanging(bool value);
    partial void OnSentChanged();
    partial void OnContentsChanging(System.Data.Linq.Binary value);
    partial void OnContentsChanged();
    #endregion
		
		public SessionPacket()
		{
			this._ClientSession = default(EntityRef<ClientSession>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_SessionID", DbType="Int NOT NULL")]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._ClientSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[Column(Storage="_Sent", DbType="Bit NOT NULL")]
		public bool Sent
		{
			get
			{
				return this._Sent;
			}
			set
			{
				if ((this._Sent != value))
				{
					this.OnSentChanging(value);
					this.SendPropertyChanging();
					this._Sent = value;
					this.SendPropertyChanged("Sent");
					this.OnSentChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="VarBinary(2048) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[Association(Name="ClientSession_SessionPacket", Storage="_ClientSession", ThisKey="SessionID", IsForeignKey=true)]
		public ClientSession ClientSession
		{
			get
			{
				return this._ClientSession.Entity;
			}
			set
			{
				ClientSession previousValue = this._ClientSession.Entity;
				if (((previousValue != value) 
							|| (this._ClientSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientSession.Entity = null;
						previousValue.SessionPackets.Remove(this);
					}
					this._ClientSession.Entity = value;
					if ((value != null))
					{
						value.SessionPackets.Add(this);
						this._SessionID = value.ClientSessionID;
					}
					else
					{
						this._SessionID = default(int);
					}
					this.SendPropertyChanged("ClientSession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
